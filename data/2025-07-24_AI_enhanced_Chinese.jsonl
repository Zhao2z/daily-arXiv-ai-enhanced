{"id": "2507.17049", "categories": ["cs.SE", "cs.RO"], "pdf": "https://arxiv.org/pdf/2507.17049", "abs": "https://arxiv.org/abs/2507.17049", "authors": ["Pablo Valle", "Chengjie Lu", "Shaukat Ali", "Aitor Arrieta"], "title": "Evaluating Uncertainty and Quality of Visual Language Action-enabled Robots", "comment": null, "summary": "Visual Language Action (VLA) models are a multi-modal class of Artificial\nIntelligence (AI) systems that integrate visual perception, natural language\nunderstanding, and action planning to enable agents to interpret their\nenvironment, comprehend instructions, and perform embodied tasks autonomously.\nRecently, significant progress has been made to advance this field. These kinds\nof models are typically evaluated through task success rates, which fail to\ncapture the quality of task execution and the mode's confidence in its\ndecisions. In this paper, we propose eight uncertainty metrics and five quality\nmetrics specifically designed for VLA models for robotic manipulation tasks. We\nassess their effectiveness through a large-scale empirical study involving 908\nsuccessful task executions from three state-of-the-art VLA models across four\nrepresentative robotic manipulation tasks. Human domain experts manually\nlabeled task quality, allowing us to analyze the correlation between our\nproposed metrics and expert judgments. The results reveal that several metrics\nshow moderate to strong correlation with human assessments, highlighting their\nutility for evaluating task quality and model confidence. Furthermore, we found\nthat some of the metrics can discriminate between high-, medium-, and\nlow-quality executions from unsuccessful tasks, which can be interesting when\ntest oracles are not available. Our findings challenge the adequacy of current\nevaluation practices that rely solely on binary success rates and pave the way\nfor improved real-time monitoring and adaptive enhancement of VLA-enabled\nrobotic systems.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u9488\u5bf9\u89c6\u89c9\u8bed\u8a00\u52a8\u4f5c(VLA)\u6a21\u578b\u76848\u4e2a\u4e0d\u786e\u5b9a\u6027\u6307\u6807\u548c5\u4e2a\u8d28\u91cf\u6307\u6807\uff0c\u901a\u8fc7908\u6b21\u6210\u529f\u4efb\u52a1\u6267\u884c\u7684\u5927\u89c4\u6a21\u5b9e\u8bc1\u7814\u7a76\uff0c\u53d1\u73b0\u8fd9\u4e9b\u6307\u6807\u4e0e\u4eba\u7c7b\u4e13\u5bb6\u8bc4\u4f30\u5177\u6709\u4e2d\u7b49\u5230\u5f3a\u7684\u76f8\u5173\u6027\uff0c\u6311\u6218\u4e86\u4ec5\u4f9d\u8d56\u4e8c\u5143\u6210\u529f\u7387\u7684\u73b0\u6709\u8bc4\u4f30\u65b9\u6cd5\u3002", "motivation": "\u73b0\u6709\u7684VLA\u6a21\u578b\u8bc4\u4f30\u4e3b\u8981\u4f9d\u8d56\u4efb\u52a1\u6210\u529f\u7387\uff0c\u65e0\u6cd5\u6355\u6349\u4efb\u52a1\u6267\u884c\u8d28\u91cf\u548c\u6a21\u578b\u51b3\u7b56\u7f6e\u4fe1\u5ea6\u3002\u4f20\u7edf\u7684\u4e8c\u5143\u6210\u529f\u7387\u8bc4\u4f30\u65b9\u6cd5\u4e0d\u8db3\u4ee5\u5168\u9762\u8bc4\u4ef7VLA\u6a21\u578b\u5728\u673a\u5668\u4eba\u64cd\u4f5c\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff0c\u9700\u8981\u66f4\u7ec6\u7c92\u5ea6\u7684\u8bc4\u4f30\u6307\u6807\u3002", "method": "\u63d0\u51fa\u4e868\u4e2a\u4e0d\u786e\u5b9a\u6027\u6307\u6807\u548c5\u4e2a\u8d28\u91cf\u6307\u6807\u4e13\u95e8\u7528\u4e8e\u8bc4\u4f30VLA\u6a21\u578b\u7684\u673a\u5668\u4eba\u64cd\u4f5c\u4efb\u52a1\u3002\u901a\u8fc7\u5927\u89c4\u6a21\u5b9e\u8bc1\u7814\u7a76\uff0c\u4f7f\u75283\u4e2a\u6700\u5148\u8fdb\u7684VLA\u6a21\u578b\u57284\u4e2a\u4ee3\u8868\u6027\u673a\u5668\u4eba\u64cd\u4f5c\u4efb\u52a1\u4e0a\u8fdb\u884c908\u6b21\u6210\u529f\u4efb\u52a1\u6267\u884c\u3002\u4eba\u7c7b\u9886\u57df\u4e13\u5bb6\u624b\u52a8\u6807\u6ce8\u4efb\u52a1\u8d28\u91cf\uff0c\u5206\u6790\u63d0\u51fa\u6307\u6807\u4e0e\u4e13\u5bb6\u5224\u65ad\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002", "result": "\u7814\u7a76\u7ed3\u679c\u663e\u793a\uff0c\u591a\u4e2a\u63d0\u51fa\u7684\u6307\u6807\u4e0e\u4eba\u7c7b\u8bc4\u4f30\u5448\u73b0\u4e2d\u7b49\u5230\u5f3a\u7684\u76f8\u5173\u6027\uff0c\u8bc1\u660e\u4e86\u8fd9\u4e9b\u6307\u6807\u5728\u8bc4\u4f30\u4efb\u52a1\u8d28\u91cf\u548c\u6a21\u578b\u7f6e\u4fe1\u5ea6\u65b9\u9762\u7684\u5b9e\u7528\u6027\u3002\u90e8\u5206\u6307\u6807\u80fd\u591f\u533a\u5206\u9ad8\u3001\u4e2d\u3001\u4f4e\u8d28\u91cf\u6267\u884c\u4e0e\u5931\u8d25\u4efb\u52a1\uff0c\u8fd9\u5728\u7f3a\u4e4f\u6d4b\u8bd5\u9884\u8a00\u673a\u65f6\u5177\u6709\u91cd\u8981\u4ef7\u503c\u3002", "conclusion": "\u7814\u7a76\u6311\u6218\u4e86\u5f53\u524d\u4ec5\u4f9d\u8d56\u4e8c\u5143\u6210\u529f\u7387\u7684\u8bc4\u4f30\u5b9e\u8df5\u7684\u5145\u5206\u6027\uff0c\u4e3a\u6539\u8fdbVLA\u9a71\u52a8\u7684\u673a\u5668\u4eba\u7cfb\u7edf\u7684\u5b9e\u65f6\u76d1\u63a7\u548c\u81ea\u9002\u5e94\u589e\u5f3a\u94fa\u5e73\u4e86\u9053\u8def\u3002\u63d0\u51fa\u7684\u6307\u6807\u4f53\u7cfb\u4e3aVLA\u6a21\u578b\u63d0\u4f9b\u4e86\u66f4\u5168\u9762\u3001\u7ec6\u81f4\u7684\u8bc4\u4f30\u6846\u67b6\u3002"}}
{"id": "2507.17093", "categories": ["cs.SE", "68N30", "D.2.4; D.2.5; D.2.8"], "pdf": "https://arxiv.org/pdf/2507.17093", "abs": "https://arxiv.org/abs/2507.17093", "authors": ["Danushka Liyanage", "Nelum Attanayake", "Zijian Luo", "Rahul Gopinath"], "title": "Assessing Reliability of Statistical Maximum Coverage Estimators in Fuzzing", "comment": "ICSME'25 Registered Report", "summary": "Background: Fuzzers are often guided by coverage, making the estimation of\nmaximum achievable coverage a key concern in fuzzing. However, achieving 100%\ncoverage is infeasible for most real-world software systems, regardless of\neffort. While static reachability analysis can provide an upper bound, it is\noften highly inaccurate. Recently, statistical estimation methods based on\nspecies richness estimators from biostatistics have been proposed as a\npotential solution. Yet, the lack of reliable benchmarks with labeled ground\ntruth has limited rigorous evaluation of their accuracy.\n  Objective: This work examines the reliability of reachability estimators from\ntwo axes: addressing the lack of labeled ground truth and evaluating their\nreliability on real-world programs.\n  Methods: (1) To address the challenge of labeled ground truth, we propose an\nevaluation framework that synthetically generates large programs with complex\ncontrol flows, ensuring well-defined reachability and providing ground truth\nfor evaluation. (2) To address the criticism from use of synthetic benchmarks,\nwe adapt a reliability check for reachability estimators on real-world\nbenchmarks without labeled ground truth -- by varying the size of sampling\nunits, which, in theory, should not affect the estimate.\n  Results: These two studies together will help answer the question of whether\ncurrent reachability estimators are reliable, and defines a protocol to\nevaluate future improvements in reachability estimation.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u8bc4\u4f30\u6a21\u7cca\u6d4b\u8bd5\u4e2d\u53ef\u8fbe\u6027\u4f30\u8ba1\u5668\u53ef\u9760\u6027\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u5408\u6210\u7a0b\u5e8f\u751f\u6210\u771f\u5b9e\u6807\u7b7e\u548c\u5728\u771f\u5b9e\u7a0b\u5e8f\u4e0a\u7684\u53ef\u9760\u6027\u68c0\u67e5\u6765\u89e3\u51b3\u73b0\u6709\u8bc4\u4f30\u65b9\u6cd5\u7684\u4e0d\u8db3", "motivation": "\u6a21\u7cca\u6d4b\u8bd5\u901a\u5e38\u4ee5\u8986\u76d6\u7387\u4e3a\u6307\u5bfc\uff0c\u4f46\u4f30\u8ba1\u6700\u5927\u53ef\u8fbe\u8986\u76d6\u7387\u9762\u4e34\u6311\u6218\uff1a\u9759\u6001\u53ef\u8fbe\u6027\u5206\u6790\u4e0d\u51c6\u786e\uff0c\u57fa\u4e8e\u751f\u7269\u7edf\u8ba1\u5b66\u7684\u7edf\u8ba1\u4f30\u8ba1\u65b9\u6cd5\u7f3a\u4e4f\u53ef\u9760\u7684\u5e26\u6807\u7b7e\u57fa\u51c6\u6570\u636e\u96c6\u8fdb\u884c\u4e25\u683c\u8bc4\u4f30", "method": "1\uff09\u63d0\u51fa\u8bc4\u4f30\u6846\u67b6\uff0c\u5408\u6210\u751f\u6210\u5177\u6709\u590d\u6742\u63a7\u5236\u6d41\u7684\u5927\u578b\u7a0b\u5e8f\uff0c\u786e\u4fdd\u660e\u786e\u5b9a\u4e49\u7684\u53ef\u8fbe\u6027\u5e76\u63d0\u4f9b\u8bc4\u4f30\u7684\u771f\u5b9e\u6807\u7b7e\uff1b2\uff09\u901a\u8fc7\u6539\u53d8\u91c7\u6837\u5355\u5143\u5927\u5c0f\u6765\u9002\u914d\u771f\u5b9e\u4e16\u754c\u57fa\u51c6\u4e0a\u7684\u53ef\u8fbe\u6027\u4f30\u8ba1\u5668\u53ef\u9760\u6027\u68c0\u67e5\u65b9\u6cd5", "result": "\u4e24\u9879\u7814\u7a76\u5171\u540c\u56de\u7b54\u4e86\u5f53\u524d\u53ef\u8fbe\u6027\u4f30\u8ba1\u5668\u662f\u5426\u53ef\u9760\u7684\u95ee\u9898\uff0c\u5e76\u4e3a\u8bc4\u4f30\u672a\u6765\u53ef\u8fbe\u6027\u4f30\u8ba1\u6539\u8fdb\u5b9a\u4e49\u4e86\u534f\u8bae", "conclusion": "\u8be5\u5de5\u4f5c\u5efa\u7acb\u4e86\u8bc4\u4f30\u53ef\u8fbe\u6027\u4f30\u8ba1\u5668\u53ef\u9760\u6027\u7684\u5b8c\u6574\u6846\u67b6\uff0c\u65e2\u89e3\u51b3\u4e86\u7f3a\u4e4f\u771f\u5b9e\u6807\u7b7e\u7684\u95ee\u9898\uff0c\u53c8\u63d0\u4f9b\u4e86\u5728\u771f\u5b9e\u7a0b\u5e8f\u4e0a\u9a8c\u8bc1\u7684\u65b9\u6cd5\uff0c\u4e3a\u672a\u6765\u6539\u8fdb\u53ef\u8fbe\u6027\u4f30\u8ba1\u63d0\u4f9b\u4e86\u8bc4\u4f30\u6807\u51c6"}}
{"id": "2507.17165", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.17165", "abs": "https://arxiv.org/abs/2507.17165", "authors": ["Taher A. Ghaleb", "Dulina Rathnayake"], "title": "Can LLMs Write CI? A Study on Automatic Generation of GitHub Actions Configurations", "comment": "Accepted at the 41st IEEE International Conference on Software\n  Maintenance and Evolution 2025 (ICSME'25)", "summary": "Continuous Integration (CI) services, such as GitHub Actions, require\ndevelopers to write YAML-based configurations, which can be tedious and\nerror-prone. Despite the increasing use of Large Language Models (LLMs) to\nautomate software engineering tasks, their ability to generate CI\nconfigurations remains underexplored. This paper presents a preliminary study\nevaluating six LLMs for generating GitHub Actions configurations from natural\nlanguage descriptions. We assess three general-purpose foundation models\n(GPT-4o, Llama, and Gemma) and three code-pretrained models (GPT-4.1, Code\nLlama, and CodeGemma). We also introduce the first labeled dataset of its kind,\nconstructed from GitHub Actions documentation, pairing descriptions with\ncorresponding best-practice YAML configurations. Zero-shot prompting achieves\nup to 69% similarity with the ground truth, with only 3% perfect matches.\nCode-pretrained models slightly underperform compared to general-purpose ones\nin YAML-based CI tasks, revealing LLM limitations for CI configuration\ngeneration. Analyzing GPT-4o outputs reveals issues like missing or renamed\nsteps, misinterpreted descriptions, and unnecessary additions that may affect\nstructural and contextual correctness, indicating a gap between generation\nquality and the precision required for executable CI configurations. Our\nresearch offers insights for improving LLM alignment with configuration\nlanguages and guiding future efforts on CI automation and tooling support.", "AI": {"tldr": "\u7814\u7a76\u8bc4\u4f30\u4e86\u516d\u4e2a\u5927\u8bed\u8a00\u6a21\u578b\uff08\u5305\u62ecGPT-4o\u3001Llama\u3001Gemma\u7b49\uff09\u4ece\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u751f\u6210GitHub Actions\u914d\u7f6e\u6587\u4ef6\u7684\u80fd\u529b\uff0c\u53d1\u73b0\u96f6\u6837\u672c\u63d0\u793a\u6700\u9ad8\u80fd\u8fbe\u523069%\u7684\u76f8\u4f3c\u5ea6\u4f46\u4ec5\u67093%\u5b8c\u5168\u5339\u914d\uff0c\u63ed\u793a\u4e86LLM\u5728CI\u914d\u7f6e\u751f\u6210\u65b9\u9762\u7684\u5c40\u9650\u6027\u3002", "motivation": "\u6301\u7eed\u96c6\u6210\u670d\u52a1\u9700\u8981\u5f00\u53d1\u8005\u7f16\u5199\u57fa\u4e8eYAML\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7e41\u7410\u4e14\u5bb9\u6613\u51fa\u9519\u3002\u5c3d\u7ba1\u5927\u8bed\u8a00\u6a21\u578b\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\u81ea\u52a8\u5316\u65b9\u9762\u5e94\u7528\u65e5\u76ca\u589e\u591a\uff0c\u4f46\u5176\u751f\u6210CI\u914d\u7f6e\u7684\u80fd\u529b\u4ecd\u672a\u5f97\u5230\u5145\u5206\u63a2\u7d22\uff0c\u56e0\u6b64\u9700\u8981\u7cfb\u7edf\u6027\u8bc4\u4f30LLM\u5728\u8fd9\u4e00\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u3002", "method": "\u8bc4\u4f30\u4e86\u516d\u4e2aLLM\u6a21\u578b\uff1a\u4e09\u4e2a\u901a\u7528\u57fa\u7840\u6a21\u578b\uff08GPT-4o\u3001Llama\u3001Gemma\uff09\u548c\u4e09\u4e2a\u4ee3\u7801\u9884\u8bad\u7ec3\u6a21\u578b\uff08GPT-4.1\u3001Code Llama\u3001CodeGemma\uff09\u3002\u6784\u5efa\u4e86\u9996\u4e2a\u6b64\u7c7b\u6807\u6ce8\u6570\u636e\u96c6\uff0c\u4eceGitHub Actions\u6587\u6863\u4e2d\u63d0\u53d6\u63cf\u8ff0\u4e0e\u5bf9\u5e94\u7684\u6700\u4f73\u5b9e\u8df5YAML\u914d\u7f6e\u5bf9\u3002\u4f7f\u7528\u96f6\u6837\u672c\u63d0\u793a\u65b9\u6cd5\u8fdb\u884c\u8bc4\u4f30\uff0c\u5e76\u5206\u6790\u751f\u6210\u7ed3\u679c\u7684\u76f8\u4f3c\u5ea6\u548c\u51c6\u786e\u6027\u3002", "result": "\u96f6\u6837\u672c\u63d0\u793a\u6700\u9ad8\u8fbe\u523069%\u7684\u76f8\u4f3c\u5ea6\uff0c\u4f46\u4ec5\u67093%\u7684\u5b8c\u5168\u5339\u914d\u3002\u4ee3\u7801\u9884\u8bad\u7ec3\u6a21\u578b\u5728YAML-based CI\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u7565\u900a\u4e8e\u901a\u7528\u6a21\u578b\u3002GPT-4o\u8f93\u51fa\u5206\u6790\u663e\u793a\u5b58\u5728\u6b65\u9aa4\u7f3a\u5931\u6216\u91cd\u547d\u540d\u3001\u63cf\u8ff0\u8bef\u89e3\u3001\u4e0d\u5fc5\u8981\u6dfb\u52a0\u7b49\u95ee\u9898\uff0c\u5f71\u54cd\u4e86\u7ed3\u6784\u548c\u4e0a\u4e0b\u6587\u7684\u6b63\u786e\u6027\u3002", "conclusion": "\u7814\u7a76\u63ed\u793a\u4e86LLM\u5728CI\u914d\u7f6e\u751f\u6210\u65b9\u9762\u7684\u5c40\u9650\u6027\uff0c\u751f\u6210\u8d28\u91cf\u4e0e\u53ef\u6267\u884cCI\u914d\u7f6e\u6240\u9700\u7684\u7cbe\u786e\u5ea6\u4e4b\u95f4\u5b58\u5728\u5dee\u8ddd\u3002\u7814\u7a76\u4e3a\u6539\u8fdbLLM\u4e0e\u914d\u7f6e\u8bed\u8a00\u7684\u5bf9\u9f50\u63d0\u4f9b\u4e86\u89c1\u89e3\uff0c\u5e76\u4e3a\u672a\u6765CI\u81ea\u52a8\u5316\u548c\u5de5\u5177\u652f\u6301\u7684\u52aa\u529b\u63d0\u4f9b\u6307\u5bfc\u3002"}}
{"id": "2507.17235", "categories": ["cs.SE", "quant-ph"], "pdf": "https://arxiv.org/pdf/2507.17235", "abs": "https://arxiv.org/abs/2507.17235", "authors": ["Andriy Miranskyy", "Jos\u00e9 Campos", "Anila Mjeda", "Lei Zhang", "Ignacio Garc\u00eda Rodr\u00edguez de Guzm\u00e1n"], "title": "On the Feasibility of Quantum Unit Testing", "comment": null, "summary": "The increasing complexity of quantum software presents significant challenges\nfor software verification and validation, particularly in the context of unit\ntesting. This work presents a comprehensive study on quantum-centric unit\ntests, comparing traditional statistical approaches with tests specifically\ndesigned for quantum circuits. These include tests that run only on a classical\ncomputer, such as the Statevector test, as well as those executable on quantum\nhardware, such as the Swap test and the novel Inverse test. Through an\nempirical study and detailed analysis on 1,796,880 mutated quantum circuits, we\ninvestigate (a) each test's ability to detect subtle discrepancies between the\nexpected and actual states of a quantum circuit, and (b) the number of\nmeasurements required to achieve high reliability. The results demonstrate that\nquantum-centric tests, particularly the Statevector test and the Inverse test,\nprovide clear advantages in terms of precision and efficiency, reducing both\nfalse positives and false negatives compared to statistical tests. This work\ncontributes to the development of more robust and scalable strategies for\ntesting quantum software, supporting the future adoption of fault-tolerant\nquantum computers and promoting more reliable practices in quantum software\nengineering.", "AI": {"tldr": "\u8be5\u7814\u7a76\u6bd4\u8f83\u4e86\u4f20\u7edf\u7edf\u8ba1\u65b9\u6cd5\u4e0e\u91cf\u5b50\u7535\u8def\u4e13\u7528\u6d4b\u8bd5\u65b9\u6cd5\u5728\u91cf\u5b50\u8f6f\u4ef6\u5355\u5143\u6d4b\u8bd5\u4e2d\u7684\u8868\u73b0\uff0c\u901a\u8fc7\u5bf9\u8fd1180\u4e07\u4e2a\u53d8\u5f02\u91cf\u5b50\u7535\u8def\u7684\u5b9e\u8bc1\u7814\u7a76\uff0c\u53d1\u73b0\u91cf\u5b50\u4e2d\u5fc3\u5316\u6d4b\u8bd5\uff08\u7279\u522b\u662f\u72b6\u6001\u5411\u91cf\u6d4b\u8bd5\u548c\u9006\u6d4b\u8bd5\uff09\u5728\u7cbe\u5ea6\u548c\u6548\u7387\u65b9\u9762\u5177\u6709\u660e\u663e\u4f18\u52bf\u3002", "motivation": "\u91cf\u5b50\u8f6f\u4ef6\u590d\u6742\u6027\u65e5\u76ca\u589e\u52a0\uff0c\u7ed9\u8f6f\u4ef6\u9a8c\u8bc1\u548c\u9a8c\u8bc1\u5e26\u6765\u91cd\u5927\u6311\u6218\uff0c\u7279\u522b\u662f\u5728\u5355\u5143\u6d4b\u8bd5\u65b9\u9762\u3002\u9700\u8981\u5f00\u53d1\u66f4\u6709\u6548\u7684\u91cf\u5b50\u8f6f\u4ef6\u6d4b\u8bd5\u7b56\u7565\u6765\u652f\u6301\u5bb9\u9519\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u672a\u6765\u5e94\u7528\u3002", "method": "\u8fdb\u884c\u4e86\u91cf\u5b50\u4e2d\u5fc3\u5316\u5355\u5143\u6d4b\u8bd5\u7684\u7efc\u5408\u7814\u7a76\uff0c\u6bd4\u8f83\u4f20\u7edf\u7edf\u8ba1\u65b9\u6cd5\u4e0e\u4e13\u95e8\u4e3a\u91cf\u5b50\u7535\u8def\u8bbe\u8ba1\u7684\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u5305\u62ec\u4ec5\u5728\u7ecf\u5178\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u72b6\u6001\u5411\u91cf\u6d4b\u8bd5\uff0c\u4ee5\u53ca\u53ef\u5728\u91cf\u5b50\u786c\u4ef6\u4e0a\u6267\u884c\u7684\u4ea4\u6362\u6d4b\u8bd5\u548c\u65b0\u9896\u7684\u9006\u6d4b\u8bd5\u3002\u901a\u8fc7\u5bf91,796,880\u4e2a\u53d8\u5f02\u91cf\u5b50\u7535\u8def\u7684\u5b9e\u8bc1\u7814\u7a76\u548c\u8be6\u7ec6\u5206\u6790\u8fdb\u884c\u8bc4\u4f30\u3002", "result": "\u91cf\u5b50\u4e2d\u5fc3\u5316\u6d4b\u8bd5\uff0c\u7279\u522b\u662f\u72b6\u6001\u5411\u91cf\u6d4b\u8bd5\u548c\u9006\u6d4b\u8bd5\uff0c\u5728\u7cbe\u5ea6\u548c\u6548\u7387\u65b9\u9762\u63d0\u4f9b\u4e86\u660e\u663e\u4f18\u52bf\uff0c\u4e0e\u7edf\u8ba1\u6d4b\u8bd5\u76f8\u6bd4\u51cf\u5c11\u4e86\u5047\u9633\u6027\u548c\u5047\u9634\u6027\u3002\u7814\u7a76\u8c03\u67e5\u4e86\u6bcf\u79cd\u6d4b\u8bd5\u68c0\u6d4b\u91cf\u5b50\u7535\u8def\u9884\u671f\u72b6\u6001\u4e0e\u5b9e\u9645\u72b6\u6001\u4e4b\u95f4\u7ec6\u5fae\u5dee\u5f02\u7684\u80fd\u529b\uff0c\u4ee5\u53ca\u5b9e\u73b0\u9ad8\u53ef\u9760\u6027\u6240\u9700\u7684\u6d4b\u91cf\u6b21\u6570\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u4e3a\u5f00\u53d1\u66f4\u5f3a\u5927\u548c\u53ef\u6269\u5c55\u7684\u91cf\u5b50\u8f6f\u4ef6\u6d4b\u8bd5\u7b56\u7565\u505a\u51fa\u4e86\u8d21\u732e\uff0c\u652f\u6301\u5bb9\u9519\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u672a\u6765\u5e94\u7528\uff0c\u5e76\u4fc3\u8fdb\u91cf\u5b50\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u66f4\u53ef\u9760\u7684\u5b9e\u8df5\u3002\u91cf\u5b50\u4e2d\u5fc3\u5316\u6d4b\u8bd5\u65b9\u6cd5\u5728\u91cf\u5b50\u8f6f\u4ef6\u9a8c\u8bc1\u65b9\u9762\u5c55\u73b0\u51fa\u663e\u8457\u7684\u4f18\u52bf\u3002"}}
{"id": "2507.17264", "categories": ["cs.SE", "cs.AI", "cs.HC"], "pdf": "https://arxiv.org/pdf/2507.17264", "abs": "https://arxiv.org/abs/2507.17264", "authors": ["Jenny T. Liang", "Chenyang Yang", "Agnia Sergeyuk", "Travis D. Breaux", "Brad A. Myers"], "title": "Understanding Prompt Programming Tasks and Questions", "comment": null, "summary": "Prompting foundation models (FMs) like large language models (LLMs) have\nenabled new AI-powered software features (e.g., text summarization) that\npreviously were only possible by fine-tuning FMs. Now, developers are embedding\nprompts in software, known as prompt programs. The process of prompt\nprogramming requires the developer to make many changes to their prompt. Yet,\nthe questions developers ask to update their prompt is unknown, despite the\nanswers to these questions affecting how developers plan their changes. With\nthe growing number of research and commercial prompt programming tools, it is\nunclear whether prompt programmers' needs are being adequately addressed. We\naddress these challenges by developing a taxonomy of 25 tasks prompt\nprogrammers do and 51 questions they ask, measuring the importance of each task\nand question. We interview 16 prompt programmers, observe 8 developers make\nprompt changes, and survey 50 developers. We then compare the taxonomy with 48\nresearch and commercial tools. We find that prompt programming is not\nwell-supported: all tasks are done manually, and 16 of the 51 questions --\nincluding a majority of the most important ones -- remain unanswered. Based on\nthis, we outline important opportunities for prompt programming tools.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u901a\u8fc7\u8bbf\u8c08\u3001\u89c2\u5bdf\u548c\u8c03\u7814\u7814\u7a76\u4e86\u63d0\u793a\u7f16\u7a0b\u7684\u9700\u6c42\uff0c\u6784\u5efa\u4e86\u5305\u542b25\u4e2a\u4efb\u52a1\u548c51\u4e2a\u95ee\u9898\u7684\u5206\u7c7b\u4f53\u7cfb\uff0c\u53d1\u73b0\u73b0\u6709\u5de5\u5177\u652f\u6301\u4e0d\u8db3\uff0c\u5e76\u63d0\u51fa\u4e86\u6539\u8fdb\u673a\u4f1a", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u7b49\u57fa\u7840\u6a21\u578b\u7684\u666e\u53ca\uff0c\u5f00\u53d1\u8005\u5f00\u59cb\u5728\u8f6f\u4ef6\u4e2d\u5d4c\u5165\u63d0\u793a\u7a0b\u5e8f\uff0c\u4f46\u76ee\u524d\u5bf9\u63d0\u793a\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\u5f00\u53d1\u8005\u7684\u9700\u6c42\u548c\u9762\u4e34\u7684\u95ee\u9898\u7f3a\u4e4f\u6df1\u5165\u4e86\u89e3\uff0c\u4e14\u73b0\u6709\u7814\u7a76\u548c\u5546\u4e1a\u5de5\u5177\u662f\u5426\u5145\u5206\u6ee1\u8db3\u5f00\u53d1\u8005\u9700\u6c42\u5c1a\u4e0d\u660e\u786e", "method": "\u91c7\u7528\u6df7\u5408\u7814\u7a76\u65b9\u6cd5\uff1a(1)\u8bbf\u8c0816\u540d\u63d0\u793a\u7f16\u7a0b\u5f00\u53d1\u8005\uff1b(2)\u89c2\u5bdf8\u540d\u5f00\u53d1\u8005\u8fdb\u884c\u63d0\u793a\u4fee\u6539\u8fc7\u7a0b\uff1b(3)\u8c03\u781450\u540d\u5f00\u53d1\u8005\uff1b(4)\u5206\u679048\u4e2a\u7814\u7a76\u548c\u5546\u4e1a\u5de5\u5177\uff0c\u6784\u5efa\u63d0\u793a\u7f16\u7a0b\u4efb\u52a1\u548c\u95ee\u9898\u7684\u5206\u7c7b\u4f53\u7cfb", "result": "\u6784\u5efa\u4e86\u5305\u542b25\u4e2a\u63d0\u793a\u7f16\u7a0b\u4efb\u52a1\u548c51\u4e2a\u76f8\u5173\u95ee\u9898\u7684\u5206\u7c7b\u4f53\u7cfb\uff0c\u53d1\u73b0\u6240\u6709\u4efb\u52a1\u90fd\u9700\u8981\u624b\u52a8\u5b8c\u6210\uff0c51\u4e2a\u95ee\u9898\u4e2d\u670916\u4e2a\uff08\u5305\u62ec\u5927\u90e8\u5206\u6700\u91cd\u8981\u7684\u95ee\u9898\uff09\u4ecd\u7136\u6ca1\u6709\u5f97\u5230\u89e3\u7b54\uff0c\u8868\u660e\u63d0\u793a\u7f16\u7a0b\u652f\u6301\u4e25\u91cd\u4e0d\u8db3", "conclusion": "\u5f53\u524d\u63d0\u793a\u7f16\u7a0b\u5de5\u5177\u7684\u652f\u6301\u4e25\u91cd\u4e0d\u8db3\uff0c\u5927\u91cf\u91cd\u8981\u4efb\u52a1\u548c\u95ee\u9898\u672a\u5f97\u5230\u6709\u6548\u89e3\u51b3\uff0c\u57fa\u4e8e\u7814\u7a76\u7ed3\u679c\u4e3a\u63d0\u793a\u7f16\u7a0b\u5de5\u5177\u7684\u53d1\u5c55\u63d0\u51fa\u4e86\u91cd\u8981\u6539\u8fdb\u65b9\u5411\u548c\u673a\u4f1a"}}
{"id": "2507.17270", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.17270", "abs": "https://arxiv.org/abs/2507.17270", "authors": ["Alessandro Aneggi", "Andrea Janes"], "title": "Lessons from a Big-Bang Integration: Challenges in Edge Computing and Machine Learning", "comment": "Accepted @ XP2025 Poster session", "summary": "This experience report analyses a one year project focused on building a\ndistributed real-time analytics system using edge computing and machine\nlearning. The project faced critical setbacks due to a big-bang integration\napproach, where all components developed by multiple geographically dispersed\npartners were merged at the final stage. The integration effort resulted in\nonly six minutes of system functionality, far below the expected 40 minutes.\nThrough root cause analysis, the study identifies technical and organisational\nbarriers, including poor communication, lack of early integration testing, and\nresistance to topdown planning. It also considers psychological factors such as\na bias toward fully developed components over mockups. The paper advocates for\nearly mock based deployment, robust communication infrastructures, and the\nadoption of topdown thinking to manage complexity and reduce risk in reactive,\ndistributed projects. These findings underscore the limitations of traditional\nAgile methods in such contexts and propose simulation-driven engineering and\nstructured integration cycles as key enablers for future success.", "AI": {"tldr": "\u672c\u6587\u5206\u6790\u4e86\u4e00\u4e2a\u4e3a\u671f\u4e00\u5e74\u7684\u5206\u5e03\u5f0f\u5b9e\u65f6\u5206\u6790\u7cfb\u7edf\u9879\u76ee\u7684\u5931\u8d25\u7ecf\u9a8c\uff0c\u8be5\u9879\u76ee\u91c7\u7528\u8fb9\u7f18\u8ba1\u7b97\u548c\u673a\u5668\u5b66\u4e60\u6280\u672f\uff0c\u4f46\u56e0\u91c7\u7528\u5927\u7206\u70b8\u5f0f\u96c6\u6210\u65b9\u6cd5\u5bfc\u81f4\u7cfb\u7edf\u4ec5\u8fd0\u884c6\u5206\u949f\u800c\u975e\u9884\u671f\u768440\u5206\u949f\uff0c\u7814\u7a76\u8bc6\u522b\u4e86\u6280\u672f\u548c\u7ec4\u7ec7\u969c\u788d\uff0c\u5e76\u63d0\u51fa\u4e86\u57fa\u4e8e\u6a21\u62df\u7684\u65e9\u671f\u90e8\u7f72\u548c\u7ed3\u6784\u5316\u96c6\u6210\u5468\u671f\u7b49\u89e3\u51b3\u65b9\u6848\u3002", "motivation": "\u9879\u76ee\u56e2\u961f\u5728\u5f00\u53d1\u5206\u5e03\u5f0f\u5b9e\u65f6\u5206\u6790\u7cfb\u7edf\u65f6\u9047\u5230\u4e86\u4e25\u91cd\u7684\u96c6\u6210\u95ee\u9898\uff0c\u7cfb\u7edf\u529f\u80fd\u8fdc\u4f4e\u4e8e\u9884\u671f\u3002\u9700\u8981\u5206\u6790\u5931\u8d25\u539f\u56e0\u5e76\u4e3a\u672a\u6765\u7c7b\u4f3c\u9879\u76ee\u63d0\u4f9b\u7ecf\u9a8c\u6559\u8bad\u548c\u6539\u8fdb\u5efa\u8bae\u3002", "method": "\u901a\u8fc7\u6839\u56e0\u5206\u6790\u65b9\u6cd5\u5bf9\u9879\u76ee\u5931\u8d25\u8fdb\u884c\u6df1\u5165\u7814\u7a76\uff0c\u8bc6\u522b\u6280\u672f\u548c\u7ec4\u7ec7\u5c42\u9762\u7684\u969c\u788d\u56e0\u7d20\uff0c\u540c\u65f6\u8003\u8651\u5fc3\u7406\u56e0\u7d20\u5982\u5bf9\u5b8c\u6574\u5f00\u53d1\u7ec4\u4ef6\u7684\u504f\u597d\u3002\u5206\u6790\u4f20\u7edf\u654f\u6377\u65b9\u6cd5\u5728\u5206\u5e03\u5f0f\u9879\u76ee\u4e2d\u7684\u5c40\u9650\u6027\u3002", "result": "\u8bc6\u522b\u51fa\u7684\u4e3b\u8981\u95ee\u9898\u5305\u62ec\uff1a\u6c9f\u901a\u4e0d\u826f\u3001\u7f3a\u4e4f\u65e9\u671f\u96c6\u6210\u6d4b\u8bd5\u3001\u5bf9\u81ea\u4e0a\u800c\u4e0b\u89c4\u5212\u7684\u6297\u62d2\uff0c\u4ee5\u53ca\u504f\u597d\u5b8c\u6574\u7ec4\u4ef6\u800c\u975e\u6a21\u578b\u7684\u5fc3\u7406\u504f\u89c1\u3002\u7cfb\u7edf\u6700\u7ec8\u4ec5\u5b9e\u73b06\u5206\u949f\u529f\u80fd\u8fd0\u884c\uff0c\u8fdc\u4f4e\u4e8e40\u5206\u949f\u7684\u76ee\u6807\u3002", "conclusion": "\u63d0\u51fa\u4e86\u65e9\u671f\u57fa\u4e8e\u6a21\u578b\u7684\u90e8\u7f72\u3001\u5efa\u7acb\u5065\u58ee\u7684\u6c9f\u901a\u57fa\u7840\u8bbe\u65bd\u3001\u91c7\u7528\u81ea\u4e0a\u800c\u4e0b\u7684\u601d\u7ef4\u65b9\u5f0f\u6765\u7ba1\u7406\u590d\u6742\u6027\u548c\u964d\u4f4e\u98ce\u9669\u7684\u5efa\u8bae\u3002\u5f3a\u8c03\u4f20\u7edf\u654f\u6377\u65b9\u6cd5\u7684\u5c40\u9650\u6027\uff0c\u63a8\u8350\u91c7\u7528\u4eff\u771f\u9a71\u52a8\u5de5\u7a0b\u548c\u7ed3\u6784\u5316\u96c6\u6210\u5468\u671f\u4f5c\u4e3a\u672a\u6765\u6210\u529f\u7684\u5173\u952e\u56e0\u7d20\u3002"}}
{"id": "2507.17271", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.17271", "abs": "https://arxiv.org/abs/2507.17271", "authors": ["Shuaiyu Zhou", "Zhengran Zeng", "Xiaoling Zhou", "Rui Xie", "Shikun Zhang", "Wei Ye"], "title": "Seed&Steer: Guiding Large Language Models with Compilable Prefix and Branch Signals for Unit Test Generation", "comment": null, "summary": "Unit tests play a vital role in the software development lifecycle. Recent\nadvances in Large Language Model (LLM)-based approaches have significantly\nimproved automated test generation, garnering attention from both academia and\nindustry. We revisit LLM-based unit test generation from a novel perspective by\ndecoupling prefix generation and assertion generation. To characterize their\nrespective challenges, we define Initialization Complexity and adopt Cyclomatic\nComplexity to measure the difficulty of prefix and assertion generation,\nrevealing that the former primarily affects compilation success, while the\nlatter influences test coverage. To address these challenges, we propose\nSeed&Steer, a two-step approach that combines traditional unit testing\ntechniques with the capabilities of large language models. Seed&Steer leverages\nconventional unit testing tools (e.g., EvoSuite) to generate method invocations\nwith high compilation success rates, which serve as seeds to guide LLMs in\nconstructing effective test contexts. It then introduces branching cues to help\nLLMs explore diverse execution paths (e.g., normal, boundary, and exception\ncases) and generate assertions with high coverage. We evaluate Seed&Steer on\nfive real-world Java projects against state-of-the-art baselines. Results show\nthat Seed&Steer improves the compilation pass rate by approximately 7%,\nsuccessfully compiling 792 and 887 previously failing cases on two LLMs. It\nalso achieves up to ~73% branch and line coverage across focal methods of\nvarying complexity, with coverage improvements ranging from 1.09* to 1.26*. Our\ncode, dataset, and experimental scripts will be publicly released to support\nfuture research and reproducibility.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u4e86Seed&Steer\u65b9\u6cd5\uff0c\u901a\u8fc7\u5c06\u524d\u7f00\u751f\u6210\u548c\u65ad\u8a00\u751f\u6210\u89e3\u8026\uff0c\u7ed3\u5408\u4f20\u7edf\u5355\u5143\u6d4b\u8bd5\u5de5\u5177\u548c\u5927\u8bed\u8a00\u6a21\u578b\u6765\u6539\u8fdb\u81ea\u52a8\u5316\u6d4b\u8bd5\u751f\u6210\uff0c\u5728\u7f16\u8bd1\u6210\u529f\u7387\u548c\u6d4b\u8bd5\u8986\u76d6\u7387\u65b9\u9762\u90fd\u53d6\u5f97\u4e86\u663e\u8457\u63d0\u5347\u3002", "motivation": "\u5c3d\u7ba1\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u751f\u6210\u53d6\u5f97\u4e86\u8fdb\u5c55\uff0c\u4f46\u73b0\u6709\u65b9\u6cd5\u5728\u7f16\u8bd1\u6210\u529f\u7387\u548c\u6d4b\u8bd5\u8986\u76d6\u7387\u65b9\u9762\u4ecd\u5b58\u5728\u6311\u6218\u3002\u4f5c\u8005\u4ece\u65b0\u89d2\u5ea6\u91cd\u65b0\u5ba1\u89c6\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c06\u5355\u5143\u6d4b\u8bd5\u751f\u6210\u5206\u89e3\u4e3a\u524d\u7f00\u751f\u6210\u548c\u65ad\u8a00\u751f\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u95ee\u9898\uff0c\u5e76\u53d1\u73b0\u524d\u7f00\u751f\u6210\u4e3b\u8981\u5f71\u54cd\u7f16\u8bd1\u6210\u529f\uff0c\u800c\u65ad\u8a00\u751f\u6210\u5f71\u54cd\u6d4b\u8bd5\u8986\u76d6\u7387\u3002", "method": "\u63d0\u51faSeed&Steer\u4e24\u6b65\u65b9\u6cd5\uff1a1\uff09\u5229\u7528\u4f20\u7edf\u5355\u5143\u6d4b\u8bd5\u5de5\u5177\uff08\u5982EvoSuite\uff09\u751f\u6210\u5177\u6709\u9ad8\u7f16\u8bd1\u6210\u529f\u7387\u7684\u65b9\u6cd5\u8c03\u7528\u4f5c\u4e3a\u79cd\u5b50\uff0c\u6307\u5bfcLLM\u6784\u5efa\u6709\u6548\u7684\u6d4b\u8bd5\u4e0a\u4e0b\u6587\uff1b2\uff09\u5f15\u5165\u5206\u652f\u63d0\u793a\u5e2e\u52a9LLM\u63a2\u7d22\u4e0d\u540c\u7684\u6267\u884c\u8def\u5f84\uff08\u6b63\u5e38\u3001\u8fb9\u754c\u3001\u5f02\u5e38\u60c5\u51b5\uff09\u5e76\u751f\u6210\u9ad8\u8986\u76d6\u7387\u7684\u65ad\u8a00\u3002\u8be5\u65b9\u6cd5\u5b9a\u4e49\u4e86\u521d\u59cb\u5316\u590d\u6742\u5ea6\u5e76\u91c7\u7528\u73af\u590d\u6742\u5ea6\u6765\u8861\u91cf\u524d\u7f00\u548c\u65ad\u8a00\u751f\u6210\u7684\u96be\u5ea6\u3002", "result": "\u5728\u4e94\u4e2a\u771f\u5b9eJava\u9879\u76ee\u4e0a\u7684\u8bc4\u4f30\u663e\u793a\uff1a\u7f16\u8bd1\u901a\u8fc7\u7387\u63d0\u5347\u7ea67%\uff0c\u5728\u4e24\u4e2aLLM\u4e0a\u6210\u529f\u7f16\u8bd1\u4e86792\u548c887\u4e2a\u4e4b\u524d\u5931\u8d25\u7684\u6848\u4f8b\uff1b\u5728\u4e0d\u540c\u590d\u6742\u5ea6\u7684\u76ee\u6807\u65b9\u6cd5\u4e0a\u5b9e\u73b0\u4e86\u9ad8\u8fbe73%\u7684\u5206\u652f\u548c\u884c\u8986\u76d6\u7387\uff1b\u8986\u76d6\u7387\u6539\u8fdb\u8303\u56f4\u4ece1.09\u500d\u52301.26\u500d\u3002", "conclusion": "Seed&Steer\u65b9\u6cd5\u901a\u8fc7\u7ed3\u5408\u4f20\u7edf\u5355\u5143\u6d4b\u8bd5\u6280\u672f\u548c\u5927\u8bed\u8a00\u6a21\u578b\u7684\u4f18\u52bf\uff0c\u6709\u6548\u89e3\u51b3\u4e86LLM-based\u5355\u5143\u6d4b\u8bd5\u751f\u6210\u4e2d\u7684\u7f16\u8bd1\u548c\u8986\u76d6\u7387\u95ee\u9898\u3002\u8be5\u65b9\u6cd5\u5728\u591a\u4e2a\u6307\u6807\u4e0a\u8d85\u8d8a\u4e86\u6700\u5148\u8fdb\u7684\u57fa\u7ebf\u65b9\u6cd5\uff0c\u4e3a\u81ea\u52a8\u5316\u6d4b\u8bd5\u751f\u6210\u9886\u57df\u63d0\u4f9b\u4e86\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.17293", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.17293", "abs": "https://arxiv.org/abs/2507.17293", "authors": ["Saiful Khan", "Joyraj Chakraborty", "Philip Beaucamp", "Niraj Bhujel", "Min Chen"], "title": "Data Virtualization for Machine Learning", "comment": null, "summary": "Nowadays, machine learning (ML) teams have multiple concurrent ML workflows\nfor different applications. Each workflow typically involves many experiments,\niterations, and collaborative activities and commonly takes months and\nsometimes years from initial data wrangling to model deployment.\nOrganizationally, there is a large amount of intermediate data to be stored,\nprocessed, and maintained. \\emph{Data virtualization} becomes a critical\ntechnology in an infrastructure to serve ML workflows. In this paper, we\npresent the design and implementation of a data virtualization service,\nfocusing on its service architecture and service operations. The infrastructure\ncurrently supports six ML applications, each with more than one ML workflow.\nThe data virtualization service allows the number of applications and workflows\nto grow in the coming years.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u6570\u636e\u865a\u62df\u5316\u670d\u52a1\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\uff0c\u7528\u4e8e\u652f\u6301\u673a\u5668\u5b66\u4e60\u56e2\u961f\u7684\u591a\u4e2a\u5e76\u53d1ML\u5de5\u4f5c\u6d41\uff0c\u89e3\u51b3\u4e86\u5927\u91cf\u4e2d\u95f4\u6570\u636e\u5b58\u50a8\u3001\u5904\u7406\u548c\u7ef4\u62a4\u7684\u6311\u6218\u3002", "motivation": "\u73b0\u4ee3\u673a\u5668\u5b66\u4e60\u56e2\u961f\u9700\u8981\u5904\u7406\u591a\u4e2a\u5e76\u53d1\u7684ML\u5de5\u4f5c\u6d41\uff0c\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u6d89\u53ca\u5927\u91cf\u5b9e\u9a8c\u3001\u8fed\u4ee3\u548c\u534f\u4f5c\u6d3b\u52a8\uff0c\u901a\u5e38\u9700\u8981\u6570\u6708\u751a\u81f3\u6570\u5e74\u65f6\u95f4\u3002\u8fd9\u4ea7\u751f\u4e86\u5927\u91cf\u9700\u8981\u5b58\u50a8\u3001\u5904\u7406\u548c\u7ef4\u62a4\u7684\u4e2d\u95f4\u6570\u636e\uff0c\u4f7f\u5f97\u6570\u636e\u865a\u62df\u5316\u6210\u4e3a\u652f\u6301ML\u5de5\u4f5c\u6d41\u57fa\u7840\u8bbe\u65bd\u7684\u5173\u952e\u6280\u672f\u3002", "method": "\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6570\u636e\u865a\u62df\u5316\u670d\u52a1\uff0c\u91cd\u70b9\u5173\u6ce8\u5176\u670d\u52a1\u67b6\u6784\u548c\u670d\u52a1\u64cd\u4f5c\u3002\u8be5\u670d\u52a1\u4e13\u95e8\u4e3a\u652f\u6301\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u6d41\u800c\u8bbe\u8ba1\uff0c\u80fd\u591f\u5904\u7406\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u5de5\u4f5c\u6d41\u7684\u6570\u636e\u9700\u6c42\u3002", "result": "\u8be5\u57fa\u7840\u8bbe\u65bd\u76ee\u524d\u652f\u6301\u516d\u4e2aML\u5e94\u7528\u7a0b\u5e8f\uff0c\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709\u591a\u4e2aML\u5de5\u4f5c\u6d41\u3002\u6570\u636e\u865a\u62df\u5316\u670d\u52a1\u5177\u6709\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\uff0c\u80fd\u591f\u652f\u6301\u672a\u6765\u5e94\u7528\u7a0b\u5e8f\u548c\u5de5\u4f5c\u6d41\u6570\u91cf\u7684\u589e\u957f\u3002", "conclusion": "\u6570\u636e\u865a\u62df\u5316\u670d\u52a1\u6210\u529f\u89e3\u51b3\u4e86ML\u5de5\u4f5c\u6d41\u4e2d\u5927\u91cf\u4e2d\u95f4\u6570\u636e\u7ba1\u7406\u7684\u6311\u6218\uff0c\u4e3a\u591a\u4e2aML\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6709\u6548\u652f\u6301\uff0c\u5e76\u5177\u5907\u4e86\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u4ee5\u9002\u5e94\u672a\u6765\u7684\u589e\u957f\u9700\u6c42\u3002"}}
{"id": "2507.17314", "categories": ["cs.SE", "K.3.2, D.2.m, D.1.7"], "pdf": "https://arxiv.org/pdf/2507.17314", "abs": "https://arxiv.org/abs/2507.17314", "authors": ["Ricardo Hidalgo Arag\u00f3n", "Jes\u00fas M. Gonz\u00e1lez-Barahona", "Gregorio Robles"], "title": "How Do Code Smells Affect Skill Growth in Scratch Novice Programmers?", "comment": "Registered Report accepted at ICSME 2025", "summary": "Context. Code smells, which are recurring anomalies in design or style, have\nbeen extensively researched in professional code. However, their significance\nin block-based projects created by novices is still largely unknown.\nBlock-based environments such as Scratch offer a unique, data-rich setting to\nexamine how emergent design problems intersect with the cultivation of\ncomputational-thinking (CT) skills. Objective. This research explores the\nconnection between CT proficiency and design-level code smells--issues that may\nhinder software maintenance and evolution--in programs created by Scratch\ndevelopers. We seek to identify which CT dimensions align most strongly with\nwhich code smells and whether task context moderates those associations.\nMethod. A random sample of aprox. 2 million public Scratch projects is mined.\nUsing open-source linters, we extract nine CT scores and 40 code smell\nindicators from these projects. After rigorous pre-processing, we apply\ndescriptive analytics, robust correlation tests, stratified cross-validation,\nand exploratory machine-learning models; qualitative spot-checks contextualize\nquantitative patterns. Impact. The study will deliver the first large-scale,\nfine-grained map linking specific CT competencies to concrete design flaws and\nantipatterns. Results are poised to (i) inform evidence-based curricula and\nautomated feedback systems, (ii) provide effect-size benchmarks for future\neducational interventions, and (iii) supply an open, pseudonymized dataset and\nreproducible analysis pipeline for the research community. By clarifying how\nprogramming habits influence early skill acquisition, the work advances both\ncomputing-education theory and practical tooling for sustainable software\nmaintenance and evolution.", "AI": {"tldr": "\u8fd9\u9879\u7814\u7a76\u901a\u8fc7\u5206\u6790\u7ea6200\u4e07\u4e2aScratch\u9879\u76ee\uff0c\u63a2\u7d22\u4e86\u65b0\u624b\u7a0b\u5e8f\u5458\u5728\u5757\u5f0f\u7f16\u7a0b\u73af\u5883\u4e2d\u8ba1\u7b97\u601d\u7ef4\u80fd\u529b\u4e0e\u4ee3\u7801\u5f02\u5473\uff08\u8bbe\u8ba1\u7f3a\u9677\uff09\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u65e8\u5728\u4e3a\u7f16\u7a0b\u6559\u80b2\u63d0\u4f9b\u5faa\u8bc1\u6307\u5bfc\u3002", "motivation": "\u867d\u7136\u4ee3\u7801\u5f02\u5473\u5728\u4e13\u4e1a\u4ee3\u7801\u4e2d\u5df2\u88ab\u5e7f\u6cdb\u7814\u7a76\uff0c\u4f46\u5728\u65b0\u624b\u521b\u5efa\u7684\u5757\u5f0f\u7f16\u7a0b\u9879\u76ee\u4e2d\u7684\u91cd\u8981\u6027\u4ecd\u4e0d\u660e\u786e\u3002\u9700\u8981\u4e86\u89e3\u8ba1\u7b97\u601d\u7ef4\u6280\u80fd\u57f9\u517b\u4e0e\u8bbe\u8ba1\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4ee5\u6539\u8fdb\u7f16\u7a0b\u6559\u80b2\u548c\u81ea\u52a8\u5316\u53cd\u9988\u7cfb\u7edf\u3002", "method": "\u968f\u673a\u62bd\u6837\u7ea6200\u4e07\u4e2a\u516c\u5f00Scratch\u9879\u76ee\uff0c\u4f7f\u7528\u5f00\u6e90\u68c0\u6d4b\u5de5\u5177\u63d0\u53d69\u4e2a\u8ba1\u7b97\u601d\u7ef4\u5206\u6570\u548c40\u4e2a\u4ee3\u7801\u5f02\u5473\u6307\u6807\u3002\u91c7\u7528\u63cf\u8ff0\u6027\u5206\u6790\u3001\u7a33\u5065\u76f8\u5173\u6027\u6d4b\u8bd5\u3001\u5206\u5c42\u4ea4\u53c9\u9a8c\u8bc1\u548c\u63a2\u7d22\u6027\u673a\u5668\u5b66\u4e60\u6a21\u578b\u8fdb\u884c\u5206\u6790\uff0c\u5e76\u901a\u8fc7\u5b9a\u6027\u68c0\u67e5\u6765\u7406\u89e3\u5b9a\u91cf\u6a21\u5f0f\u3002", "result": "\u5c06\u63d0\u4f9b\u9996\u4e2a\u5927\u89c4\u6a21\u3001\u7ec6\u7c92\u5ea6\u7684\u6620\u5c04\uff0c\u8fde\u63a5\u7279\u5b9a\u8ba1\u7b97\u601d\u7ef4\u80fd\u529b\u4e0e\u5177\u4f53\u8bbe\u8ba1\u7f3a\u9677\u548c\u53cd\u6a21\u5f0f\u3002\u4e3a\u7814\u7a76\u793e\u533a\u63d0\u4f9b\u5f00\u653e\u7684\u533f\u540d\u5316\u6570\u636e\u96c6\u548c\u53ef\u91cd\u73b0\u7684\u5206\u6790\u6d41\u7a0b\u3002", "conclusion": "\u901a\u8fc7\u9610\u660e\u7f16\u7a0b\u4e60\u60ef\u5982\u4f55\u5f71\u54cd\u65e9\u671f\u6280\u80fd\u4e60\u5f97\uff0c\u8fd9\u9879\u5de5\u4f5c\u5c06\u63a8\u8fdb\u8ba1\u7b97\u6559\u80b2\u7406\u8bba\u53d1\u5c55\uff0c\u5e76\u4e3a\u53ef\u6301\u7eed\u8f6f\u4ef6\u7ef4\u62a4\u548c\u6f14\u8fdb\u63d0\u4f9b\u5b9e\u7528\u5de5\u5177\u652f\u6301\u3002\u7814\u7a76\u7ed3\u679c\u5c06\u4e3a\u5faa\u8bc1\u8bfe\u7a0b\u8bbe\u8ba1\u3001\u81ea\u52a8\u5316\u53cd\u9988\u7cfb\u7edf\u548c\u672a\u6765\u6559\u80b2\u5e72\u9884\u63d0\u4f9b\u6548\u5e94\u91cf\u57fa\u51c6\u3002"}}
{"id": "2507.17369", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.17369", "abs": "https://arxiv.org/abs/2507.17369", "authors": ["Corentin Latappy", "Thomas Degueule", "Jean-R\u00e9my Falleri", "Romain Robbes", "Lina Ochoa"], "title": "Roseau: Fast, Accurate, Source-based API Breaking Change Analysis in Java", "comment": null, "summary": "Understanding API evolution and the introduction of breaking changes (BCs) in\nsoftware libraries is essential for library maintainers to manage backward\ncompatibility and for researchers to conduct empirical studies on software\nlibrary evolution. In Java, tools such as JApiCmp and Revapi are commonly used\nto detect BCs between library releases, but their reliance on binary JARs\nlimits their applicability. This restriction hinders large-scale longitudinal\nstudies of API evolution and fine-grained analyses such as commit-level BC\ndetection. In this paper, we introduce Roseau, a novel static analysis tool\nthat constructs technology-agnostic API models from library code equipped with\nrich semantic analyses. API models can be analyzed to study API evolution and\ncompared to identify BCs between any two versions of a library (releases,\ncommits, branches, etc.). Unlike traditional approaches, Roseau can build API\nmodels from source code or bytecode, and is optimized for large-scale\nlongitudinal analyses of library histories. We assess the accuracy,\nperformance, and suitability of Roseau for longitudinal studies of API\nevolution, using JApiCmp and Revapi as baselines. We extend and refine an\nestablished benchmark of BCs and show that Roseau achieves higher accuracy (F1\n= 0.99) than JApiCmp (F1 = 0.86) and Revapi (F1 = 0.91). We analyze 60 popular\nlibraries from Maven Central and find that Roseau delivers excellent\nperformance, detecting BCs between versions in under two seconds, including in\nlibraries with hundreds of thousands of lines of code. We further illustrate\nthe limitations of JApiCmp and Revapi for longitudinal studies and the novel\nanalysis capabilities offered by Roseau by tracking the evolution of Google's\nGuava API and the introduction of BCs over 14 years and 6,839 commits, reducing\nanalysis times from a few days to a few minutes.", "AI": {"tldr": "\u672c\u6587\u4ecb\u7ecd\u4e86Roseau\uff0c\u4e00\u4e2a\u7528\u4e8e\u68c0\u6d4bJava\u5e93API\u6f14\u5316\u548c\u7834\u574f\u6027\u53d8\u66f4\u7684\u9759\u6001\u5206\u6790\u5de5\u5177\uff0c\u80fd\u591f\u4ece\u6e90\u4ee3\u7801\u6216\u5b57\u8282\u7801\u6784\u5efaAPI\u6a21\u578b\uff0c\u5728\u51c6\u786e\u6027\u548c\u6027\u80fd\u4e0a\u5747\u4f18\u4e8e\u73b0\u6709\u5de5\u5177JApiCmp\u548cRevapi\u3002", "motivation": "\u73b0\u6709\u7684Java\u7834\u574f\u6027\u53d8\u66f4\u68c0\u6d4b\u5de5\u5177\uff08\u5982JApiCmp\u548cRevapi\uff09\u4f9d\u8d56\u4e8c\u8fdb\u5236JAR\u6587\u4ef6\uff0c\u9650\u5236\u4e86\u5176\u5728\u5927\u89c4\u6a21\u7eb5\u5411\u7814\u7a76\u548c\u7ec6\u7c92\u5ea6\u5206\u6790\uff08\u5982\u63d0\u4ea4\u7ea7\u522b\u7684BC\u68c0\u6d4b\uff09\u4e2d\u7684\u5e94\u7528\u6027\u3002", "method": "\u5f00\u53d1\u4e86Roseau\u9759\u6001\u5206\u6790\u5de5\u5177\uff0c\u80fd\u591f\u4ece\u5e93\u4ee3\u7801\u6784\u5efa\u6280\u672f\u65e0\u5173\u7684API\u6a21\u578b\uff0c\u914d\u5907\u4e30\u5bcc\u7684\u8bed\u4e49\u5206\u6790\uff1b\u53ef\u4ee5\u4ece\u6e90\u4ee3\u7801\u6216\u5b57\u8282\u7801\u6784\u5efaAPI\u6a21\u578b\uff0c\u5e76\u9488\u5bf9\u5e93\u5386\u53f2\u7684\u5927\u89c4\u6a21\u7eb5\u5411\u5206\u6790\u8fdb\u884c\u4e86\u4f18\u5316\u3002", "result": "Roseau\u5728\u51c6\u786e\u6027\u4e0a\u8d85\u8d8a\u4e86\u57fa\u51c6\u5de5\u5177\uff0cF1\u5206\u6570\u8fbe\u52300.99\uff08JApiCmp\u4e3a0.86\uff0cRevapi\u4e3a0.91\uff09\uff1b\u5728\u6027\u80fd\u6d4b\u8bd5\u4e2d\uff0c\u80fd\u57282\u79d2\u5185\u68c0\u6d4b\u6570\u5341\u4e07\u884c\u4ee3\u7801\u5e93\u7684\u7248\u672c\u95f4\u7834\u574f\u6027\u53d8\u66f4\uff1b\u901a\u8fc7\u5206\u6790Google Guava API\u768414\u5e74\u6f14\u5316\u5386\u7a0b\u548c6,839\u6b21\u63d0\u4ea4\uff0c\u5c06\u5206\u6790\u65f6\u95f4\u4ece\u51e0\u5929\u7f29\u77ed\u5230\u51e0\u5206\u949f\u3002", "conclusion": "Roseau\u4e3aAPI\u6f14\u5316\u7814\u7a76\u63d0\u4f9b\u4e86\u66f4\u51c6\u786e\u3001\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u514b\u670d\u4e86\u4f20\u7edf\u5de5\u5177\u5728\u7eb5\u5411\u7814\u7a76\u4e2d\u7684\u5c40\u9650\u6027\uff0c\u4e3a\u5927\u89c4\u6a21API\u6f14\u5316\u5206\u6790\u5f00\u8f9f\u4e86\u65b0\u7684\u53ef\u80fd\u6027\u3002"}}
{"id": "2507.17389", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.17389", "abs": "https://arxiv.org/abs/2507.17389", "authors": ["Tianlin Li", "Yunxiang Wei", "Zhiming Li", "Aishan Liu", "Qing Guo", "Xianglong Liu", "Dongning Sun", "Yang Liu"], "title": "Investigating Training Data Detection in AI Coders", "comment": null, "summary": "Recent advances in code large language models (CodeLLMs) have made them\nindispensable tools in modern software engineering. However, these models\noccasionally produce outputs that contain proprietary or sensitive code\nsnippets, raising concerns about potential non-compliant use of training data,\nand posing risks to privacy and intellectual property. To ensure responsible\nand compliant deployment of CodeLLMs, training data detection (TDD) has become\na critical task. While recent TDD methods have shown promise in natural\nlanguage settings, their effectiveness on code data remains largely\nunderexplored. This gap is particularly important given code's structured\nsyntax and distinct similarity criteria compared to natural language. To\naddress this, we conduct a comprehensive empirical study of seven\nstate-of-the-art TDD methods on source code data, evaluating their performance\nacross eight CodeLLMs. To support this evaluation, we introduce CodeSnitch, a\nfunction-level benchmark dataset comprising 9,000 code samples in three\nprogramming languages, each explicitly labeled as either included or excluded\nfrom CodeLLM training. Beyond evaluation on the original CodeSnitch, we design\ntargeted mutation strategies to test the robustness of TDD methods under three\ndistinct settings. These mutation strategies are grounded in the\nwell-established Type-1 to Type-4 code clone detection taxonomy. Our study\nprovides a systematic assessment of current TDD techniques for code and offers\ninsights to guide the development of more effective and robust detection\nmethods in the future.", "AI": {"tldr": "\u672c\u6587\u9488\u5bf9\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\uff08CodeLLMs\uff09\u4e2d\u7684\u8bad\u7ec3\u6570\u636e\u68c0\u6d4b\uff08TDD\uff09\u95ee\u9898\u8fdb\u884c\u4e86\u5168\u9762\u7684\u5b9e\u8bc1\u7814\u7a76\uff0c\u5f15\u5165\u4e86CodeSnitch\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u5e76\u8bc4\u4f30\u4e86\u4e03\u79cd\u6700\u5148\u8fdb\u7684TDD\u65b9\u6cd5\u5728\u516b\u4e2aCodeLLMs\u4e0a\u7684\u6027\u80fd\u8868\u73b0\u3002", "motivation": "\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u6709\u65f6\u4f1a\u8f93\u51fa\u5305\u542b\u4e13\u6709\u6216\u654f\u611f\u4ee3\u7801\u7247\u6bb5\u7684\u5185\u5bb9\uff0c\u8fd9\u5f15\u53d1\u4e86\u5bf9\u8bad\u7ec3\u6570\u636e\u975e\u5408\u89c4\u4f7f\u7528\u7684\u62c5\u5fe7\uff0c\u5e76\u5e26\u6765\u9690\u79c1\u548c\u77e5\u8bc6\u4ea7\u6743\u98ce\u9669\u3002\u867d\u7136\u73b0\u6709\u7684TDD\u65b9\u6cd5\u5728\u81ea\u7136\u8bed\u8a00\u73af\u5883\u4e2d\u8868\u73b0\u826f\u597d\uff0c\u4f46\u5b83\u4eec\u5728\u4ee3\u7801\u6570\u636e\u4e0a\u7684\u6709\u6548\u6027\u4ecd\u672a\u5f97\u5230\u5145\u5206\u63a2\u7d22\uff0c\u7279\u522b\u662f\u8003\u8651\u5230\u4ee3\u7801\u5177\u6709\u7ed3\u6784\u5316\u8bed\u6cd5\u548c\u4e0e\u81ea\u7136\u8bed\u8a00\u4e0d\u540c\u7684\u76f8\u4f3c\u6027\u6807\u51c6\u3002", "method": "\u7814\u7a76\u8005\u5bf9\u4e03\u79cd\u6700\u5148\u8fdb\u7684TDD\u65b9\u6cd5\u5728\u6e90\u4ee3\u7801\u6570\u636e\u4e0a\u8fdb\u884c\u4e86\u5168\u9762\u7684\u5b9e\u8bc1\u7814\u7a76\uff0c\u8bc4\u4f30\u4e86\u5b83\u4eec\u5728\u516b\u4e2aCodeLLMs\u4e0a\u7684\u6027\u80fd\u3002\u5f15\u5165\u4e86CodeSnitch\u51fd\u6570\u7ea7\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u5305\u542b9,000\u4e2a\u4ee3\u7801\u6837\u672c\uff08\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\uff09\uff0c\u6bcf\u4e2a\u6837\u672c\u90fd\u660e\u786e\u6807\u8bb0\u4e3a\u5305\u542b\u6216\u6392\u9664\u5728CodeLLM\u8bad\u7ec3\u4e2d\u3002\u8bbe\u8ba1\u4e86\u57fa\u4e8eType-1\u5230Type-4\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u5206\u7c7b\u6cd5\u7684\u76ee\u6807\u7a81\u53d8\u7b56\u7565\uff0c\u5728\u4e09\u79cd\u4e0d\u540c\u8bbe\u7f6e\u4e0b\u6d4b\u8bd5TDD\u65b9\u6cd5\u7684\u9c81\u68d2\u6027\u3002", "result": "\u7814\u7a76\u63d0\u4f9b\u4e86\u5f53\u524d\u4ee3\u7801TDD\u6280\u672f\u7684\u7cfb\u7edf\u6027\u8bc4\u4f30\uff0c\u901a\u8fc7CodeSnitch\u57fa\u51c6\u6570\u636e\u96c6\u548c\u7a81\u53d8\u7b56\u7565\u6d4b\u8bd5\uff0c\u63ed\u793a\u4e86\u4e0d\u540cTDD\u65b9\u6cd5\u5728\u4ee3\u7801\u6570\u636e\u4e0a\u7684\u6027\u80fd\u8868\u73b0\u548c\u9c81\u68d2\u6027\u5dee\u5f02\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u4ee3\u7801\u9886\u57df\u7684\u8bad\u7ec3\u6570\u636e\u68c0\u6d4b\u63d0\u4f9b\u4e86\u7cfb\u7edf\u6027\u7684\u8bc4\u4f30\u6846\u67b6\uff0c\u5e76\u4e3a\u672a\u6765\u5f00\u53d1\u66f4\u6709\u6548\u548c\u9c81\u68d2\u7684\u68c0\u6d4b\u65b9\u6cd5\u63d0\u4f9b\u4e86\u6307\u5bfc\u6027\u89c1\u89e3\u3002CodeSnitch\u57fa\u51c6\u6570\u636e\u96c6\u7684\u5f15\u5165\u4e3a\u8be5\u9886\u57df\u7684\u8fdb\u4e00\u6b65\u7814\u7a76\u5960\u5b9a\u4e86\u57fa\u7840\u3002"}}
{"id": "2507.17542", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.17542", "abs": "https://arxiv.org/abs/2507.17542", "authors": ["Lara Khatib", "Noble Saji Mathews", "Meiyappan Nagappan"], "title": "AssertFlip: Reproducing Bugs via Inversion of LLM-Generated Passing Tests", "comment": null, "summary": "Bug reproduction is critical in the software debugging and repair process,\nyet the majority of bugs in open-source and industrial settings lack executable\ntests to reproduce them at the time they are reported, making diagnosis and\nresolution more difficult and time-consuming. To address this challenge, we\nintroduce AssertFlip, a novel technique for automatically generating Bug\nReproducible Tests (BRTs) using large language models (LLMs). Unlike existing\nmethods that attempt direct generation of failing tests, AssertFlip first\ngenerates passing tests on the buggy behaviour and then inverts these tests to\nfail when the bug is present. We hypothesize that LLMs are better at writing\npassing tests than ones that crash or fail on purpose. Our results show that\nAssertFlip outperforms all known techniques in the leaderboard of SWT-Bench, a\nbenchmark curated for BRTs. Specifically, AssertFlip achieves a fail-to-pass\nsuccess rate of 43.6% on the SWT-Bench-Verified subset.", "AI": {"tldr": "AssertFlip\u662f\u4e00\u79cd\u5229\u7528\u5927\u8bed\u8a00\u6a21\u578b\u81ea\u52a8\u751f\u6210Bug\u53ef\u590d\u73b0\u6d4b\u8bd5\u7684\u65b0\u6280\u672f\uff0c\u901a\u8fc7\u5148\u751f\u6210\u901a\u8fc7\u6d4b\u8bd5\u518d\u53cd\u8f6c\u7684\u65b9\u5f0f\uff0c\u5728SWT-Bench\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8fbe\u523043.6%\u7684\u6210\u529f\u7387\uff0c\u8d85\u8d8a\u4e86\u73b0\u6709\u6240\u6709\u65b9\u6cd5\u3002", "motivation": "\u5f00\u6e90\u548c\u5de5\u4e1a\u73af\u5883\u4e2d\u5927\u591a\u6570bug\u5728\u62a5\u544a\u65f6\u7f3a\u4e4f\u53ef\u6267\u884c\u7684\u590d\u73b0\u6d4b\u8bd5\uff0c\u8fd9\u4f7f\u5f97\u8bca\u65ad\u548c\u4fee\u590d\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u548c\u8017\u65f6\u3002\u73b0\u6709\u65b9\u6cd5\u76f4\u63a5\u751f\u6210\u5931\u8d25\u6d4b\u8bd5\u7684\u6548\u679c\u4e0d\u4f73\uff0c\u9700\u8981\u66f4\u597d\u7684\u81ea\u52a8\u5316bug\u590d\u73b0\u6d4b\u8bd5\u751f\u6210\u65b9\u6cd5\u3002", "method": "AssertFlip\u91c7\u7528\u4e0e\u73b0\u6709\u65b9\u6cd5\u4e0d\u540c\u7684\u7b56\u7565\uff1a\u9996\u5148\u5728\u6709bug\u7684\u4ee3\u7801\u4e0a\u751f\u6210\u80fd\u591f\u901a\u8fc7\u7684\u6d4b\u8bd5\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6d4b\u8bd5\u53cd\u8f6c\uff0c\u4f7f\u5176\u5728\u5b58\u5728bug\u65f6\u5931\u8d25\u3002\u8be5\u65b9\u6cd5\u57fa\u4e8e\u5047\u8bbe\uff1a\u5927\u8bed\u8a00\u6a21\u578b\u66f4\u64c5\u957f\u7f16\u5199\u901a\u8fc7\u7684\u6d4b\u8bd5\uff0c\u800c\u4e0d\u662f\u6545\u610f\u5d29\u6e83\u6216\u5931\u8d25\u7684\u6d4b\u8bd5\u3002", "result": "AssertFlip\u5728SWT-Bench\u57fa\u51c6\u6d4b\u8bd5\u7684\u6392\u884c\u699c\u4e0a\u8d85\u8d8a\u4e86\u6240\u6709\u5df2\u77e5\u6280\u672f\uff0c\u5728SWT-Bench-Verified\u5b50\u96c6\u4e0a\u5b9e\u73b0\u4e8643.6%\u7684\u5931\u8d25\u5230\u901a\u8fc7\u6210\u529f\u7387\u3002", "conclusion": "\u901a\u8fc7\u53cd\u8f6c\u6d4b\u8bd5\u751f\u6210\u7b56\u7565\uff0cAssertFlip\u8bc1\u660e\u4e86\u5927\u8bed\u8a00\u6a21\u578b\u5728\u81ea\u52a8\u751f\u6210Bug\u53ef\u590d\u73b0\u6d4b\u8bd5\u65b9\u9762\u7684\u6709\u6548\u6027\uff0c\u4e3a\u8f6f\u4ef6\u8c03\u8bd5\u548c\u4fee\u590d\u8fc7\u7a0b\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.17548", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.17548", "abs": "https://arxiv.org/abs/2507.17548", "authors": ["Lingxiao Tang", "He Ye", "Zhongxin Liu", "Xiaoxue Ren", "Lingfeng Bao"], "title": "CodeReasoner: Enhancing the Code Reasoning Ability with Reinforcement Learning", "comment": null, "summary": "Code reasoning is a fundamental capability for large language models (LLMs)\nin the code domain. It involves understanding and predicting a program's\nexecution behavior, such as determining the output for a given input or whether\na specific statement will be executed. This capability is essential for\ndownstream tasks like debugging, code generation, and program repair. Prior\napproaches mainly rely on supervised fine-tuning to improve performance in code\nreasoning tasks. However, they often show limited gains and fail to generalize\nacross diverse scenarios. We argue this is due to two core issues: the low\nquality of training data and the limitations of supervised fine-tuning, which\nstruggles to teach general reasoning skills. To address these challenges, we\npropose CodeReasoner, a framework that spans both dataset construction and a\ntwo-stage training process. First, we introduce a method to construct datasets\nthat focus on the core execution logic of Python programs. Next, we apply\ninstruction tuning to inject execution-specific knowledge distilled from a\npowerful teacher model. We then enhance reasoning and generalization through\nGRPO reinforcement learning on top of the fine-tuned model. Experiments on\nthree widely-used code reasoning benchmarks show that CodeReasoner improves\nperformance by 27.1% to 40.2% over prior methods using a 7B model. Notably, the\n7B model matches GPT-4o on key tasks like input/output and coverage prediction.\nWhen scaled to 14B, CodeReasoner outperforms GPT-4o across all benchmarks.\nAblation studies confirm the effectiveness of each training stage and highlight\nthe importance of reasoning chains.", "AI": {"tldr": "\u63d0\u51fa\u4e86CodeReasoner\u6846\u67b6\uff0c\u901a\u8fc7\u6784\u5efa\u9ad8\u8d28\u91cf\u6570\u636e\u96c6\u548c\u4e24\u9636\u6bb5\u8bad\u7ec3\uff08\u6307\u4ee4\u5fae\u8c03+\u5f3a\u5316\u5b66\u4e60\uff09\u6765\u63d0\u5347\u5927\u8bed\u8a00\u6a21\u578b\u7684\u4ee3\u7801\u63a8\u7406\u80fd\u529b\uff0c\u5728\u4ee3\u7801\u63a8\u7406\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u76f8\u6bd4\u73b0\u6709\u65b9\u6cd5\u63d0\u534727.1%-40.2%\u3002", "motivation": "\u73b0\u6709\u7684\u4ee3\u7801\u63a8\u7406\u65b9\u6cd5\u4e3b\u8981\u4f9d\u8d56\u76d1\u7763\u5fae\u8c03\uff0c\u4f46\u5b58\u5728\u8bad\u7ec3\u6570\u636e\u8d28\u91cf\u4f4e\u548c\u76d1\u7763\u5fae\u8c03\u96be\u4ee5\u6559\u6388\u901a\u7528\u63a8\u7406\u6280\u80fd\u7684\u95ee\u9898\uff0c\u5bfc\u81f4\u6027\u80fd\u63d0\u5347\u6709\u9650\u4e14\u6cdb\u5316\u80fd\u529b\u5dee\u3002", "method": "\u63d0\u51faCodeReasoner\u6846\u67b6\uff0c\u5305\u542b\uff1a1\uff09\u6784\u5efa\u4e13\u6ce8\u4e8ePython\u7a0b\u5e8f\u6838\u5fc3\u6267\u884c\u903b\u8f91\u7684\u6570\u636e\u96c6\uff1b2\uff09\u4e24\u9636\u6bb5\u8bad\u7ec3\u8fc7\u7a0b\uff1a\u5148\u901a\u8fc7\u6307\u4ee4\u5fae\u8c03\u6ce8\u5165\u4ece\u5f3a\u6559\u5e08\u6a21\u578b\u84b8\u998f\u7684\u6267\u884c\u7279\u5b9a\u77e5\u8bc6\uff0c\u518d\u901a\u8fc7GRPO\u5f3a\u5316\u5b66\u4e60\u589e\u5f3a\u63a8\u7406\u548c\u6cdb\u5316\u80fd\u529b\u3002", "result": "\u5728\u4e09\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u4ee3\u7801\u63a8\u7406\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c7B\u6a21\u578b\u76f8\u6bd4\u73b0\u6709\u65b9\u6cd5\u63d0\u534727.1%-40.2%\uff0c\u5728\u8f93\u5165/\u8f93\u51fa\u548c\u8986\u76d6\u7387\u9884\u6d4b\u7b49\u5173\u952e\u4efb\u52a1\u4e0a\u4e0eGPT-4o\u6027\u80fd\u76f8\u5f53\uff1b14B\u6a21\u578b\u5728\u6240\u6709\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u90fd\u8d85\u8d8a\u4e86GPT-4o\u3002", "conclusion": "CodeReasoner\u901a\u8fc7\u9ad8\u8d28\u91cf\u6570\u636e\u96c6\u6784\u5efa\u548c\u4e24\u9636\u6bb5\u8bad\u7ec3\u6709\u6548\u63d0\u5347\u4e86\u5927\u8bed\u8a00\u6a21\u578b\u7684\u4ee3\u7801\u63a8\u7406\u80fd\u529b\uff0c\u6d88\u878d\u7814\u7a76\u8bc1\u5b9e\u4e86\u5404\u8bad\u7ec3\u9636\u6bb5\u7684\u6709\u6548\u6027\u548c\u63a8\u7406\u94fe\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2507.17690", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.17690", "abs": "https://arxiv.org/abs/2507.17690", "authors": ["Bo Xiong", "Linghao Zhang", "Chong Wang", "Peng Liang"], "title": "Contextual Code Retrieval for Commit Message Generation: A Preliminary Study", "comment": "The 19th ACM/IEEE International Symposium on Empirical Software\n  Engineering and Measurement (ESEM)", "summary": "A commit message describes the main code changes in a commit and plays a\ncrucial role in software maintenance. Existing commit message generation (CMG)\napproaches typically frame it as a direct mapping which inputs a code diff and\nproduces a brief descriptive sentence as output. However, we argue that relying\nsolely on the code diff is insufficient, as raw code diff fails to capture the\nfull context needed for generating high-quality and informative commit\nmessages. In this paper, we propose a contextual code retrieval-based method\ncalled C3Gen to enhance CMG by retrieving commit-relevant code snippets from\nthe repository and incorporating them into the model input to provide richer\ncontextual information at the repository scope. In the experiments, we\nevaluated the effectiveness of C3Gen across various models using four objective\nand three subjective metrics. Meanwhile, we design and conduct a human\nevaluation to investigate how C3Gen-generated commit messages are perceived by\nhuman developers. The results show that by incorporating contextual code into\nthe input, C3Gen enables models to effectively leverage additional information\nto generate more comprehensive and informative commit messages with greater\npractical value in real-world development scenarios. Further analysis\nunderscores concerns about the reliability of similaritybased metrics and\nprovides empirical insights for CMG.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86C3Gen\u65b9\u6cd5\uff0c\u901a\u8fc7\u68c0\u7d22\u4ee3\u7801\u5e93\u4e2d\u76f8\u5173\u4ee3\u7801\u7247\u6bb5\u6765\u589e\u5f3a\u63d0\u4ea4\u6d88\u606f\u751f\u6210\uff0c\u89e3\u51b3\u4e86\u4ec5\u4f9d\u8d56\u4ee3\u7801\u5dee\u5f02\u65e0\u6cd5\u6355\u83b7\u5b8c\u6574\u4e0a\u4e0b\u6587\u7684\u95ee\u9898\uff0c\u751f\u6210\u66f4\u5168\u9762\u3001\u66f4\u6709\u5b9e\u7528\u4ef7\u503c\u7684\u63d0\u4ea4\u6d88\u606f\u3002", "motivation": "\u73b0\u6709\u7684\u63d0\u4ea4\u6d88\u606f\u751f\u6210\u65b9\u6cd5\u4ec5\u4f9d\u8d56\u4ee3\u7801\u5dee\u5f02\u8fdb\u884c\u76f4\u63a5\u6620\u5c04\uff0c\u4f46\u539f\u59cb\u4ee3\u7801\u5dee\u5f02\u65e0\u6cd5\u6355\u83b7\u751f\u6210\u9ad8\u8d28\u91cf\u3001\u4fe1\u606f\u4e30\u5bcc\u7684\u63d0\u4ea4\u6d88\u606f\u6240\u9700\u7684\u5b8c\u6574\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002", "method": "\u63d0\u51fa\u4e86\u57fa\u4e8e\u4e0a\u4e0b\u6587\u4ee3\u7801\u68c0\u7d22\u7684C3Gen\u65b9\u6cd5\uff0c\u901a\u8fc7\u4ece\u4ee3\u7801\u5e93\u4e2d\u68c0\u7d22\u4e0e\u63d0\u4ea4\u76f8\u5173\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u5c06\u5176\u6574\u5408\u5230\u6a21\u578b\u8f93\u5165\u4e2d\uff0c\u5728\u4ee3\u7801\u5e93\u8303\u56f4\u5185\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0c\u901a\u8fc7\u5c06\u4e0a\u4e0b\u6587\u4ee3\u7801\u7eb3\u5165\u8f93\u5165\uff0cC3Gen\u80fd\u591f\u4f7f\u6a21\u578b\u6709\u6548\u5229\u7528\u989d\u5916\u4fe1\u606f\uff0c\u751f\u6210\u66f4\u5168\u9762\u3001\u66f4\u6709\u4fe1\u606f\u91cf\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u573a\u666f\u4e2d\u5177\u6709\u66f4\u5927\u7684\u5b9e\u7528\u4ef7\u503c\u3002\u4eba\u5de5\u8bc4\u4f30\u4e5f\u9a8c\u8bc1\u4e86\u5f00\u53d1\u8005\u5bf9C3Gen\u751f\u6210\u6d88\u606f\u7684\u79ef\u6781\u611f\u77e5\u3002", "conclusion": "C3Gen\u65b9\u6cd5\u901a\u8fc7\u5f15\u5165\u4e0a\u4e0b\u6587\u4ee3\u7801\u68c0\u7d22\u663e\u8457\u6539\u5584\u4e86\u63d0\u4ea4\u6d88\u606f\u751f\u6210\u8d28\u91cf\uff0c\u8fdb\u4e00\u6b65\u5206\u6790\u5f3a\u8c03\u4e86\u57fa\u4e8e\u76f8\u4f3c\u5ea6\u6307\u6807\u53ef\u9760\u6027\u7684\u62c5\u5fe7\uff0c\u5e76\u4e3a\u63d0\u4ea4\u6d88\u606f\u751f\u6210\u9886\u57df\u63d0\u4f9b\u4e86\u7ecf\u9a8c\u89c1\u89e3\u3002"}}
{"id": "2507.17691", "categories": ["cs.SE", "cs.AI", "cs.CR", "cs.LG", "cs.PL"], "pdf": "https://arxiv.org/pdf/2507.17691", "abs": "https://arxiv.org/abs/2507.17691", "authors": ["Shan Jiang", "Pranoy Kovuri", "David Tao", "Zhixun Tan"], "title": "CASCADE: LLM-Powered JavaScript Deobfuscator at Google", "comment": null, "summary": "Software obfuscation, particularly prevalent in JavaScript, hinders code\ncomprehension and analysis, posing significant challenges to software testing,\nstatic analysis, and malware detection. This paper introduces CASCADE, a novel\nhybrid approach that integrates the advanced coding capabilities of Gemini with\nthe deterministic transformation capabilities of a compiler Intermediate\nRepresentation (IR), specifically JavaScript IR (JSIR). By employing Gemini to\nidentify critical prelude functions, the foundational components underlying the\nmost prevalent obfuscation techniques, and leveraging JSIR for subsequent code\ntransformations, CASCADE effectively recovers semantic elements like original\nstrings and API names, and reveals original program behaviors. This method\novercomes limitations of existing static and dynamic deobfuscation techniques,\neliminating hundreds to thousands of hardcoded rules while achieving\nreliability and flexibility. CASCADE is already deployed in Google's production\nenvironment, demonstrating substantial improvements in JavaScript deobfuscation\nefficiency and reducing reverse engineering efforts.", "AI": {"tldr": "\u672c\u6587\u63d0\u51faCASCADE\uff0c\u4e00\u79cd\u7ed3\u5408Gemini\u5927\u6a21\u578b\u548cJavaScript\u4e2d\u95f4\u8868\u793a(JSIR)\u7684\u6df7\u5408JavaScript\u53cd\u6df7\u6dc6\u65b9\u6cd5\uff0c\u901a\u8fc7\u8bc6\u522b\u5173\u952e\u5e8f\u8a00\u51fd\u6570\u5e76\u8fdb\u884c\u4ee3\u7801\u8f6c\u6362\uff0c\u6709\u6548\u6062\u590d\u539f\u59cb\u4ee3\u7801\u8bed\u4e49\uff0c\u5df2\u5728Google\u751f\u4ea7\u73af\u5883\u4e2d\u90e8\u7f72\u5e76\u663e\u8457\u63d0\u5347\u53cd\u6df7\u6dc6\u6548\u7387\u3002", "motivation": "JavaScript\u4ee3\u7801\u6df7\u6dc6\u4e25\u91cd\u963b\u788d\u4e86\u4ee3\u7801\u7406\u89e3\u548c\u5206\u6790\uff0c\u5bf9\u8f6f\u4ef6\u6d4b\u8bd5\u3001\u9759\u6001\u5206\u6790\u548c\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u9020\u6210\u91cd\u5927\u6311\u6218\u3002\u73b0\u6709\u7684\u9759\u6001\u548c\u52a8\u6001\u53cd\u6df7\u6dc6\u6280\u672f\u5b58\u5728\u5c40\u9650\u6027\uff0c\u9700\u8981\u5927\u91cf\u786c\u7f16\u7801\u89c4\u5219\uff0c\u7f3a\u4e4f\u53ef\u9760\u6027\u548c\u7075\u6d3b\u6027\u3002", "method": "\u63d0\u51faCASCADE\u6df7\u5408\u65b9\u6cd5\uff0c\u7ed3\u5408Gemini\u5927\u6a21\u578b\u7684\u5148\u8fdb\u7f16\u7801\u80fd\u529b\u548cJavaScript\u4e2d\u95f4\u8868\u793a(JSIR)\u7684\u786e\u5b9a\u6027\u8f6c\u6362\u80fd\u529b\u3002\u4f7f\u7528Gemini\u8bc6\u522b\u5173\u952e\u5e8f\u8a00\u51fd\u6570\uff08\u4e3b\u6d41\u6df7\u6dc6\u6280\u672f\u7684\u57fa\u7840\u7ec4\u4ef6\uff09\uff0c\u7136\u540e\u5229\u7528JSIR\u8fdb\u884c\u540e\u7eed\u4ee3\u7801\u8f6c\u6362\uff0c\u6062\u590d\u539f\u59cb\u5b57\u7b26\u4e32\u3001API\u540d\u79f0\u7b49\u8bed\u4e49\u5143\u7d20\u3002", "result": "CASCADE\u6709\u6548\u514b\u670d\u4e86\u73b0\u6709\u9759\u6001\u548c\u52a8\u6001\u53cd\u6df7\u6dc6\u6280\u672f\u7684\u5c40\u9650\u6027\uff0c\u6d88\u9664\u4e86\u6570\u767e\u5230\u6570\u5343\u6761\u786c\u7f16\u7801\u89c4\u5219\uff0c\u5b9e\u73b0\u4e86\u53ef\u9760\u6027\u548c\u7075\u6d3b\u6027\u7684\u5e73\u8861\u3002\u65b9\u6cd5\u5df2\u5728Google\u751f\u4ea7\u73af\u5883\u4e2d\u90e8\u7f72\uff0c\u5728JavaScript\u53cd\u6df7\u6dc6\u6548\u7387\u65b9\u9762\u53d6\u5f97\u663e\u8457\u6539\u8fdb\uff0c\u5927\u5e45\u51cf\u5c11\u4e86\u9006\u5411\u5de5\u7a0b\u5de5\u4f5c\u91cf\u3002", "conclusion": "CASCADE\u6210\u529f\u5c06\u5927\u6a21\u578b\u80fd\u529b\u4e0e\u7f16\u8bd1\u5668\u4e2d\u95f4\u8868\u793a\u6280\u672f\u76f8\u7ed3\u5408\uff0c\u4e3aJavaScript\u53cd\u6df7\u6dc6\u63d0\u4f9b\u4e86\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8be5\u65b9\u6cd5\u4e0d\u4ec5\u63d0\u9ad8\u4e86\u53cd\u6df7\u6dc6\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\uff0c\u8fd8\u5177\u6709\u826f\u597d\u7684\u5b9e\u7528\u6027\uff0c\u5df2\u5728\u5b9e\u9645\u751f\u4ea7\u73af\u5883\u4e2d\u9a8c\u8bc1\u4e86\u5176\u6709\u6548\u6027\uff0c\u4e3a\u4ee3\u7801\u5206\u6790\u548c\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u9886\u57df\u5e26\u6765\u4e86\u91cd\u8981\u8fdb\u5c55\u3002"}}
{"id": "2507.17743", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.17743", "abs": "https://arxiv.org/abs/2507.17743", "authors": ["Andre Menolli", "Bruno Strik"], "title": "Educational Insights from Code: Mapping Learning Challenges in Object-Oriented Programming through Code-Based Evidence", "comment": null, "summary": "Object-Oriented programming is frequently challenging for undergraduate\nComputer Science students, particularly in understanding abstract concepts such\nas encapsulation, inheritance, and polymorphism. Although the literature\noutlines various methods to identify potential design and coding issues in\nobject-oriented programming through source code analysis, such as code smells\nand SOLID principles, few studies explore how these code-level issues relate to\nlearning difficulties in Object-Oriented Programming. In this study, we explore\nthe relationship of the code issue indicators with common challenges\nencountered during the learning of object-oriented programming. Using\nqualitative analysis, we identified the main categories of learning\ndifficulties and, through a literature review, established connections between\nthese difficulties, code smells, and violations of the SOLID principles. As a\nresult, we developed a conceptual map that links code-related issues to\nspecific learning challenges in Object-Oriented Programming. The model was then\nevaluated by an expert who applied it in the analysis of the student code to\nassess its relevance and applicability in educational contexts.", "AI": {"tldr": "\u672c\u7814\u7a76\u63a2\u7d22\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u4ee3\u7801\u95ee\u9898\u6307\u6807\u4e0e\u5b66\u4e60\u56f0\u96be\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u901a\u8fc7\u5b9a\u6027\u5206\u6790\u548c\u6587\u732e\u7efc\u8ff0\uff0c\u5f00\u53d1\u4e86\u4e00\u4e2a\u5c06\u4ee3\u7801\u95ee\u9898\u4e0e\u5b66\u4e60\u6311\u6218\u76f8\u5173\u8054\u7684\u6982\u5ff5\u5730\u56fe\uff0c\u5e76\u901a\u8fc7\u4e13\u5bb6\u8bc4\u4f30\u9a8c\u8bc1\u4e86\u5176\u5728\u6559\u80b2\u73af\u5883\u4e2d\u7684\u9002\u7528\u6027\u3002", "motivation": "\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u672c\u79d1\u751f\u6765\u8bf4\u5177\u6709\u6311\u6218\u6027\uff0c\u7279\u522b\u662f\u5728\u7406\u89e3\u5c01\u88c5\u3001\u7ee7\u627f\u548c\u591a\u6001\u7b49\u62bd\u8c61\u6982\u5ff5\u65b9\u9762\u3002\u867d\u7136\u6587\u732e\u4e2d\u6982\u8ff0\u4e86\u901a\u8fc7\u6e90\u4ee3\u7801\u5206\u6790\u8bc6\u522b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u6f5c\u5728\u8bbe\u8ba1\u548c\u7f16\u7801\u95ee\u9898\u7684\u5404\u79cd\u65b9\u6cd5\uff08\u5982\u4ee3\u7801\u5f02\u5473\u548cSOLID\u539f\u5219\uff09\uff0c\u4f46\u5f88\u5c11\u6709\u7814\u7a76\u63a2\u7d22\u8fd9\u4e9b\u4ee3\u7801\u7ea7\u522b\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u5b66\u4e60\u56f0\u96be\u76f8\u5173\u8054\u3002", "method": "\u4f7f\u7528\u5b9a\u6027\u5206\u6790\u65b9\u6cd5\u8bc6\u522b\u5b66\u4e60\u56f0\u96be\u7684\u4e3b\u8981\u7c7b\u522b\uff0c\u901a\u8fc7\u6587\u732e\u7efc\u8ff0\u5efa\u7acb\u5b66\u4e60\u56f0\u96be\u3001\u4ee3\u7801\u5f02\u5473\u548cSOLID\u539f\u5219\u8fdd\u53cd\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u5f00\u53d1\u4e86\u4e00\u4e2a\u5c06\u4ee3\u7801\u76f8\u5173\u95ee\u9898\u4e0e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7279\u5b9a\u5b66\u4e60\u6311\u6218\u76f8\u94fe\u63a5\u7684\u6982\u5ff5\u5730\u56fe\u3002", "result": "\u6210\u529f\u5f00\u53d1\u4e86\u4e00\u4e2a\u6982\u5ff5\u5730\u56fe\uff0c\u8be5\u5730\u56fe\u5c06\u4ee3\u7801\u76f8\u5173\u95ee\u9898\u4e0e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7684\u7279\u5b9a\u5b66\u4e60\u6311\u6218\u76f8\u5173\u8054\u3002\u6a21\u578b\u7ecf\u8fc7\u4e13\u5bb6\u8bc4\u4f30\uff0c\u4e13\u5bb6\u5c06\u5176\u5e94\u7528\u4e8e\u5b66\u751f\u4ee3\u7801\u5206\u6790\u4e2d\u4ee5\u8bc4\u4f30\u5176\u76f8\u5173\u6027\u548c\u9002\u7528\u6027\u3002", "conclusion": "\u7814\u7a76\u5efa\u7acb\u4e86\u4ee3\u7801\u95ee\u9898\u6307\u6807\u4e0e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5b66\u4e60\u56f0\u96be\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5f00\u53d1\u7684\u6982\u5ff5\u5730\u56fe\u5728\u6559\u80b2\u73af\u5883\u4e2d\u5177\u6709\u76f8\u5173\u6027\u548c\u9002\u7528\u6027\uff0c\u4e3a\u7406\u89e3\u548c\u89e3\u51b3\u5b66\u751f\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5b66\u4e60\u4e2d\u9047\u5230\u7684\u56f0\u96be\u63d0\u4f9b\u4e86\u65b0\u7684\u89c6\u89d2\u3002"}}
