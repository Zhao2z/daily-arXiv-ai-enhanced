{"id": "2507.06343", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.06343", "abs": "https://arxiv.org/abs/2507.06343", "authors": ["Huynh Khanh Vi Tran", "Nauman bin Ali", "Michael Unterkalmsteiner", "Jürgen Börstler", "Panagiota Chatzipetrou"], "title": "Quality attributes of test cases and test suites -- importance & challenges from practitioners' perspectives", "comment": null, "summary": "Context: The quality of the test suites and the constituent test cases\nsignificantly impacts confidence in software testing. While research has\nidentified several quality attributes of test cases and test suites, there is a\nneed for a better understanding of their relative importance in practice.\nObjective: We investigate practitioners' perceptions regarding the relative\nimportance of quality attributes of test cases and test suites and the\nchallenges they face in ensuring the perceived important quality attributes.\nMethod: We conducted an industrial survey using a questionnaire based on the\nquality attributes identified in an extensive literature review. We used a\nsampling strategy that leverages LinkedIn to draw a large and heterogeneous\nsample of professionals with experience in software testing. Results: We\ncollected 354 responses from practitioners with a wide range of experience. We\nfound that the majority of practitioners rated Fault Detection, Usability,\nMaintainability, Reliability, and Coverage to be the most important quality\nattributes. Resource Efficiency, Reusability, and Simplicity received the most\ndivergent opinions, which, according to our analysis, depend on the\nsoftware-testing contexts. We identified common challenges that apply to the\nimportant attributes, namely inadequate definition, lack of useful metrics,\nlack of an established review process, and lack of external support.\nConclusion: The findings point out where practitioners actually need further\nsupport with respect to achieving high-quality test cases and test suites under\ndifferent software testing contexts. The findings can serve as a guideline for\nacademic researchers when looking for research directions on the topic. The\nfindings can also be used to encourage companies to provide more support to\npractitioners to achieve high-quality test cases and test suites."}
{"id": "2507.06354", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.06354", "abs": "https://arxiv.org/abs/2507.06354", "authors": ["Huynh Khanh Vi Tran", "Nauman bin Ali", "Michael Unterkalmsteiner", "Jürgen Börstler"], "title": "A proposal and assessment of an improved heuristic for the Eager Test smell detection", "comment": null, "summary": "Context: The evidence for the prevalence of test smells at the unit testing\nlevel has relied on the accuracy of detection tools, which have seen intense\nresearch in the last two decades. The Eager Test smell, one of the most\nprevalent, is often identified using simplified detection rules that\npractitioners find inadequate. Objective: We aim to improve the rules for\ndetecting the Eager Test smell. Method: We reviewed the literature on test\nsmells to analyze the definitions and detection rules of the Eager Test smell.\nWe proposed a novel, unambiguous definition of the test smell and a heuristic\nto address the limitations of the existing rules. We evaluated our heuristic\nagainst existing detection rules by manually applying it to 300 unit test cases\nin Java. Results: Our review identified 56 relevant studies. We found that\ninadequate interpretations of original definitions of the Eager Test smell led\nto imprecise detection rules, resulting in a high level of disagreement in\ndetection outcomes. Also, our heuristic detected patterns of eager and\nnon-eager tests that existing rules missed. Conclusion: Our heuristic captures\nthe essence of the Eager Test smell more precisely; hence, it may address\npractitioners' concerns regarding the adequacy of existing detection rules."}
{"id": "2507.06463", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.06463", "abs": "https://arxiv.org/abs/2507.06463", "authors": ["Atieh Barati Nia", "Mohammad Dindoost", "David A. Bader"], "title": "Evaluating Efficiency and Novelty of LLM-Generated Code for Graph Analysis", "comment": null, "summary": "Large Language Models (LLMs) are increasingly used to automate software\ndevelopment, yet most prior evaluations focus on functional correctness or\nhigh-level languages such as Python. We present the first systematic study of\nLLMs' ability to generate efficient C implementations of graph-analysis\nroutines--code that must satisfy the stringent runtime and memory constraints.\nEight state-of-the-art models (OpenAI ChatGPT o3 and o4-mini-high, Anthropic\nClaude 4 Sonnet and Sonnet Extended, Google Gemini 2.5 Flash and Pro, xAI Grok\n3-Think, and DeepSeek DeepThink R1) are benchmarked by two distinct approaches.\nThe first approach checks the ability of LLMs in generating an algorithm\noutperforming other present algorithms in the benchmark. The second approach\nevaluates the ability of LLMs to generate graph algorithms for integration into\nthe benchmark. Results show that Claude Sonnet 4 Extended achieves the best\nresult in the case of ready-to-use code generation and efficiency,\noutperforming human-written baselines in triangle counting. The study confirms\nthat contemporary LLMs excel at optimizing and integrating established\nalgorithms but not inventing novel techniques. We provide prompts, the first\napproach's generated code, and measurement scripts to foster reproducible\nresearch."}
{"id": "2507.06704", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.06704", "abs": "https://arxiv.org/abs/2507.06704", "authors": ["Lloyd Montgomery"], "title": "Issue Tracking Ecosystems: Context and Best Practices", "comment": "300 pages, Dissertation for the doctoral degree Dr. rer. nat. at the\n  Faculty of Mathematics, Informatics, and Natural Sciences, Department of\n  Informatics, University of Hamburg, Hamburg, Germany", "summary": "Issue Tracking Systems (ITSs), such as GitHub and Jira, are popular tools\nthat support Software Engineering (SE) organisations through the management of\n``issues'', which represent different SE artefacts such as requirements,\ndevelopment tasks, and maintenance items. ITSs also support internal linking\nbetween issues, and external linking to other tools and information sources.\nThis provides SE organisations key forms of documentation, including forwards\nand backwards traceability (e.g., Feature Requests linked to sprint releases\nand code commits linked to Bug Reports). An Issue Tracking Ecosystem (ITE) is\nthe aggregate of the central ITS and the related SE artefacts, stakeholders,\nand processes -- with an emphasis on how these contextual factors interact with\nthe ITS. The quality of ITEs is central to the success of these organisations\nand their software products. There are challenges, however, within ITEs,\nincluding complex networks of interlinked artefacts and diverse workflows.\nWhile ITSs have been the subject of study in SE research for decades, ITEs as a\nwhole need further exploration.\n  In this thesis, I undertake the challenge of understanding ITEs at a broader\nlevel, addressing these questions regarding complexity and diversity. I\ninterviewed practitioners and performed archival analysis on a diverse set of\nITSs. These analyses revealed the context-dependent nature of ITE problems,\nhighlighting the need for context-specific ITE research. While previous work\nhas produced many solutions to specific ITS problems, these solutions are not\nconsistently framed in a context-rich and comparable way, leading to a desire\nfor more aligned solutions across research and practice. To address this\nemergent information and lack of alignment, I created the Best Practice\nOntology for ITEs. <... truncated due to arXiv abstract character limit ...>"}
{"id": "2507.06762", "categories": ["cs.SE", "K.6.3"], "pdf": "https://arxiv.org/pdf/2507.06762", "abs": "https://arxiv.org/abs/2507.06762", "authors": ["Nathalia Barbosa", "Paulo Borba", "Léuson Da Silva"], "title": "Leveraging LLMs for Semantic Conflict Detection via Unit Test Generation", "comment": "Comments: 11 pages, in Portuguese language. 3 figures. Submitted to\n  SAST 2025 (X Simp\\'osio Brasileiro de Teste de Software Sistem\\'atico e\n  Automatizado)", "summary": "Semantic conflicts arise when a developer introduces changes to a codebase\nthat unintentionally affect the behavior of changes integrated in parallel by\nother developers. Traditional merge tools are unable to detect such conflicts,\nso complementary tools like SMAT have been proposed. SMAT relies on generating\nand executing unit tests: if a test fails on the base version, passes on a\ndeveloper's modified version, but fails again after merging with another\ndeveloper's changes, a semantic conflict is indicated. While SMAT is effective\nat detecting conflicts, it suffers from a high rate of false negatives, partly\ndue to the limitations of unit test generation tools such as Randoop and\nEvosuite. To investigate whether large language models (LLMs) can overcome\nthese limitations, we propose and integrate a new test generation tool based on\nCode Llama 70B into SMAT. We explore the model's ability to generate tests\nusing different interaction strategies, prompt contents, and parameter\nconfigurations. Our evaluation uses two samples: a benchmark with simpler\nsystems from related work, and a more significant sample based on complex,\nreal-world systems. We assess the effectiveness of the new SMAT extension in\ndetecting conflicts. Results indicate that, although LLM-based test generation\nremains challenging and computationally expensive in complex scenarios, there\nis promising potential for improving semantic conflict detection.\n  --\n  Conflitos sem^anticos surgem quando um desenvolvedor introduz mudan\\c{c}as em\numa base de c\\'odigo que afetam, de forma n~ao intencional, o comportamento de\naltera\\c{c}~oes integradas em paralelo por outros desenvolvedores. Ferramentas\ntradicionais de merge n~ao conseguem detectar esse tipo de conflito, por isso\nferramentas complementares como o SMAT foram propostas. O SMAT depende da\ngera\\c{c}~ao e execu\\c{c}~ao de testes de unidade: se um teste falha na vers~ao\nbase, passa na vers~ao modificada por um desenvolvedor, mas volta a falhar\nap\\'os o merge com as mudan\\c{c}as de outro desenvolvedor, um conflito\nsem^antico \\'e identificado. Embora o SMAT seja eficaz na detec\\c{c}~ao de\nconflitos, apresenta alta taxa de falsos negativos, em parte devido \\`as\nlimita\\c{c}~oes das ferramentas de gera\\c{c}~ao de testes como Randoop e\nEvosuite. Para investigar se modelos de linguagem de grande porte (LLMs) podem\nsuperar essas limita\\c{c}~oes, propomos e integramos ao SMAT uma nova\nferramenta de gera\\c{c}~ao de testes baseada no Code Llama 70B. Exploramos a\ncapacidade do modelo de gerar testes utilizando diferentes estrat\\'egias de\nintera\\c{c}~ao, conte\\'udos de prompts e configura\\c{c}~oes de par^ametros.\nNossa avalia\\c{c}~ao utiliza duas amostras: um benchmark com sistemas mais\nsimples, usados em trabalhos relacionados, e uma amostra mais significativa\nbaseada em sistemas complexos e reais. Avaliamos a efic\\'acia da nova extens~ao\ndo SMAT na detec\\c{c}~ao de conflitos. Os resultados indicam que, embora a\ngera\\c{c}~ao de testes por LLM em cen\\'arios complexos ainda seja desafiadora e\ncustosa computacionalmente, h\\'a potencial promissor para aprimorar a\ndetec\\c{c}~ao de conflitos sem^anticos."}
{"id": "2507.06881", "categories": ["cs.SE", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2507.06881", "abs": "https://arxiv.org/abs/2507.06881", "authors": ["Brian R Larson", "Ehsan Ahmad"], "title": "Formalization of the AADL Run-Time Services with Time", "comment": "35 pages, 13 figures", "summary": "The Architecture Analysis & Design Language (AADL) is an architecture\ndescription language for design of cyber-physical systems--machines controlled\nby software. The AADL standard, SAE International AS5506D, describes Run-Time\nServices (RTS) to be provided to execute AADL models in accordance with\nsemantics defined by the standard. The RTS of primary concern are transport\nservices and timing services. Although, the study presented in [1] sets a\nfoundation for the formal semantics of AADL, but without modeling time. This\npaper extends and simplifies this formalization using a modal logic defined by\na Kripke structure, to explicitly include time. The RTS defined in the AADL\nstandard are also expanded to support reactive state-transition machines of the\nBehavior Specification annex standard language (BA) and its closely-related,\nformally-defined counterpart, the Behavior Language for Embedded Systems with\nSoftware (BLESS). An example of AADL RTS with time, implemented by the High\nAssurance Modeling and Rapid Engineering for Embedded Systems (HAMR) for\nstate-transition machine behavior written in BLESS, is also presented."}
{"id": "2507.06980", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.06980", "abs": "https://arxiv.org/abs/2507.06980", "authors": ["Binquan Zhang", "Li Zhang", "Zhiwen Luo", "Yuxin Du", "Fang Liu", "Song Wang", "Lin Shi"], "title": "Are They All Good? Evaluating the Quality of CoTs in LLM-based Code Generation", "comment": null, "summary": "Large language models (LLMs) have demonstrated impressive performance in code\ngeneration, particularly when augmented with chain-of-thought (CoT) prompting\ntechniques. They break down requirements into intermediate reasoning steps,\nwhich act as design rationales to guide LLMs in writing code like human\nprogrammers. Thus, the quality of these steps is crucial for ensuring the\ncorrectness and reliability of the generated code. However, little is known\nabout the quality of CoT generated by LLMs. To what extent can we trust the\nthoughts generated by LLMs? How good are they? This paper empirically explores\nthe external and internal factors of why LLMs generate unsatisfactory CoTs by\nanalyzing 1,023 failed code samples on two widely used code generation\nbenchmarks. We also evaluate their impact on code generation performance by\nanalyzing 210 CoT-code pairs and refining the unsatisfied CoTs by prompting\nLLMs. Our study reveals three key findings: (1) External factors (53.60%), such\nas unclear requirements and lack of context, mainly affect CoT quality, while\ninternal factors (40.10%) stem from LLMs' misunderstanding prompts. (2) Even\nwhen CoTs are correct, 18.5% of the generated code contains errors due to\ninstruction-following issues; conversely, 11.90% of correct code is paired with\nflawed CoTs. (3) Refining low-quality CoTs is feasible, i.e., LLMs improve when\ngiven detailed problem descriptions. These findings highlight key challenges in\nCoT-based code generation and suggest directions for improving LLM reasoning\nand reliability."}
{"id": "2507.07026", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.07026", "abs": "https://arxiv.org/abs/2507.07026", "authors": ["Sadia Afrin Mim", "Fatema Tuz Zohra", "Justin Smith", "Brittany Johnson"], "title": "Exploring Fairness Interventions in Open Source Projects", "comment": "Revised version accepted at the 1st International Workshop on\n  Fairness in Software Systems(SANER 2025)", "summary": "The deployment of biased machine learning (ML) models has resulted in adverse\neffects in crucial sectors such as criminal justice and healthcare. To address\nthese challenges, a diverse range of machine learning fairness interventions\nhave been developed, aiming to mitigate bias and promote the creation of more\nequitable models. Despite the growing availability of these interventions,\ntheir adoption in real-world applications remains limited, with many\npractitioners unaware of their existence. To address this gap, we\nsystematically identified and compiled a dataset of 62 open source fairness\ninterventions and identified active ones. We conducted an in-depth analysis of\ntheir specifications and features to uncover considerations that may drive\npractitioner preference and to identify the software interventions actively\nmaintained in the open source ecosystem. Our findings indicate that 32% of\nthese interventions have been actively maintained within the past year, and 50%\nof them offer both bias detection and mitigation capabilities, mostly during\ninprocessing."}
{"id": "2507.07045", "categories": ["cs.SE", "cs.SI", "68T05", "I.2.7; I.2.6"], "pdf": "https://arxiv.org/pdf/2507.07045", "abs": "https://arxiv.org/abs/2507.07045", "authors": ["Ugur Ari"], "title": "5C Prompt Contracts: A Minimalist, Creative-Friendly, Token-Efficient Design Framework for Individual and SME LLM Usage", "comment": "5 pages, 5 tables. Includes comparative experimental results across\n  OpenAI, Anthropic, DeepSeek, and Gemini LLMs", "summary": "The progression from traditional prompt engineering to a more rigorous\ndiscipline of prompt design marks a pivotal shift in human-LLM interaction. As\nLarge Language Models (LLMs) become increasingly embedded in mission-critical\napplications, there emerges a pressing need for frameworks that are not only\nexplicit and systematic but also minimal enough to remain practical and broadly\naccessible. While many existing approaches address prompt structuring through\nelaborate Domain-Specific Languages (DSLs) or multi-layered templates, such\nmethods can impose significant token and cognitive overhead, potentially\nconstraining the model's creative capacity. In this context, we propose the 5C\nPrompt Contract, a framework that distills prompt design into five intuitive\ncomponents: Character, Cause, Constraint, Contingency, and Calibration. This\nminimal cognitive schema explicitly integrates fallback and output optimization\ndirectives, fostering reliable, interpretable, and creatively flexible AI\ninteractions. Experimental results demonstrate that the 5C framework\nconsistently achieves superior input token efficiency while maintaining rich\nand consistent outputs across diverse LLM architectures (OpenAI, Anthropic,\nDeepSeek, and Gemini), making it particularly suited for individuals and\nSmall-to-Medium Enterprises (SMEs) with limited AI engineering resources."}
