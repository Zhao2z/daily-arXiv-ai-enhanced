{"id": "2507.14256", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.14256", "abs": "https://arxiv.org/abs/2507.14256", "authors": ["Jakub Walczak", "Piotr Tomalak", "Artur Laskowski"], "title": "Impact of Code Context and Prompting Strategies on Automated Unit Test Generation with Modern General-Purpose Large Language Models", "comment": null, "summary": "Generative AI is gaining increasing attention in software engineering, where\ntesting remains an indispensable reliability mechanism. According to the widely\nadopted testing pyramid, unit tests constitute the majority of test cases and\nare often schematic, requiring minimal domain expertise. Automatically\ngenerating such tests under the supervision of software engineers can\nsignificantly enhance productivity during the development phase of the software\nlifecycle.\n  This paper investigates the impact of code context and prompting strategies\non the quality and adequacy of unit tests generated by various large language\nmodels (LLMs) across several families. The results show that including\ndocstrings notably improves code adequacy, while further extending context to\nthe full implementation yields definitely smaller gains. Notably, the\nchain-of-thought prompting strategy -- applied even to 'reasoning' models --\nachieves the best results, with up to 96.3\\% branch coverage, a 57\\% average\nmutation score, and near-perfect compilation success rate. Among the evaluated\nmodels, M5 (Gemini 2.5 Pro) demonstrated superior performance in both mutation\nscore and branch coverage being still in top in terms of compilation success\nrate.\n  All the code and resulting test suites are publicly available at\nhttps://github.com/peetery/LLM-analysis.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u4ee3\u7801\u4e0a\u4e0b\u6587\u548c\u63d0\u793a\u7b56\u7565\u5bf9\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u751f\u6210\u5355\u5143\u6d4b\u8bd5\u8d28\u91cf\u548c\u5145\u5206\u6027\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u5305\u542b\u6587\u6863\u5b57\u7b26\u4e32\u663e\u8457\u63d0\u5347\u4ee3\u7801\u5145\u5206\u6027\uff0c\u800c\u94fe\u5f0f\u601d\u7ef4\u63d0\u793a\u7b56\u7565\u6548\u679c\u6700\u4f73\u3002", "motivation": "\u63a2\u7d22\u5982\u4f55\u5229\u7528\u751f\u6210\u5f0fAI\u81ea\u52a8\u751f\u6210\u5355\u5143\u6d4b\u8bd5\uff0c\u4ee5\u63d0\u9ad8\u8f6f\u4ef6\u5f00\u53d1\u9636\u6bb5\u7684\u6548\u7387\u3002", "method": "\u8bc4\u4f30\u4e0d\u540cLLM\u5728\u4ee3\u7801\u4e0a\u4e0b\u6587\u548c\u63d0\u793a\u7b56\u7565\u4e0b\u7684\u8868\u73b0\uff0c\u91cd\u70b9\u5173\u6ce8\u6587\u6863\u5b57\u7b26\u4e32\u548c\u94fe\u5f0f\u601d\u7ef4\u63d0\u793a\u3002", "result": "\u94fe\u5f0f\u601d\u7ef4\u63d0\u793a\u7b56\u7565\u8868\u73b0\u6700\u4f73\uff0c\u8fbe\u523096.3%\u5206\u652f\u8986\u76d6\u7387\u548c57%\u5e73\u5747\u53d8\u5f02\u5206\u6570\uff0cM5\uff08Gemini 2.5 Pro\uff09\u6a21\u578b\u8868\u73b0\u6700\u4f18\u3002", "conclusion": "\u4ee3\u7801\u4e0a\u4e0b\u6587\u548c\u63d0\u793a\u7b56\u7565\u5bf9\u751f\u6210\u5355\u5143\u6d4b\u8bd5\u7684\u8d28\u91cf\u6709\u663e\u8457\u5f71\u54cd\uff0c\u94fe\u5f0f\u601d\u7ef4\u63d0\u793a\u548c\u6587\u6863\u5b57\u7b26\u4e32\u662f\u5173\u952e\u56e0\u7d20\u3002"}}
{"id": "2507.14330", "categories": ["cs.SE", "D.2.1; D.2.4; D.2.10; F.4.1; F.4.3"], "pdf": "https://arxiv.org/pdf/2507.14330", "abs": "https://arxiv.org/abs/2507.14330", "authors": ["Arshad Beg", "Diarmuid O'Donoghue", "Rosemary Monahan"], "title": "Leveraging LLMs for Formal Software Requirements -- Challenges and Prospects", "comment": "Submitted to Overlay2025 - 7th International Workshop on Artificial\n  Intelligence and fOrmal VERification, Logic, Automata, and sYnthesis. [under\n  review]", "summary": "Software correctness is ensured mathematically through formal verification,\nwhich involves the resources of generating formal requirement specifications\nand having an implementation that must be verified. Tools such as\nmodel-checkers and theorem provers ensure software correctness by verifying the\nimplementation against the specification. Formal methods deployment is\nregularly enforced in the development of safety-critical systems e.g.\naerospace, medical devices and autonomous systems. Generating these\nspecifications from informal and ambiguous natural language requirements\nremains the key challenge. Our project, VERIFAI^{1}, aims to investigate\nautomated and semi-automated approaches to bridge this gap, using techniques\nfrom Natural Language Processing (NLP), ontology-based domain modelling,\nartefact reuse, and large language models (LLMs). This position paper presents\na preliminary synthesis of relevant literature to identify recurring challenges\nand prospective research directions in the generation of verifiable\nspecifications from informal requirements.", "AI": {"tldr": "VERIFAI\u9879\u76ee\u65e8\u5728\u901a\u8fc7NLP\u3001\u672c\u4f53\u5efa\u6a21\u548cLLM\u7b49\u6280\u672f\uff0c\u81ea\u52a8\u5316\u6216\u534a\u81ea\u52a8\u5316\u5730\u4ece\u975e\u6b63\u5f0f\u9700\u6c42\u751f\u6210\u53ef\u9a8c\u8bc1\u7684\u89c4\u8303\uff0c\u89e3\u51b3\u5f62\u5f0f\u5316\u9a8c\u8bc1\u4e2d\u7684\u5173\u952e\u6311\u6218\u3002", "motivation": "\u5f62\u5f0f\u5316\u9a8c\u8bc1\u5728\u5b89\u5168\u5173\u952e\u7cfb\u7edf\u5f00\u53d1\u4e2d\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u4ece\u975e\u6b63\u5f0f\u9700\u6c42\u751f\u6210\u5f62\u5f0f\u5316\u89c4\u8303\u4ecd\u662f\u4e00\u4e2a\u4e3b\u8981\u6311\u6218\u3002", "method": "\u7ed3\u5408NLP\u3001\u672c\u4f53\u5efa\u6a21\u3001\u6784\u4ef6\u91cd\u7528\u548cLLM\u7b49\u6280\u672f\uff0c\u63a2\u7d22\u81ea\u52a8\u5316\u6216\u534a\u81ea\u52a8\u5316\u7684\u89e3\u51b3\u65b9\u6848\u3002", "result": "\u521d\u6b65\u6587\u732e\u7efc\u8ff0\u63ed\u793a\u4e86\u751f\u6210\u53ef\u9a8c\u8bc1\u89c4\u8303\u4e2d\u7684\u5e38\u89c1\u6311\u6218\u548c\u6f5c\u5728\u7814\u7a76\u65b9\u5411\u3002", "conclusion": "VERIFAI\u9879\u76ee\u4e3a\u586b\u8865\u975e\u6b63\u5f0f\u9700\u6c42\u4e0e\u5f62\u5f0f\u5316\u89c4\u8303\u4e4b\u95f4\u7684\u9e3f\u6c9f\u63d0\u4f9b\u4e86\u524d\u77bb\u6027\u7814\u7a76\u6846\u67b6\u3002"}}
{"id": "2507.14396", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14396", "abs": "https://arxiv.org/abs/2507.14396", "authors": ["Carey Lai Zheng Hui", "Johnson Britto Jessia Esther Leena", "Kumuthini Subramanian", "Zhao Chenyu", "Shubham Rajeshkumar Jariwala"], "title": "Developing Shared Vocabulary System For Collaborative Software Engineering", "comment": "16 pages, including appendix", "summary": "Effective communication is a critical factor in successful software\nengineering collaboration. However, communication gaps remain a persistent\nchallenge, often leading to misunderstandings, inefficiencies, and defects.\nThis research investigates the technical factors contributing to such\nmisunderstandings and explores the measurable benefits of establishing shared\nvocabulary systems within software documentation and codebases. Using a Design\nScience Research (DSR) framework, the study was structured into three iterative\nphases: problem identification, method development, and empirical validation.\nThe problem identification phase involved thematic analysis of communication\ndata and semi-structured interviews, revealing key factors such as ambiguous\nmessaging, misalignment in documentation, inconsistent code review feedback,\nand API integration miscommunication. Grounded Theory principles were employed\nto design a structured methodology for collaborative vocabulary development.\nEmpirical validation through controlled experiments demonstrated that while\ninitial adoption introduced overhead, the shared vocabulary system\nsignificantly improved information density, documentation clarity, and\ncollaboration efficiency over time. Findings offer actionable insights for\nimproving communication practices in software engineering, while also\nidentifying limitations and directions for future research.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4e86\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u6c9f\u901a\u969c\u788d\u7684\u6280\u672f\u56e0\u7d20\uff0c\u5e76\u63d0\u51fa\u901a\u8fc7\u5171\u4eab\u8bcd\u6c47\u7cfb\u7edf\u6539\u5584\u6587\u6863\u548c\u4ee3\u7801\u5e93\u7684\u6c9f\u901a\u6548\u679c\u3002\u91c7\u7528\u8bbe\u8ba1\u79d1\u5b66\u7814\u7a76\u6846\u67b6\uff0c\u901a\u8fc7\u95ee\u9898\u8bc6\u522b\u3001\u65b9\u6cd5\u5f00\u53d1\u548c\u5b9e\u8bc1\u9a8c\u8bc1\u4e09\u9636\u6bb5\uff0c\u53d1\u73b0\u5171\u4eab\u8bcd\u6c47\u7cfb\u7edf\u663e\u8457\u63d0\u5347\u4e86\u4fe1\u606f\u5bc6\u5ea6\u3001\u6587\u6863\u6e05\u6670\u5ea6\u548c\u534f\u4f5c\u6548\u7387\u3002", "motivation": "\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u6c9f\u901a\u969c\u788d\u5e38\u5bfc\u81f4\u8bef\u89e3\u3001\u4f4e\u6548\u548c\u7f3a\u9677\uff0c\u7814\u7a76\u65e8\u5728\u63a2\u7d22\u6280\u672f\u56e0\u7d20\u5e76\u63d0\u51fa\u6539\u8fdb\u65b9\u6cd5\u3002", "method": "\u91c7\u7528\u8bbe\u8ba1\u79d1\u5b66\u7814\u7a76\u6846\u67b6\uff0c\u5206\u4e09\u9636\u6bb5\uff1a\u95ee\u9898\u8bc6\u522b\uff08\u4e3b\u9898\u5206\u6790\u548c\u534a\u7ed3\u6784\u5316\u8bbf\u8c08\uff09\u3001\u65b9\u6cd5\u5f00\u53d1\uff08\u57fa\u4e8e\u624e\u6839\u7406\u8bba\u8bbe\u8ba1\u8bcd\u6c47\u7cfb\u7edf\uff09\u3001\u5b9e\u8bc1\u9a8c\u8bc1\uff08\u63a7\u5236\u5b9e\u9a8c\uff09\u3002", "result": "\u5171\u4eab\u8bcd\u6c47\u7cfb\u7edf\u867d\u521d\u671f\u589e\u52a0\u5f00\u9500\uff0c\u4f46\u663e\u8457\u63d0\u5347\u4e86\u4fe1\u606f\u5bc6\u5ea6\u3001\u6587\u6863\u6e05\u6670\u5ea6\u548c\u534f\u4f5c\u6548\u7387\u3002", "conclusion": "\u7814\u7a76\u4e3a\u6539\u5584\u8f6f\u4ef6\u5de5\u7a0b\u6c9f\u901a\u5b9e\u8df5\u63d0\u4f9b\u4e86\u53ef\u884c\u89c1\u89e3\uff0c\u5e76\u6307\u51fa\u4e86\u672a\u6765\u7814\u7a76\u65b9\u5411\u3002"}}
{"id": "2507.14423", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14423", "abs": "https://arxiv.org/abs/2507.14423", "authors": ["Mootez Saad", "Hao Li", "Tushar Sharma", "Ahmed E. Hassan"], "title": "On the Effect of Token Merging on Pre-trained Models for Code", "comment": null, "summary": "Tokenization is a fundamental component of language models for code. It\ninvolves breaking down the input into units that are later passed to the\nlanguage model stack to learn high-dimensional representations used in various\ncontexts, from classification to generation. However, the output of these\ntokenizers is often longer than that traditionally used in compilers and\ninterpreters. This could result in undesirable effects, such as increased\ncomputational overhead. In this work, we investigate the effect of merging the\nhidden representations of subtokens that belong to the same semantic unit, such\nas subtokens that form a single identifier. We propose two strategies: one\nbased on averaging the representations and another that leverages a\nlearning-based approach. Both methods can be seamlessly integrated with\nexisting language models for code. We conduct experiments using six language\nmodels for code: CodeBERT, GraphCodeBERT, UniXCoder, CdoeT5, CodeT5+ (220M),\nand CodeT5+ (770M), across three software engineering tasks: vulnerability\ndetection, code classification, and code translation. Results show that these\nstrategies can reduce the number of floating-point operations by $1\\%$ to\n$19\\%$. Regarding downstream performance, the most significant degradation was\nobserved in the vulnerability detection task, where the F1 score decreased by\n$1.82$ points compared to the baseline. In contrast, for code translation, we\nobserved an improvement of $2.47$ points in CodeBLEU. This work contributes to\nthe broader effort of improving language models for code across multiple\ndimensions, including both computational efficiency and downstream performance.", "AI": {"tldr": "\u7814\u7a76\u4e86\u5408\u5e76\u5c5e\u4e8e\u540c\u4e00\u8bed\u4e49\u5355\u5143\u7684\u9690\u85cf\u8868\u793a\u5bf9\u4ee3\u7801\u8bed\u8a00\u6a21\u578b\u7684\u5f71\u54cd\uff0c\u63d0\u51fa\u4e86\u4e24\u79cd\u7b56\u7565\u5e76\u9a8c\u8bc1\u4e86\u5176\u5728\u8ba1\u7b97\u6548\u7387\u548c\u4e0b\u6e38\u4efb\u52a1\u4e2d\u7684\u6548\u679c\u3002", "motivation": "\u4f20\u7edf\u4ee3\u7801\u8bed\u8a00\u6a21\u578b\u7684\u6807\u8bb0\u5316\u8f93\u51fa\u8f83\u957f\uff0c\u53ef\u80fd\u5bfc\u81f4\u8ba1\u7b97\u5f00\u9500\u589e\u52a0\uff0c\u56e0\u6b64\u63a2\u7d22\u5408\u5e76\u8bed\u4e49\u5355\u5143\u9690\u85cf\u8868\u793a\u7684\u65b9\u6cd5\u3002", "method": "\u63d0\u51fa\u4e24\u79cd\u7b56\u7565\uff1a\u57fa\u4e8e\u5e73\u5747\u8868\u793a\u548c\u5b66\u4e60\u7684\u65b9\u6cd5\uff0c\u5e76\u5728\u516d\u4e2a\u4ee3\u7801\u8bed\u8a00\u6a21\u578b\u548c\u4e09\u4e2a\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\u4e2d\u5b9e\u9a8c\u3002", "result": "\u8ba1\u7b97\u64cd\u4f5c\u51cf\u5c111%\u81f319%\uff0c\u4e0b\u6e38\u4efb\u52a1\u4e2d\u6f0f\u6d1e\u68c0\u6d4bF1\u4e0b\u964d1.82\u5206\uff0c\u4ee3\u7801\u7ffb\u8bd1CodeBLEU\u63d0\u53472.47\u5206\u3002", "conclusion": "\u5408\u5e76\u9690\u85cf\u8868\u793a\u53ef\u63d0\u5347\u8ba1\u7b97\u6548\u7387\uff0c\u4f46\u5bf9\u4e0d\u540c\u4efb\u52a1\u6548\u679c\u4e0d\u4e00\uff0c\u4e3a\u4ee3\u7801\u8bed\u8a00\u6a21\u578b\u4f18\u5316\u63d0\u4f9b\u4e86\u65b0\u65b9\u5411\u3002"}}
{"id": "2507.14547", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14547", "abs": "https://arxiv.org/abs/2507.14547", "authors": ["Noman Ahmad", "Ruoyu Su", "Matteo Esposito", "Andrea Janes", "Valentina Lenarduzzi", "Davide Taibi"], "title": "Architectural Degradation: Definition, Motivations, Measurement and Remediation Approaches", "comment": null, "summary": "Architectural degradation, also known as erosion, decay, or aging, impacts\nsystem quality, maintainability, and adaptability. Although widely\nacknowledged, current literature shows fragmented definitions, metrics, and\nremediation strategies. Our study aims to unify understanding of architectural\ndegradation by identifying its definitions, causes, metrics, tools, and\nremediation approaches across academic and gray literature. We conducted a\nmultivocal literature review of 108 studies extracting definitions, causes,\nmetrics, measurement approaches, tools, and remediation strategies. We\ndeveloped a taxonomy encompassing architectural, code, and process debt to\nexplore definition evolution, methodological trends, and research gaps.\nArchitectural degradation has shifted from a low-level issue to a\nsocio-technical concern. Definitions now address code violations, design drift,\nand structural decay. Causes fall under architectural (e.g., poor\ndocumentation), code (e.g., hasty fixes), and process debt (e.g., knowledge\nloss). We identified 54 metrics and 31 measurement techniques, focused on\nsmells, cohesion/coupling, and evolution. Yet, most tools detect issues but\nrarely support ongoing or preventive remediation. Degradation is both technical\nand organizational. While detection is well-studied, continuous remediation\nremains lacking. Our study reveals missed integration between metrics, tools,\nand repair logic, urging holistic, proactive strategies for sustainable\narchitecture.", "AI": {"tldr": "\u8be5\u7814\u7a76\u901a\u8fc7\u591a\u58f0\u90e8\u6587\u732e\u7efc\u8ff0\uff0c\u7edf\u4e00\u4e86\u67b6\u6784\u9000\u5316\u7684\u5b9a\u4e49\u3001\u539f\u56e0\u3001\u6307\u6807\u548c\u4fee\u590d\u7b56\u7565\uff0c\u63ed\u793a\u4e86\u5176\u4ece\u6280\u672f\u95ee\u9898\u5230\u793e\u4f1a\u6280\u672f\u95ee\u9898\u7684\u8f6c\u53d8\uff0c\u5e76\u6307\u51fa\u5f53\u524d\u5de5\u5177\u5728\u6301\u7eed\u4fee\u590d\u65b9\u9762\u7684\u4e0d\u8db3\u3002", "motivation": "\u67b6\u6784\u9000\u5316\u5f71\u54cd\u7cfb\u7edf\u8d28\u91cf\u548c\u53ef\u7ef4\u62a4\u6027\uff0c\u4f46\u73b0\u6709\u6587\u732e\u5b9a\u4e49\u548c\u4fee\u590d\u7b56\u7565\u5206\u6563\uff0c\u7814\u7a76\u65e8\u5728\u7edf\u4e00\u7406\u89e3\u5e76\u586b\u8865\u7814\u7a76\u7a7a\u767d\u3002", "method": "\u5bf9108\u9879\u7814\u7a76\u8fdb\u884c\u591a\u58f0\u90e8\u6587\u732e\u7efc\u8ff0\uff0c\u63d0\u53d6\u5b9a\u4e49\u3001\u539f\u56e0\u3001\u6307\u6807\u3001\u6d4b\u91cf\u65b9\u6cd5\u3001\u5de5\u5177\u548c\u4fee\u590d\u7b56\u7565\uff0c\u5e76\u5f00\u53d1\u5206\u7c7b\u6cd5\u3002", "result": "\u67b6\u6784\u9000\u5316\u4ece\u4f4e\u5c42\u95ee\u9898\u8f6c\u4e3a\u793e\u4f1a\u6280\u672f\u95ee\u9898\uff0c\u5b9a\u4e49\u6db5\u76d6\u4ee3\u7801\u8fdd\u89c4\u3001\u8bbe\u8ba1\u6f02\u79fb\u548c\u7ed3\u6784\u8870\u9000\u3002\u8bc6\u522b\u4e8654\u79cd\u6307\u6807\u548c31\u79cd\u6d4b\u91cf\u6280\u672f\uff0c\u4f46\u5de5\u5177\u591a\u7528\u4e8e\u68c0\u6d4b\u800c\u975e\u6301\u7eed\u4fee\u590d\u3002", "conclusion": "\u7814\u7a76\u547c\u5401\u6574\u5408\u6307\u6807\u3001\u5de5\u5177\u548c\u4fee\u590d\u903b\u8f91\uff0c\u63a8\u52a8\u53ef\u6301\u7eed\u67b6\u6784\u7684\u6574\u4f53\u4e3b\u52a8\u7b56\u7565\u3002"}}
{"id": "2507.14554", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14554", "abs": "https://arxiv.org/abs/2507.14554", "authors": ["Ruoyu Su", "Noman ahmad", "Matteo Esposito", "Andrea Janes", "Davide Taibi", "Valentina Lenarduzzi"], "title": "Emerging Trends in Software Architecture from the Practitioners Perspective: A Five Year Review", "comment": null, "summary": "Software architecture plays a central role in the design, development, and\nmaintenance of software systems. With the rise of cloud computing,\nmicroservices, and containers, architectural practices have diversified.\nUnderstanding these shifts is vital. This study analyzes software architecture\ntrends across eight leading industry conferences over five years. We\ninvestigate the evolution of software architecture by analyzing talks from top\npractitioner conferences, focusing on the motivations and contexts driving\ntechnology adoption. We analyzed 5,677 talks from eight major industry\nconferences, using large language models and expert validation to extract\ntechnologies, their purposes, and usage contexts. We also explored how\ntechnologies interrelate and fit within DevOps and deployment pipelines. Among\n450 technologies, Kubernetes, Cloud Native, Serverless, and Containers dominate\nby frequency and centrality. Practitioners present technology mainly related to\ndeployment, communication, AI, and observability. We identify five technology\ncommunities covering automation, coordination, cloud AI, monitoring, and\ncloud-edge. Most technologies span multiple DevOps stages and support hybrid\ndeployment. Our study reveals that a few core technologies, like Kubernetes and\nServerless, dominate the contemporary software architecture practice. These are\nmainly applied in later DevOps stages, with limited focus on early phases like\nplanning and coding. We also show how practitioners frame technologies by\npurpose and context, reflecting evolving industry priorities. Finally, we\nobserve how only research can provide a more holistic lens on architectural\ndesign, quality, and evolution.", "AI": {"tldr": "\u7814\u7a76\u5206\u6790\u4e86\u4e94\u5e74\u5185\u516b\u4e2a\u884c\u4e1a\u4f1a\u8bae\u4e2d\u7684\u8f6f\u4ef6\u67b6\u6784\u8d8b\u52bf\uff0c\u53d1\u73b0Kubernetes\u3001Serverless\u7b49\u6280\u672f\u4e3b\u5bfc\u5f53\u524d\u5b9e\u8df5\uff0c\u4e3b\u8981\u5e94\u7528\u4e8eDevOps\u540e\u671f\u9636\u6bb5\u3002", "motivation": "\u7406\u89e3\u4e91\u8ba1\u7b97\u3001\u5fae\u670d\u52a1\u548c\u5bb9\u5668\u7b49\u6280\u672f\u5bf9\u8f6f\u4ef6\u67b6\u6784\u5b9e\u8df5\u7684\u591a\u6837\u5316\u5f71\u54cd\u3002", "method": "\u5206\u67905,677\u4e2a\u884c\u4e1a\u4f1a\u8bae\u6f14\u8bb2\uff0c\u4f7f\u7528\u5927\u8bed\u8a00\u6a21\u578b\u548c\u4e13\u5bb6\u9a8c\u8bc1\u63d0\u53d6\u6280\u672f\u53ca\u5176\u7528\u9014\u548c\u4e0a\u4e0b\u6587\u3002", "result": "\u53d1\u73b0450\u79cd\u6280\u672f\u4e2d\uff0cKubernetes\u3001Cloud Native\u7b49\u6280\u672f\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\uff0c\u4e3b\u8981\u6d89\u53ca\u90e8\u7f72\u3001\u901a\u4fe1\u548cAI\u7b49\u9886\u57df\u3002", "conclusion": "\u5c11\u6570\u6838\u5fc3\u6280\u672f\u4e3b\u5bfc\u5f53\u524d\u67b6\u6784\u5b9e\u8df5\uff0c\u7814\u7a76\u9700\u66f4\u5168\u9762\u5173\u6ce8\u67b6\u6784\u8bbe\u8ba1\u3001\u8d28\u91cf\u548c\u6f14\u53d8\u3002"}}
{"id": "2507.14558", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14558", "abs": "https://arxiv.org/abs/2507.14558", "authors": ["Bin Duan", "Tarek Mahmud", "Meiru Che", "Yan Yan", "Naipeng Dong", "Dan Dongseong Kim", "Guowei Yang"], "title": "Harnessing LLMs for Document-Guided Fuzzing of OpenCV Library", "comment": null, "summary": "The combination of computer vision and artificial intelligence is\nfundamentally transforming a broad spectrum of industries by enabling machines\nto interpret and act upon visual data with high levels of accuracy. As the\nbiggest and by far the most popular open-source computer vision library, OpenCV\nlibrary provides an extensive suite of programming functions supporting\nreal-time computer vision. Bugs in the OpenCV library can affect the downstream\ncomputer vision applications, and it is critical to ensure the reliability of\nthe OpenCV library. This paper introduces VISTAFUZZ, a novel technique for\nharnessing large language models (LLMs) for document-guided fuzzing of the\nOpenCV library. VISTAFUZZ utilizes LLMs to parse API documentation and obtain\nstandardized API information. Based on this standardized information, VISTAFUZZ\nextracts constraints on individual input parameters and dependencies between\nthese. Using these constraints and dependencies, VISTAFUZZ then generates new\ninput values to systematically test each target API. We evaluate the\neffectiveness of VISTAFUZZ in testing 330 APIs in the OpenCV library, and the\nresults show that VISTAFUZZ detected 17 new bugs, where 10 bugs have been\nconfirmed, and 5 of these have been fixed.", "AI": {"tldr": "VISTAFUZZ\u662f\u4e00\u79cd\u5229\u7528\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5bf9OpenCV\u5e93\u8fdb\u884c\u6587\u6863\u5f15\u5bfc\u6a21\u7cca\u6d4b\u8bd5\u7684\u65b0\u6280\u672f\uff0c\u6210\u529f\u68c0\u6d4b\u5e76\u4fee\u590d\u4e86\u591a\u4e2abug\u3002", "motivation": "OpenCV\u5e93\u4f5c\u4e3a\u6700\u6d41\u884c\u7684\u5f00\u6e90\u8ba1\u7b97\u673a\u89c6\u89c9\u5e93\uff0c\u5176\u53ef\u9760\u6027\u81f3\u5173\u91cd\u8981\u3002\u73b0\u6709\u65b9\u6cd5\u5728\u6d4b\u8bd5\u5176API\u65f6\u5b58\u5728\u4e0d\u8db3\uff0c\u9700\u8981\u66f4\u9ad8\u6548\u7684\u6d4b\u8bd5\u6280\u672f\u3002", "method": "VISTAFUZZ\u5229\u7528LLMs\u89e3\u6790API\u6587\u6863\uff0c\u63d0\u53d6\u53c2\u6570\u7ea6\u675f\u548c\u4f9d\u8d56\u5173\u7cfb\uff0c\u751f\u6210\u7cfb\u7edf\u5316\u7684\u6d4b\u8bd5\u8f93\u5165\u3002", "result": "\u6d4b\u8bd5\u4e86330\u4e2aAPI\uff0c\u53d1\u73b017\u4e2a\u65b0bug\uff0c\u5176\u4e2d10\u4e2a\u88ab\u786e\u8ba4\uff0c5\u4e2a\u5df2\u4fee\u590d\u3002", "conclusion": "VISTAFUZZ\u663e\u8457\u63d0\u5347\u4e86OpenCV\u5e93\u7684\u6d4b\u8bd5\u6548\u7387\u548c\u53ef\u9760\u6027\uff0c\u4e3a\u7c7b\u4f3c\u7cfb\u7edf\u7684\u6d4b\u8bd5\u63d0\u4f9b\u4e86\u65b0\u601d\u8def\u3002"}}
{"id": "2507.14594", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14594", "abs": "https://arxiv.org/abs/2507.14594", "authors": ["Weiwei Xu", "Hengzhi Ye", "Kai Gao", "Minghui Zhou"], "title": "A first look at License Variants in the PyPI Ecosystem", "comment": null, "summary": "Open-source licenses establish the legal foundation for software reuse, yet\nlicense variants, including both modified standard licenses and custom-created\nalternatives, introduce significant compliance complexities. Despite their\nprevalence and potential impact, these variants are poorly understood in modern\nsoftware systems, and existing tools do not account for their existence,\nleading to significant challenges in both effectiveness and efficiency of\nlicense analysis. To fill this knowledge gap, we conduct a comprehensive\nempirical study of license variants in the PyPI ecosystem. Our findings show\nthat textual variations in licenses are common, yet only 2% involve substantive\nmodifications. However, these license variants lead to significant compliance\nissues, with 10.7% of their downstream dependencies found to be\nlicense-incompatible.\n  Inspired by our findings, we introduce LV-Parser, a novel approach for\nefficient license variant analysis leveraging diff-based techniques and large\nlanguage models, along with LV-Compat, an automated pipeline for detecting\nlicense incompatibilities in software dependency networks. Our evaluation\ndemonstrates that LV-Parser achieves an accuracy of 0.936 while reducing\ncomputational costs by 30%, and LV-Compat identifies 5.2 times more\nincompatible packages than existing methods with a precision of 0.98.\n  This work not only provides the first empirical study into license variants\nin software packaging ecosystem but also equips developers and organizations\nwith practical tools for navigating the complex landscape of open-source\nlicensing.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u5f00\u6e90\u8bb8\u53ef\u8bc1\u53d8\u4f53\u5728PyPI\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u6587\u672c\u53d8\u4f53\u5e38\u89c1\u4f46\u5b9e\u8d28\u6027\u4fee\u6539\u8f83\u5c11\uff0c\u4f46\u4ecd\u5bfc\u81f4\u663e\u8457\u7684\u5408\u89c4\u95ee\u9898\u3002\u63d0\u51fa\u4e86LV-Parser\u548cLV-Compat\u5de5\u5177\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u5206\u6790\u6548\u7387\u548c\u51c6\u786e\u6027\u3002", "motivation": "\u5f00\u6e90\u8bb8\u53ef\u8bc1\u53d8\u4f53\u5728\u73b0\u4ee3\u8f6f\u4ef6\u7cfb\u7edf\u4e2d\u666e\u904d\u5b58\u5728\u4e14\u5f71\u54cd\u91cd\u5927\uff0c\u4f46\u73b0\u6709\u5de5\u5177\u672a\u80fd\u6709\u6548\u5904\u7406\uff0c\u5bfc\u81f4\u8bb8\u53ef\u8bc1\u5206\u6790\u7684\u6548\u7387\u548c\u6548\u679c\u53d7\u9650\u3002", "method": "\u901a\u8fc7\u5b9e\u8bc1\u7814\u7a76\u5206\u6790PyPI\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u8bb8\u53ef\u8bc1\u53d8\u4f53\uff0c\u5e76\u5f00\u53d1\u4e86\u57fa\u4e8e\u5dee\u5f02\u5206\u6790\u548c\u5927\u8bed\u8a00\u6a21\u578b\u7684LV-Parser\u5de5\u5177\uff0c\u4ee5\u53ca\u81ea\u52a8\u5316\u68c0\u6d4b\u8bb8\u53ef\u8bc1\u4e0d\u517c\u5bb9\u6027\u7684LV-Compat\u6d41\u7a0b\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u8bb8\u53ef\u8bc1\u6587\u672c\u53d8\u4f53\u5e38\u89c1\uff0c\u4f46\u4ec52%\u4e3a\u5b9e\u8d28\u6027\u4fee\u6539\uff1bLV-Parser\u51c6\u786e\u7387\u8fbe0.936\u4e14\u8ba1\u7b97\u6210\u672c\u964d\u4f4e30%\uff0cLV-Compat\u68c0\u6d4b\u5230\u7684\u4e0d\u517c\u5bb9\u5305\u6570\u91cf\u662f\u73b0\u6709\u65b9\u6cd5\u76845.2\u500d\uff0c\u7cbe\u5ea6\u4e3a0.98\u3002", "conclusion": "\u8be5\u7814\u7a76\u586b\u8865\u4e86\u8bb8\u53ef\u8bc1\u53d8\u4f53\u77e5\u8bc6\u7684\u7a7a\u767d\uff0c\u5e76\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u5b9e\u7528\u5de5\u5177\uff0c\u4ee5\u5e94\u5bf9\u5f00\u6e90\u8bb8\u53ef\u8bc1\u7684\u590d\u6742\u6027\u3002"}}
{"id": "2507.14687", "categories": ["cs.SE", "68Q60, 03B70", "D.2.5"], "pdf": "https://arxiv.org/pdf/2507.14687", "abs": "https://arxiv.org/abs/2507.14687", "authors": ["Robin Lee", "Youngho Nam"], "title": "An Efficient Algorithm for Generating Minimal Unique-Cause MC/DC Test cases for Singular Boolean Expressions", "comment": "10 pages, 5 figures", "summary": "Modified Condition/Decision Coverage (MC/DC) is a mandatory structural\ncoverage criterion for ensuring the reliability and safety of critical systems.\nWhile its strictest form, Unique-Cause MC/DC, offers the highest assurance,\nresearch on its efficient test generation has been lacking. This gap is\nparticularly significant, as an analysis of large-scale avionics systems shows\nthat 99.7% of all conditional decisions are, in fact, Singular Boolean\nExpressions (SBEs) the ideal structure for applying Unique-Cause MC/DC. This\npaper proposes 'Robin's Rule', a deterministic algorithm that directly\nconstructs a minimal test set of N + 1 cases to guarantee 100% Unique-Cause\nMC/DC for SBEs with N conditions, without generating a full truth table. To\nvalidate our approach, we constructed a benchmark by reformulating the TCAS-II\nspecifications into SBEs and verified the results using an industry-standard,\ncertified commercial tool. The results confirm that our method consistently\nachieves 100% coverage with the theoretical minimum number of tests and is more\nefficient than the commercial tool. This work provides a practical and provably\noptimal solution for verifying safety-critical systems, ensuring both rigor and\nefficiency.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3a'Robin's Rule'\u7684\u786e\u5b9a\u6027\u7b97\u6cd5\uff0c\u7528\u4e8e\u9ad8\u6548\u751f\u6210\u6ee1\u8db3Unique-Cause MC/DC\u7684\u6700\u5c0f\u6d4b\u8bd5\u96c6\uff0c\u9002\u7528\u4e8eSingular Boolean Expressions\uff08SBEs\uff09\uff0c\u9a8c\u8bc1\u4e86\u5176\u4f18\u4e8e\u5546\u4e1a\u5de5\u5177\u7684\u6548\u7387\u548c\u8986\u76d6\u80fd\u529b\u3002", "motivation": "\u5c3d\u7ba1Unique-Cause MC/DC\u5728\u5173\u952e\u7cfb\u7edf\u4e2d\u5177\u6709\u6700\u9ad8\u4fdd\u969c\uff0c\u4f46\u5176\u9ad8\u6548\u6d4b\u8bd5\u751f\u6210\u65b9\u6cd5\u7684\u7814\u7a76\u4e0d\u8db3\uff0c\u5c24\u5176\u662f\u5728SBEs\u5360\u4e3b\u5bfc\u7684\u5b9e\u9645\u7cfb\u7edf\u4e2d\u3002", "method": "\u63d0\u51fa'Robin's Rule'\u7b97\u6cd5\uff0c\u76f4\u63a5\u6784\u5efaN + 1\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u6700\u5c0f\u96c6\uff0c\u786e\u4fddSBEs\u7684100% Unique-Cause MC/DC\u8986\u76d6\uff0c\u65e0\u9700\u751f\u6210\u5b8c\u6574\u771f\u503c\u8868\u3002", "result": "\u901a\u8fc7TCAS-II\u89c4\u8303\u7684SBEs\u91cd\u6784\u9a8c\u8bc1\uff0c\u7b97\u6cd5\u59cb\u7ec8\u5b9e\u73b0100%\u8986\u76d6\uff0c\u4e14\u6d4b\u8bd5\u7528\u4f8b\u6570\u91cf\u4e3a\u7406\u8bba\u6700\u5c0f\u503c\uff0c\u6548\u7387\u9ad8\u4e8e\u5546\u4e1a\u5de5\u5177\u3002", "conclusion": "'Robin's Rule'\u4e3a\u5b89\u5168\u5173\u952e\u7cfb\u7edf\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u5b9e\u7528\u4e14\u7406\u8bba\u6700\u4f18\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u517c\u5177\u4e25\u8c28\u6027\u548c\u9ad8\u6548\u6027\u3002"}}
{"id": "2507.14716", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14716", "abs": "https://arxiv.org/abs/2507.14716", "authors": ["Shahidul Islam", "Ashik Aowal", "Md Sharif Uddin", "Shaiful Chowdhury"], "title": "HistoryFinder: Advancing Method-Level Source Code History Generation with Accurate Oracles and Enhanced Algorithm", "comment": null, "summary": "Reconstructing a method's change history efficiently and accurately is\ncritical for many software engineering tasks, including maintenance,\nrefactoring, and comprehension. Despite the availability of method history\ngeneration tools such as CodeShovel and CodeTracker, existing evaluations of\ntheir effectiveness are limited by inaccuracies in the ground truth oracles\nused. In this study, we systematically construct two new oracles -- the\ncorrected CodeShovel oracle and a newly developed HistoryFinder oracle -- by\ncombining automated analysis with expert-guided manual validation. We also\nintroduce HistoryFinder, a new method history generation tool designed to\nimprove not only the accuracy and completeness of method change histories but\nalso to offer competitive runtime performance. Through extensive evaluation\nacross 400 methods from 40 open-source repositories, we show that HistoryFinder\nconsistently outperforms CodeShovel, CodeTracker, IntelliJ, and Git-based\nbaselines in terms of precision, recall, and F1 score. Moreover, HistoryFinder\nachieves competitive runtime performance, offering the lowest mean and median\nexecution times among all the research-based tools.\n  While Git-based tools exhibit the fastest runtimes, this efficiency comes at\nthe cost of significantly lower precision and recall -- leaving HistoryFinder\nas the best overall choice when both accuracy and efficiency are important. To\nfacilitate adoption, we provide a web interface, CLI, and Java library for\nflexible usage.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u5de5\u5177HistoryFinder\uff0c\u7528\u4e8e\u9ad8\u6548\u51c6\u786e\u5730\u91cd\u5efa\u65b9\u6cd5\u53d8\u66f4\u5386\u53f2\uff0c\u5e76\u901a\u8fc7\u7cfb\u7edf\u6784\u5efa\u7684\u65b0oracle\u9a8c\u8bc1\u5176\u4f18\u4e8e\u73b0\u6709\u5de5\u5177\u7684\u6027\u80fd\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u5386\u53f2\u751f\u6210\u5de5\u5177\u7684\u8bc4\u4f30\u56e0oracle\u4e0d\u51c6\u786e\u800c\u53d7\u9650\uff0c\u9700\u6539\u8fdb\u5de5\u5177\u4ee5\u63d0\u5347\u51c6\u786e\u6027\u548c\u8fd0\u884c\u6548\u7387\u3002", "method": "\u6784\u5efa\u4e24\u4e2a\u65b0oracle\uff08\u4fee\u6b63\u7684CodeShovel oracle\u548cHistoryFinder oracle\uff09\uff0c\u7ed3\u5408\u81ea\u52a8\u5206\u6790\u548c\u4e13\u5bb6\u9a8c\u8bc1\uff0c\u5f00\u53d1HistoryFinder\u5de5\u5177\u3002", "result": "\u5728400\u4e2a\u65b9\u6cd5\u7684\u8bc4\u4f30\u4e2d\uff0cHistoryFinder\u5728\u7cbe\u5ea6\u3001\u53ec\u56de\u7387\u548cF1\u5206\u6570\u4e0a\u4f18\u4e8eCodeShovel\u3001CodeTracker\u7b49\u5de5\u5177\uff0c\u4e14\u8fd0\u884c\u65f6\u95f4\u8868\u73b0\u4f18\u5f02\u3002", "conclusion": "HistoryFinder\u5728\u51c6\u786e\u6027\u548c\u6548\u7387\u4e0a\u5747\u8868\u73b0\u6700\u4f73\uff0c\u9002\u5408\u9700\u8981\u9ad8\u7cbe\u5ea6\u548c\u9ad8\u6548\u7387\u7684\u573a\u666f\uff0c\u5e76\u63d0\u4f9b\u591a\u79cd\u4f7f\u7528\u65b9\u5f0f\u3002"}}
{"id": "2507.14735", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14735", "abs": "https://arxiv.org/abs/2507.14735", "authors": ["Vladyslav Bulhakov", "Giordano d'Aloisio", "Claudio Di Sipio", "Antinisca Di Marco", "Davide Di Ruscio"], "title": "Investigating the Role of LLMs Hyperparameter Tuning and Prompt Engineering to Support Domain Modeling", "comment": "Accepted at 51st Euromicro Conference Series on Software Engineering\n  and Advanced Applications (SEAA)", "summary": "The introduction of large language models (LLMs) has enhanced automation in\nsoftware engineering tasks, including in Model Driven Engineering (MDE).\nHowever, using general-purpose LLMs for domain modeling has its limitations.\nOne approach is to adopt fine-tuned models, but this requires significant\ncomputational resources and can lead to issues like catastrophic forgetting.\n  This paper explores how hyperparameter tuning and prompt engineering can\nimprove the accuracy of the Llama 3.1 model for generating domain models from\ntextual descriptions. We use search-based methods to tune hyperparameters for a\nspecific medical data model, resulting in a notable quality improvement over\nthe baseline LLM. We then test the optimized hyperparameters across ten diverse\napplication domains.\n  While the solutions were not universally applicable, we demonstrate that\ncombining hyperparameter tuning with prompt engineering can enhance results\nacross nearly all examined domain models.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86\u901a\u8fc7\u8d85\u53c2\u6570\u8c03\u6574\u548c\u63d0\u793a\u5de5\u7a0b\u63d0\u5347Llama 3.1\u6a21\u578b\u5728\u751f\u6210\u9886\u57df\u6a21\u578b\u4e2d\u7684\u51c6\u786e\u6027\uff0c\u5c55\u793a\u4e86\u5728\u7279\u5b9a\u9886\u57df\uff08\u5982\u533b\u7597\u6570\u636e\u6a21\u578b\uff09\u4e2d\u7684\u663e\u8457\u6539\u8fdb\u3002", "motivation": "\u901a\u7528\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5728\u9886\u57df\u5efa\u6a21\u4e2d\u5b58\u5728\u5c40\u9650\u6027\uff0c\u800c\u5fae\u8c03\u6a21\u578b\u9700\u8981\u5927\u91cf\u8ba1\u7b97\u8d44\u6e90\u4e14\u53ef\u80fd\u5bfc\u81f4\u707e\u96be\u6027\u9057\u5fd8\u3002\u672c\u6587\u65e8\u5728\u901a\u8fc7\u8d85\u53c2\u6570\u8c03\u6574\u548c\u63d0\u793a\u5de5\u7a0b\u4f18\u5316\u6a21\u578b\u6027\u80fd\u3002", "method": "\u91c7\u7528\u57fa\u4e8e\u641c\u7d22\u7684\u65b9\u6cd5\u5bf9Llama 3.1\u6a21\u578b\u7684\u8d85\u53c2\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u5e76\u7ed3\u5408\u63d0\u793a\u5de5\u7a0b\uff0c\u9488\u5bf9\u533b\u7597\u6570\u636e\u6a21\u578b\u8fdb\u884c\u4f18\u5316\u3002", "result": "\u4f18\u5316\u540e\u7684\u6a21\u578b\u5728\u533b\u7597\u6570\u636e\u6a21\u578b\u4e2d\u8868\u73b0\u663e\u8457\u4f18\u4e8e\u57fa\u7ebfLLM\uff0c\u5e76\u5728\u5341\u4e2a\u4e0d\u540c\u5e94\u7528\u9886\u57df\u4e2d\u6d4b\u8bd5\u4e86\u4f18\u5316\u8d85\u53c2\u6570\u7684\u9002\u7528\u6027\u3002", "conclusion": "\u867d\u7136\u89e3\u51b3\u65b9\u6848\u5e76\u975e\u666e\u904d\u9002\u7528\uff0c\u4f46\u8d85\u53c2\u6570\u8c03\u6574\u4e0e\u63d0\u793a\u5de5\u7a0b\u7684\u7ed3\u5408\u80fd\u663e\u8457\u63d0\u5347\u5927\u591a\u6570\u9886\u57df\u6a21\u578b\u7684\u751f\u6210\u8d28\u91cf\u3002"}}
{"id": "2507.14770", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14770", "abs": "https://arxiv.org/abs/2507.14770", "authors": ["Manaal Basha", "Ivan Beschastnikh", "Gema Rodriguez-Perez", "Cleidson R. B. de Souza"], "title": "Toward Inclusive AI-Driven Development: Exploring Gender Differences in Code Generation Tool Interactions", "comment": "ESEM 2025 Registered Reports", "summary": "Context: The increasing reliance on Code Generation Tools (CGTs), such as\nWindsurf and GitHub Copilot, are revamping programming workflows and raising\ncritical questions about fairness and inclusivity. While CGTs offer potential\nproductivity enhancements, their effectiveness across diverse user groups have\nnot been sufficiently investigated. Objectives: We hypothesize that developers'\ninteractions with CGTs vary based on gender, influencing task outcomes and\ncognitive load, as prior research suggests that gender differences can affect\ntechnology use and cognitive processing. Methods: The study will employ a\nmixed-subjects design with 54 participants, evenly divided by gender for a\ncounterbalanced design. Participants will complete two programming tasks\n(medium to hard difficulty) with only CGT assistance and then with only\ninternet access. Task orders and conditions will be counterbalanced to mitigate\norder effects. Data collection will include cognitive load surveys, screen\nrecordings, and task performance metrics such as completion time, code\ncorrectness, and CGT interaction behaviors. Statistical analyses will be\nconducted to identify statistically significant differences in CGT usage.\nExpected Contributions: Our work can uncover gender differences in CGT\ninteraction and performance among developers. Our findings can inform future\nCGT designs and help address usability and potential disparities in interaction\npatterns across diverse user groups. Conclusion: While results are not yet\navailable, our proposal lays the groundwork for advancing fairness,\naccountability, transparency, and ethics (FATE) in CGT design. The outcomes are\nanticipated to contribute to inclusive AI practices and equitable tool\ndevelopment for all users.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4ee3\u7801\u751f\u6210\u5de5\u5177\uff08CGTs\uff09\u5728\u4e0d\u540c\u6027\u522b\u5f00\u53d1\u8005\u4e2d\u7684\u4f7f\u7528\u5dee\u5f02\uff0c\u5206\u6790\u5176\u5bf9\u4efb\u52a1\u8868\u73b0\u548c\u8ba4\u77e5\u8d1f\u8377\u7684\u5f71\u54cd\uff0c\u65e8\u5728\u63a8\u52a8\u516c\u5e73\u548c\u5305\u5bb9\u6027\u8bbe\u8ba1\u3002", "motivation": "\u968f\u7740\u4ee3\u7801\u751f\u6210\u5de5\u5177\u7684\u666e\u53ca\uff0c\u5176\u5728\u4e0d\u540c\u7528\u6237\u7fa4\u4f53\u4e2d\u7684\u516c\u5e73\u6027\u548c\u5305\u5bb9\u6027\u5c1a\u672a\u5145\u5206\u7814\u7a76\uff0c\u5c24\u5176\u662f\u6027\u522b\u5dee\u5f02\u53ef\u80fd\u5f71\u54cd\u4f7f\u7528\u6548\u679c\u3002", "method": "\u91c7\u7528\u6df7\u5408\u5b9e\u9a8c\u8bbe\u8ba1\uff0c54\u540d\u53c2\u4e0e\u8005\u6309\u6027\u522b\u5747\u5206\uff0c\u5b8c\u6210\u7f16\u7a0b\u4efb\u52a1\uff08\u4f7f\u7528CGT\u548c\u4ec5\u4e92\u8054\u7f51\uff09\uff0c\u6536\u96c6\u8ba4\u77e5\u8d1f\u8377\u3001\u4efb\u52a1\u8868\u73b0\u7b49\u6570\u636e\uff0c\u5e76\u8fdb\u884c\u7edf\u8ba1\u5206\u6790\u3002", "result": "\u9884\u671f\u53d1\u73b0\u6027\u522b\u5728CGT\u4ea4\u4e92\u548c\u4efb\u52a1\u8868\u73b0\u4e0a\u7684\u5dee\u5f02\uff0c\u4e3a\u5de5\u5177\u8bbe\u8ba1\u63d0\u4f9b\u6539\u8fdb\u65b9\u5411\u3002", "conclusion": "\u7814\u7a76\u867d\u672a\u5b8c\u6210\uff0c\u4f46\u4e3aCGT\u7684\u516c\u5e73\u6027\u3001\u900f\u660e\u6027\u548c\u5305\u5bb9\u6027\u8bbe\u8ba1\u5960\u5b9a\u57fa\u7840\uff0c\u63a8\u52a8AI\u5de5\u5177\u7684\u516c\u5e73\u53d1\u5c55\u3002"}}
{"id": "2507.14776", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14776", "abs": "https://arxiv.org/abs/2507.14776", "authors": ["Kimia Tasnia", "Alexander Garcia", "Tasnuva Farheen", "Sazadur Rahman"], "title": "VeriOpt: PPA-Aware High-Quality Verilog Generation via Multi-Role LLMs", "comment": "9 pages, 7 figures, Accepted for ICCAD 2025, Munich, Germany", "summary": "The rapid adoption of large language models(LLMs) in hardware design has\nprimarily focused on generating functionally correct Verilog code, overlooking\ncritical Power Performance-Area(PPA) metrics essential for industrial-grade\ndesigns. To bridge this gap, we propose VeriOpt, a novel framework that\nleverages role-based prompting and PPA-aware optimization to enable LLMs to\nproduce high-quality, synthesizable Verilog. VeriOpt structures LLM\ninteractions into specialized roles (e.g., Planner, Programmer, Reviewer,\nEvaluator) to emulate human design workflows, while integrating PPA constraints\ndirectly into the prompting pipeline. By combining multi-modal feedback (e.g.,\nsynthesis reports, timing diagrams) with PPA aware prompting, VeriOpt achieves\nPPA-efficient code generation without sacrificing functional correctness.\nExperimental results demonstrate up to 88% reduction in power, 76% reduction in\narea and 73% improvement in timing closure compared to baseline LLM-generated\nRTL, validated using industry standard EDA tools. At the same time achieves 86%\nsuccess rate in functionality evaluation. Our work advances the\nstate-of-the-art AI-driven hardware design by addressing the critical gap\nbetween correctness and quality, paving the way for reliable LLM adoption in\nproduction workflows.", "AI": {"tldr": "VeriOpt\u662f\u4e00\u4e2a\u901a\u8fc7\u89d2\u8272\u63d0\u793a\u548cPPA\u4f18\u5316\u4f7fLLM\u751f\u6210\u9ad8\u8d28\u91cfVerilog\u4ee3\u7801\u7684\u6846\u67b6\uff0c\u663e\u8457\u63d0\u5347PPA\u6307\u6807\u3002", "motivation": "\u5f53\u524dLLM\u5728\u786c\u4ef6\u8bbe\u8ba1\u4e2d\u4e3b\u8981\u5173\u6ce8\u529f\u80fd\u6b63\u786e\u6027\uff0c\u5ffd\u89c6\u4e86PPA\u6307\u6807\uff0cVeriOpt\u65e8\u5728\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\u3002", "method": "\u91c7\u7528\u89d2\u8272\u63d0\u793a\uff08\u5982\u89c4\u5212\u5e08\u3001\u7a0b\u5e8f\u5458\u3001\u8bc4\u5ba1\u5458\uff09\u548cPPA\u611f\u77e5\u4f18\u5316\uff0c\u7ed3\u5408\u591a\u6a21\u6001\u53cd\u9988\u751f\u6210PPA\u9ad8\u6548\u4ee3\u7801\u3002", "result": "\u5b9e\u9a8c\u663e\u793a\uff0c\u76f8\u6bd4\u57fa\u7ebf\uff0c\u529f\u8017\u964d\u4f4e88%\uff0c\u9762\u79ef\u51cf\u5c1176%\uff0c\u65f6\u5e8f\u95ed\u5408\u63d0\u534773%\uff0c\u529f\u80fd\u6b63\u786e\u7387\u8fbe86%\u3002", "conclusion": "VeriOpt\u901a\u8fc7\u7ed3\u5408\u529f\u80fd\u6b63\u786e\u6027\u548cPPA\u4f18\u5316\uff0c\u63a8\u52a8\u4e86AI\u9a71\u52a8\u7684\u786c\u4ef6\u8bbe\u8ba1\u53d1\u5c55\u3002"}}
{"id": "2507.14791", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.14791", "abs": "https://arxiv.org/abs/2507.14791", "authors": ["Yang Liu", "Li Zhang", "Fang Liu", "Zhuohang Wang", "Donglin Wei", "Zhishuo Yang", "Kechi Zhang", "Jia Li", "Lin Shi"], "title": "Enhancing Repository-Level Code Generation with Call Chain-Aware Multi-View Context", "comment": null, "summary": "Repository-level code generation aims to generate code within the context of\na specified repository. Existing approaches typically employ\nretrieval-augmented generation (RAG) techniques to provide LLMs with relevant\ncontextual information extracted from the repository. However, these approaches\noften struggle with effectively identifying truly relevant contexts that\ncapture the rich semantics of the repository, and their contextual perspectives\nremains narrow. Moreover, most approaches fail to account for the structural\nrelationships in the retrieved code during prompt construction, hindering the\nLLM's ability to accurately interpret the context. To address these issues, we\npropose RepoScope, which leverages call chain-aware multi-view context for\nrepository-level code generation. RepoScope constructs a Repository Structural\nSemantic Graph (RSSG) and retrieves a comprehensive four-view context,\nintegrating both structural and similarity-based contexts. We propose a novel\ncall chain prediction method that utilizes the repository's structural\nsemantics to improve the identification of callees in the target function.\nAdditionally, we present a structure-preserving serialization algorithm for\nprompt construction, ensuring the coherence of the context for the LLM.\nNotably, RepoScope relies solely on static analysis, eliminating the need for\nadditional training or multiple LLM queries, thus ensuring both efficiency and\ngeneralizability. Evaluation on widely-used repository-level code generation\nbenchmarks (CoderEval and DevEval) demonstrates that RepoScope outperforms\nstate-of-the-art methods, achieving up to a 36.35% relative improvement in\npass@1 scores. Further experiments emphasize RepoScope's potential to improve\ncode generation across different tasks and its ability to integrate effectively\nwith existing approaches.", "AI": {"tldr": "RepoScope\u901a\u8fc7\u591a\u89c6\u89d2\u4e0a\u4e0b\u6587\u548c\u7ed3\u6784\u8bed\u4e49\u56fe\u6539\u8fdb\u4ed3\u5e93\u7ea7\u4ee3\u7801\u751f\u6210\uff0c\u663e\u8457\u63d0\u5347\u6027\u80fd\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u5728\u8bc6\u522b\u4ed3\u5e93\u8bed\u4e49\u548c\u7ed3\u6784\u5173\u7cfb\u4e0a\u5b58\u5728\u4e0d\u8db3\uff0c\u5bfc\u81f4\u4e0a\u4e0b\u6587\u4fe1\u606f\u4e0d\u5145\u5206\u3002", "method": "\u6784\u5efaRepository Structural Semantic Graph (RSSG)\uff0c\u7ed3\u5408\u56db\u89c6\u89d2\u4e0a\u4e0b\u6587\u548c\u8c03\u7528\u94fe\u9884\u6d4b\u65b9\u6cd5\u3002", "result": "\u5728CoderEval\u548cDevEval\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cpass@1\u5206\u6570\u76f8\u5bf9\u63d0\u534736.35%\u3002", "conclusion": "RepoScope\u65e0\u9700\u989d\u5916\u8bad\u7ec3\uff0c\u9ad8\u6548\u4e14\u901a\u7528\uff0c\u80fd\u6709\u6548\u63d0\u5347\u4ee3\u7801\u751f\u6210\u8d28\u91cf\u3002"}}
{"id": "2507.14969", "categories": ["cs.SE", "D.2.1"], "pdf": "https://arxiv.org/pdf/2507.14969", "abs": "https://arxiv.org/abs/2507.14969", "authors": ["Sai Zhang", "Zhenchang Xing", "Jieshan Chen", "Dehai Zhao", "Zizhong Zhu", "Xiaowang Zhang", "Zhiyong Feng", "Xiaohong Li"], "title": "Think Like an Engineer: A Neuro-Symbolic Collaboration Agent for Generative Software Requirements Elicitation and Self-Review", "comment": null, "summary": "The vision of End-User Software Engineering (EUSE) is to empower\nnon-professional users with full control over the software development\nlifecycle. It aims to enable users to drive generative software development\nusing only natural language requirements. However, since end-users often lack\nknowledge of software engineering, their requirement descriptions are\nfrequently ambiguous, raising significant challenges to generative software\ndevelopment. Although existing approaches utilize structured languages like\nGherkin to clarify user narratives, they still struggle to express the causal\nlogic between preconditions and behavior actions. This paper introduces\nRequireCEG, a requirement elicitation and self-review agent that embeds\ncausal-effect graphs (CEGs) in a neuro-symbolic collaboration architecture.\nRequireCEG first uses a feature tree to analyze user narratives hierarchically,\nclearly defining the scope of software components and their system behavior\nrequirements. Next, it constructs the self-healing CEGs based on the elicited\nrequirements, capturing the causal relationships between atomic preconditions\nand behavioral actions. Finally, the constructed CEGs are used to review and\noptimize Gherkin scenarios, ensuring consistency between the generated Gherkin\nrequirements and the system behavior requirements elicited from user\nnarratives. To evaluate our method, we created the RGPair benchmark dataset and\nconducted extensive experiments. It achieves an 87% coverage rate and raises\ndiversity by 51.88%.", "AI": {"tldr": "RequireCEG\u901a\u8fc7\u795e\u7ecf\u7b26\u53f7\u534f\u4f5c\u67b6\u6784\u5f15\u5165\u56e0\u679c\u6548\u5e94\u56fe\uff08CEGs\uff09\uff0c\u89e3\u51b3\u7528\u6237\u9700\u6c42\u63cf\u8ff0\u6a21\u7cca\u6027\u95ee\u9898\uff0c\u63d0\u5347\u751f\u6210\u8f6f\u4ef6\u5f00\u53d1\u7684\u8986\u76d6\u7387\u548c\u591a\u6837\u6027\u3002", "motivation": "\u7ec8\u7aef\u7528\u6237\u7f3a\u4e4f\u8f6f\u4ef6\u5de5\u7a0b\u77e5\u8bc6\uff0c\u5176\u9700\u6c42\u63cf\u8ff0\u5e38\u6a21\u7cca\u4e0d\u6e05\uff0c\u73b0\u6709\u7ed3\u6784\u5316\u8bed\u8a00\uff08\u5982Gherkin\uff09\u96be\u4ee5\u8868\u8fbe\u56e0\u679c\u903b\u8f91\u3002", "method": "RequireCEG\u4f7f\u7528\u7279\u5f81\u6811\u5206\u5c42\u5206\u6790\u7528\u6237\u53d9\u8ff0\uff0c\u6784\u5efa\u81ea\u4fee\u590dCEGs\uff0c\u6355\u83b7\u539f\u5b50\u524d\u63d0\u4e0e\u884c\u4e3a\u52a8\u4f5c\u7684\u56e0\u679c\u5173\u7cfb\uff0c\u5e76\u4f18\u5316Gherkin\u573a\u666f\u3002", "result": "\u5b9e\u9a8c\u663e\u793a\uff0c\u8be5\u65b9\u6cd5\u8986\u76d6\u7387\u8fbe87%\uff0c\u591a\u6837\u6027\u63d0\u534751.88%\u3002", "conclusion": "RequireCEG\u6709\u6548\u89e3\u51b3\u4e86\u9700\u6c42\u6a21\u7cca\u6027\u95ee\u9898\uff0c\u63d0\u5347\u4e86\u751f\u6210\u8f6f\u4ef6\u5f00\u53d1\u7684\u51c6\u786e\u6027\u548c\u591a\u6837\u6027\u3002"}}
{"id": "2507.15003", "categories": ["cs.SE", "cs.AI", "cs.CE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.15003", "abs": "https://arxiv.org/abs/2507.15003", "authors": ["Hao Li", "Haoxiang Zhang", "Ahmed E. Hassan"], "title": "The Rise of AI Teammates in Software Engineering (SE) 3.0: How Autonomous Coding Agents Are Reshaping Software Engineering", "comment": null, "summary": "The future of software engineering--SE 3.0--is unfolding with the rise of AI\nteammates: autonomous, goal-driven systems collaborating with human developers.\nAmong these, autonomous coding agents are especially transformative, now\nactively initiating, reviewing, and evolving code at scale. This paper\nintroduces AIDev, the first large-scale dataset capturing how such agents\noperate in the wild. Spanning over 456,000 pull requests by five leading\nagents--OpenAI Codex, Devin, GitHub Copilot, Cursor, and Claude Code--across\n61,000 repositories and 47,000 developers, AIDev provides an unprecedented\nempirical foundation for studying autonomous teammates in software development.\n  Unlike prior work that has largely theorized the rise of AI-native software\nengineering, AIDev offers structured, open data to support research in\nbenchmarking, agent readiness, optimization, collaboration modeling, and AI\ngovernance. The dataset includes rich metadata on PRs, authorship, review\ntimelines, code changes, and integration outcomes--enabling exploration beyond\nsynthetic benchmarks like SWE-bench. For instance, although agents often\noutperform humans in speed, their PRs are accepted less frequently, revealing a\ntrust and utility gap. Furthermore, while agents accelerate code\nsubmission--one developer submitted as many PRs in three days as they had in\nthree years--these are structurally simpler (via code complexity metrics).\n  We envision AIDev as a living resource: extensible, analyzable, and ready for\nthe SE and AI communities. Grounding SE 3.0 in real-world evidence, AIDev\nenables a new generation of research into AI-native workflows and supports\nbuilding the next wave of symbiotic human-AI collaboration. The dataset is\npublicly available at https://github.com/SAILResearch/AI_Teammates_in_SE3.\n  > AI Agent, Agentic AI, Coding Agent, Agentic Coding, Software Engineering\nAgent", "AI": {"tldr": "\u8bba\u6587\u4ecb\u7ecd\u4e86AIDev\uff0c\u9996\u4e2a\u5927\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u8bb0\u5f55\u4e86AI\u7f16\u7801\u4ee3\u7406\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u5b9e\u9645\u8fd0\u4f5c\u60c5\u51b5\uff0c\u4e3a\u7814\u7a76AI\u4e0e\u4eba\u7c7b\u534f\u4f5c\u63d0\u4f9b\u4e86\u5b9e\u8bc1\u57fa\u7840\u3002", "motivation": "\u968f\u7740AI\u961f\u53cb\uff08\u5982\u81ea\u4e3b\u7f16\u7801\u4ee3\u7406\uff09\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u5174\u8d77\uff0c\u9700\u8981\u5b9e\u8bc1\u6570\u636e\u6765\u7814\u7a76\u5176\u5b9e\u9645\u8868\u73b0\u548c\u5f71\u54cd\u3002", "method": "\u901a\u8fc7\u6536\u96c6456,000\u4e2a\u62c9\u53d6\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u6db5\u76d65\u4e2a\u4e3b\u6d41AI\u4ee3\u7406\u572861,000\u4e2a\u4ed3\u5e93\u4e2d\u7684\u6d3b\u52a8\uff0c\u63d0\u4f9b\u7ed3\u6784\u5316\u5f00\u653e\u6570\u636e\u3002", "result": "AI\u4ee3\u7406\u5728\u901f\u5ea6\u4e0a\u4f18\u4e8e\u4eba\u7c7b\uff0c\u4f46\u62c9\u53d6\u8bf7\u6c42\u7684\u63a5\u53d7\u7387\u8f83\u4f4e\uff0c\u4e14\u4ee3\u7801\u7ed3\u6784\u66f4\u7b80\u5355\uff0c\u63ed\u793a\u4e86\u4fe1\u4efb\u548c\u6548\u7528\u5dee\u8ddd\u3002", "conclusion": "AIDev\u4e3a\u7814\u7a76AI\u539f\u751f\u5de5\u4f5c\u6d41\u548c\u4eba\u7c7b-AI\u534f\u4f5c\u63d0\u4f9b\u4e86\u91cd\u8981\u8d44\u6e90\uff0c\u652f\u6301\u672a\u6765\u8f6f\u4ef6\u5de5\u7a0b\u7684\u53d1\u5c55\u3002"}}
{"id": "2507.15025", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15025", "abs": "https://arxiv.org/abs/2507.15025", "authors": ["Nenad Petrovic", "Vahid Zolfaghari", "Andre Schamschurko", "Sven Kirchner", "Fengjunjie Pan", "Chengdng Wu", "Nils Purschke", "Aleksei Velsh", "Krzysztof Lebioda", "Yinglei Song", "Yi Zhang", "Lukasz Mazur", "Alois Knoll"], "title": "Survey of GenAI for Automotive Software Development: From Requirements to Executable Code", "comment": "Conference paper accepted for GACLM 2025", "summary": "Adoption of state-of-art Generative Artificial Intelligence (GenAI) aims to\nrevolutionize many industrial areas by reducing the amount of human\nintervention needed and effort for handling complex underlying processes.\nAutomotive software development is considered to be a significant area for\nGenAI adoption, taking into account lengthy and expensive procedures, resulting\nfrom the amount of requirements and strict standardization. In this paper, we\nexplore the adoption of GenAI for various steps of automotive software\ndevelopment, mainly focusing on requirements handling, compliance aspects and\ncode generation. Three GenAI-related technologies are covered within the\nstate-of-art: Large Language Models (LLMs), Retrieval Augmented Generation\n(RAG), Vision Language Models (VLMs), as well as overview of adopted prompting\ntechniques in case of code generation. Additionally, we also derive a\ngeneralized GenAI-aided automotive software development workflow based on our\nfindings from this literature review. Finally, we include a summary of a survey\noutcome, which was conducted among our automotive industry partners regarding\nthe type of GenAI tools used for their daily work activities.", "AI": {"tldr": "\u63a2\u8ba8GenAI\u5728\u6c7d\u8f66\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u5e94\u7528\uff0c\u91cd\u70b9\u5173\u6ce8\u9700\u6c42\u5904\u7406\u3001\u5408\u89c4\u6027\u548c\u4ee3\u7801\u751f\u6210\uff0c\u5e76\u63d0\u51fa\u4e86\u4e00\u4e2a\u901a\u7528\u5de5\u4f5c\u6d41\u7a0b\u3002", "motivation": "\u6c7d\u8f66\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u590d\u6742\u4e14\u6210\u672c\u9ad8\uff0cGenAI\u6709\u671b\u51cf\u5c11\u4eba\u5de5\u5e72\u9884\u548c\u6210\u672c\u3002", "method": "\u7efc\u8ff0\u4e86LLMs\u3001RAG\u548cVLMs\u7b49\u6280\u672f\uff0c\u5e76\u5206\u6790\u4e86\u63d0\u793a\u6280\u672f\u5728\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u5e94\u7528\u3002", "result": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u901a\u7528\u7684GenAI\u8f85\u52a9\u6c7d\u8f66\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\u6d41\u7a0b\uff0c\u5e76\u603b\u7ed3\u4e86\u884c\u4e1a\u8c03\u67e5\u7ed3\u679c\u3002", "conclusion": "GenAI\u5728\u6c7d\u8f66\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u5177\u6709\u6f5c\u529b\uff0c\u4f46\u4ecd\u9700\u8fdb\u4e00\u6b65\u7814\u7a76\u548c\u5b9e\u8df5\u9a8c\u8bc1\u3002"}}
{"id": "2507.15157", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15157", "abs": "https://arxiv.org/abs/2507.15157", "authors": ["Giovanni Quattrocchi", "Liliana Pasquale", "Paola Spoletini", "Luciano Baresi"], "title": "Can LLMs Generate User Stories and Assess Their Quality?", "comment": null, "summary": "Requirements elicitation is still one of the most challenging activities of\nthe requirements engineering process due to the difficulty requirements\nanalysts face in understanding and translating complex needs into concrete\nrequirements. In addition, specifying high-quality requirements is crucial, as\nit can directly impact the quality of the software to be developed. Although\nautomated tools allow for assessing the syntactic quality of requirements,\nevaluating semantic metrics (e.g., language clarity, internal consistency)\nremains a manual and time-consuming activity. This paper explores how LLMs can\nhelp automate requirements elicitation within agile frameworks, where\nrequirements are defined as user stories (US). We used 10 state-of-the-art LLMs\nto investigate their ability to generate US automatically by emulating customer\ninterviews. We evaluated the quality of US generated by LLMs, comparing it with\nthe quality of US generated by humans (domain experts and students). We also\nexplored whether and how LLMs can be used to automatically evaluate the\nsemantic quality of US. Our results indicate that LLMs can generate US similar\nto humans in terms of coverage and stylistic quality, but exhibit lower\ndiversity and creativity. Although LLM-generated US are generally comparable in\nquality to those created by humans, they tend to meet the acceptance quality\ncriteria less frequently, regardless of the scale of the LLM model. Finally,\nLLMs can reliably assess the semantic quality of US when provided with clear\nevaluation criteria and have the potential to reduce human effort in\nlarge-scale assessments.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5982\u4f55\u5229\u7528LLMs\u5728\u654f\u6377\u6846\u67b6\u4e2d\u81ea\u52a8\u5316\u9700\u6c42\u83b7\u53d6\uff0c\u5e76\u8bc4\u4f30\u4e86LLMs\u751f\u6210\u7528\u6237\u6545\u4e8b\uff08US\uff09\u7684\u8d28\u91cf\u53ca\u5176\u8bed\u4e49\u8d28\u91cf\u8bc4\u4f30\u80fd\u529b\u3002", "motivation": "\u9700\u6c42\u83b7\u53d6\u662f\u9700\u6c42\u5de5\u7a0b\u4e2d\u6700\u5177\u6311\u6218\u6027\u7684\u6d3b\u52a8\u4e4b\u4e00\uff0c\u4f20\u7edf\u65b9\u6cd5\u5728\u8bed\u4e49\u8d28\u91cf\u8bc4\u4f30\u4e0a\u8017\u65f6\u4e14\u624b\u52a8\u3002LLMs\u53ef\u80fd\u63d0\u4f9b\u81ea\u52a8\u5316\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u4f7f\u752810\u79cd\u5148\u8fdb\u7684LLMs\u6a21\u62df\u5ba2\u6237\u8bbf\u8c08\u751f\u6210US\uff0c\u5e76\u4e0e\u4eba\u7c7b\u751f\u6210\u7684US\u8fdb\u884c\u8d28\u91cf\u5bf9\u6bd4\uff0c\u540c\u65f6\u63a2\u7d22LLMs\u5728\u8bed\u4e49\u8d28\u91cf\u8bc4\u4f30\u4e2d\u7684\u5e94\u7528\u3002", "result": "LLMs\u751f\u6210\u7684US\u5728\u8986\u76d6\u7387\u548c\u98ce\u683c\u8d28\u91cf\u4e0a\u4e0e\u4eba\u7c7b\u76f8\u4f3c\uff0c\u4f46\u591a\u6837\u6027\u548c\u521b\u9020\u6027\u8f83\u4f4e\uff0c\u4e14\u8f83\u5c11\u6ee1\u8db3\u9a8c\u6536\u6807\u51c6\u3002LLMs\u5728\u63d0\u4f9b\u660e\u786e\u6807\u51c6\u65f6\u53ef\u53ef\u9760\u8bc4\u4f30\u8bed\u4e49\u8d28\u91cf\u3002", "conclusion": "LLMs\u5728\u9700\u6c42\u83b7\u53d6\u548c\u8bed\u4e49\u8d28\u91cf\u8bc4\u4f30\u4e2d\u5177\u6709\u6f5c\u529b\uff0c\u53ef\u51cf\u5c11\u4eba\u5de5\u5de5\u4f5c\u91cf\uff0c\u4f46\u9700\u8fdb\u4e00\u6b65\u4f18\u5316\u591a\u6837\u6027\u548c\u521b\u9020\u6027\u3002"}}
{"id": "2507.15181", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15181", "abs": "https://arxiv.org/abs/2507.15181", "authors": ["Yinglong Zou", "Juan Zhai", "Chunrong Fang", "Yanzhou Mu", "Jiawei Liu", "Zhenyu Chen"], "title": "Deep Learning Framework Testing via Heuristic Guidance Based on Multiple Model Measurements", "comment": null, "summary": "Deep learning frameworks serve as the foundation for developing and deploying\ndeep learning applications. To enhance the quality of deep learning frameworks,\nresearchers have proposed numerous testing methods using deep learning models\nas test inputs. However, existing methods predominantly measure model bug\ndetection effectiveness as heuristic indicators, presenting three critical\nlimitations: Firstly, existing methods fail to quantitatively measure model's\noperator combination variety, potentially missing critical operator\ncombinations that could trigger framework bugs. Secondly, existing methods\nneglect measuring model execution time, resulting in the omission of numerous\nmodels potential for detecting more framework bugs within limited testing time.\nThirdly, existing methods overlook correlation between different model\nmeasurements, relying simply on single-indicator heuristic guidance without\nconsidering their trade-offs. To overcome these limitations, we propose DLMMM,\nthe first deep learning framework testing method to include multiple model\nmeasurements into heuristic guidance and fuse these measurements to achieve\ntheir trade-off. DLMMM firstly quantitatively measures model's bug detection\nperformance, operator combination variety, and model execution time. After\nthat, DLMMM fuses the above measurements based on their correlation to achieve\ntheir trade-off. To further enhance testing effectiveness, DLMMM designs\nmulti-level heuristic guidance for test input model generation.", "AI": {"tldr": "DLMMM\u662f\u4e00\u79cd\u65b0\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u901a\u8fc7\u878d\u5408\u591a\u79cd\u6a21\u578b\u6d4b\u91cf\u6307\u6807\uff08\u5982\u9519\u8bef\u68c0\u6d4b\u6027\u80fd\u3001\u7b97\u5b50\u7ec4\u5408\u591a\u6837\u6027\u548c\u6267\u884c\u65f6\u95f4\uff09\u6765\u4f18\u5316\u6d4b\u8bd5\u6548\u679c\u3002", "motivation": "\u73b0\u6709\u6d4b\u8bd5\u65b9\u6cd5\u5728\u68c0\u6d4b\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7f3a\u9677\u65f6\u5b58\u5728\u4e09\u5927\u5c40\u9650\u6027\uff1a\u65e0\u6cd5\u91cf\u5316\u7b97\u5b50\u7ec4\u5408\u591a\u6837\u6027\u3001\u5ffd\u7565\u6a21\u578b\u6267\u884c\u65f6\u95f4\u3001\u672a\u8003\u8651\u4e0d\u540c\u6d4b\u91cf\u6307\u6807\u95f4\u7684\u76f8\u5173\u6027\u3002", "method": "DLMMM\u9996\u5148\u91cf\u5316\u6a21\u578b\u7684\u9519\u8bef\u68c0\u6d4b\u6027\u80fd\u3001\u7b97\u5b50\u7ec4\u5408\u591a\u6837\u6027\u548c\u6267\u884c\u65f6\u95f4\uff0c\u7136\u540e\u57fa\u4e8e\u76f8\u5173\u6027\u878d\u5408\u8fd9\u4e9b\u6307\u6807\u4ee5\u5b9e\u73b0\u6743\u8861\u3002\u6b64\u5916\uff0c\u8fd8\u8bbe\u8ba1\u4e86\u591a\u7ea7\u542f\u53d1\u5f0f\u6307\u5bfc\u4ee5\u751f\u6210\u6d4b\u8bd5\u8f93\u5165\u6a21\u578b\u3002", "result": "DLMMM\u901a\u8fc7\u591a\u6307\u6807\u878d\u5408\u548c\u591a\u7ea7\u542f\u53d1\u5f0f\u6307\u5bfc\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7684\u6d4b\u8bd5\u6548\u679c\u3002", "conclusion": "DLMMM\u89e3\u51b3\u4e86\u73b0\u6709\u65b9\u6cd5\u7684\u5c40\u9650\u6027\uff0c\u4e3a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u6d4b\u8bd5\u63d0\u4f9b\u4e86\u66f4\u5168\u9762\u548c\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.15188", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2507.15188", "abs": "https://arxiv.org/abs/2507.15188", "authors": ["Chowdhury Shahriar Muzammel", "Maria Spichkova", "James Harland"], "title": "Cultural Impact on Requirements Engineering Activities: Bangladeshi Practitioners' View", "comment": null, "summary": "Requirements Engineering (RE) is one of the most interaction-intensive phases\nof software development. This means that RE activities might be especially\nimpacted by stakeholders' national culture. Software development projects\nincreasingly have a very diverse range of stakeholders. To future-proof RE\nactivities, we need to help RE practitioners avoid misunderstandings and\nconflicts that might arise from not understanding potential Cultural Influences\n(CIs). Moreover, an awareness of CIs supports diversity and inclusion in the IT\nprofession. Bangladesh has a growing IT sector with some unique socio-cultural\ncharacteristics, and has been largely overlooked in this research field. In\nthis study, we aim to investigate how the RE process is adopted in the context\nof Bangladeshi culture and what cultural influences impact overall RE\nactivities.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4e86\u5b5f\u52a0\u62c9\u56fd\u6587\u5316\u5bf9\u9700\u6c42\u5de5\u7a0b\uff08RE\uff09\u6d3b\u52a8\u7684\u5f71\u54cd\uff0c\u65e8\u5728\u907f\u514d\u8bef\u89e3\u5e76\u4fc3\u8fdbIT\u884c\u4e1a\u7684\u591a\u6837\u6027\u3002", "motivation": "\u9700\u6c42\u5de5\u7a0b\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u4e92\u52a8\u5bc6\u96c6\u7684\u9636\u6bb5\uff0c\u53d7\u5229\u76ca\u76f8\u5173\u8005\u56fd\u5bb6\u6587\u5316\u5f71\u54cd\u8f83\u5927\u3002\u5b5f\u52a0\u62c9\u56fdIT\u884c\u4e1a\u53d1\u5c55\u8fc5\u901f\u4f46\u7814\u7a76\u4e0d\u8db3\uff0c\u9700\u4e86\u89e3\u5176\u6587\u5316\u5bf9RE\u7684\u5f71\u54cd\u3002", "method": "\u7814\u7a76\u805a\u7126\u4e8e\u5b5f\u52a0\u62c9\u56fd\u6587\u5316\u80cc\u666f\u4e0b\u7684RE\u5b9e\u8df5\uff0c\u5206\u6790\u6587\u5316\u56e0\u7d20\u5982\u4f55\u5f71\u54cdRE\u6d3b\u52a8\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u5b5f\u52a0\u62c9\u56fd\u72ec\u7279\u7684\u6587\u5316\u7279\u5f81\u5bf9RE\u6d3b\u52a8\u6709\u663e\u8457\u5f71\u54cd\uff0c\u9700\u5728RE\u5b9e\u8df5\u4e2d\u52a0\u4ee5\u8003\u8651\u3002", "conclusion": "\u4e86\u89e3\u6587\u5316\u5f71\u54cd\u6709\u52a9\u4e8e\u4f18\u5316RE\u5b9e\u8df5\uff0c\u907f\u514d\u51b2\u7a81\uff0c\u5e76\u4fc3\u8fdbIT\u884c\u4e1a\u7684\u591a\u6837\u6027\u548c\u5305\u5bb9\u6027\u3002"}}
{"id": "2507.15197", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2507.15197", "abs": "https://arxiv.org/abs/2507.15197", "authors": ["Chowdhury Shahriar Muzammel", "Maria Spichkova", "James Harland"], "title": "Towards Using Personas in Requirements Engineering: What Has Been Changed Recently?", "comment": null, "summary": "In requirements engineering (RE), personas are now being used to represent\nuser expectations and needs. This systematic mapping study (SMS) aims to\nexplore the most recent studies and to cover recent changes in trends,\nespecially related to the recent evolution of Generative AI approaches. Our SMS\ncovers the period between April 2023 and April 2025. We identified 22 relevant\npublications and analysed persona representation, construction, validation, as\nwell as RE activities covered by personas. We identified that a number of\nstudies applied AI-based solutions for persona construction and validation. We\nobserved that template-based personas are becoming more popular nowadays. We\nalso observed an increase in the proportion of studies covering validation\naspects.", "AI": {"tldr": "\u7cfb\u7edf\u6620\u5c04\u7814\u7a76\uff08SMS\uff09\u63a2\u8ba8\u4e862023\u5e74\u81f32025\u5e74\u95f4\u9700\u6c42\u5de5\u7a0b\uff08RE\uff09\u4e2d\u4eba\u7269\u89d2\u8272\u7684\u6700\u65b0\u8d8b\u52bf\uff0c\u5c24\u5176\u662f\u751f\u6210\u5f0fAI\u7684\u5e94\u7528\u3002\u7814\u7a76\u53d1\u73b0AI\u5728\u4eba\u7269\u89d2\u8272\u6784\u5efa\u548c\u9a8c\u8bc1\u4e2d\u7684\u5e94\u7528\u589e\u52a0\uff0c\u6a21\u677f\u5316\u4eba\u7269\u89d2\u8272\u66f4\u53d7\u6b22\u8fce\uff0c\u9a8c\u8bc1\u76f8\u5173\u7814\u7a76\u6bd4\u4f8b\u4e0a\u5347\u3002", "motivation": "\u63a2\u7d22\u9700\u6c42\u5de5\u7a0b\u4e2d\u4eba\u7269\u89d2\u8272\u7684\u6700\u65b0\u7814\u7a76\u8d8b\u52bf\uff0c\u7279\u522b\u662f\u751f\u6210\u5f0fAI\u65b9\u6cd5\u7684\u5f71\u54cd\u3002", "method": "\u5bf92023\u5e744\u6708\u81f32025\u5e744\u6708\u95f4\u768422\u7bc7\u76f8\u5173\u6587\u732e\u8fdb\u884c\u7cfb\u7edf\u6620\u5c04\u7814\u7a76\uff0c\u5206\u6790\u4eba\u7269\u89d2\u8272\u7684\u8868\u793a\u3001\u6784\u5efa\u3001\u9a8c\u8bc1\u53ca\u5176\u5728RE\u6d3b\u52a8\u4e2d\u7684\u5e94\u7528\u3002", "result": "\u53d1\u73b0AI\u5728\u4eba\u7269\u89d2\u8272\u6784\u5efa\u548c\u9a8c\u8bc1\u4e2d\u7684\u5e94\u7528\u589e\u591a\uff0c\u6a21\u677f\u5316\u4eba\u7269\u89d2\u8272\u66f4\u6d41\u884c\uff0c\u9a8c\u8bc1\u76f8\u5173\u7814\u7a76\u6bd4\u4f8b\u589e\u52a0\u3002", "conclusion": "\u751f\u6210\u5f0fAI\u5bf9\u4eba\u7269\u89d2\u8272\u7684\u6784\u5efa\u548c\u9a8c\u8bc1\u6709\u663e\u8457\u5f71\u54cd\uff0c\u6a21\u677f\u5316\u548c\u9a8c\u8bc1\u6210\u4e3a\u7814\u7a76\u70ed\u70b9\u3002"}}
{"id": "2507.15224", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15224", "abs": "https://arxiv.org/abs/2507.15224", "authors": ["Yibo He", "Shuoran Zhao", "Jiaming Huang", "Yingjie Fu", "Hao Yu", "Cunjian Huang", "Tao Xie"], "title": "SimdBench: Benchmarking Large Language Models for SIMD-Intrinsic Code Generation", "comment": null, "summary": "SIMD (Single Instruction Multiple Data) instructions and their compiler\nintrinsics are widely supported by modern processors to accelerate\nperformance-critical tasks. SIMD intrinsic programming, a trade-off between\ncoding productivity and high performance, is widely used in the development of\nmainstream performance-critical libraries and daily computing tasks. Large\nLanguage Models (LLMs), which have demonstrated strong and comprehensive\ncapabilities in code generation, show promise in assisting programmers with the\nchallenges of SIMD intrinsic programming. However, existing code-generation\nbenchmarks focus on only scalar code, and it is unclear how LLMs perform in\ngenerating vectorized code using SIMD intrinsics. To fill this gap, we propose\nSimdBench, the first code benchmark specifically designed for SIMD-intrinsic\ncode generation, comprising 136 carefully crafted tasks and targeting five\nrepresentative SIMD intrinsics: SSE (x86 Streaming SIMD Extension), AVX (x86\nAdvanced Vector Extension), Neon (ARM Advanced SIMD Extension), SVE (ARM\nScalable Vector Extension), and RVV (RISC-V Vector Extension). We conduct a\nsystematic evaluation (measuring both correctness and performance) of 18\nrepresentative LLMs on SimdBench, resulting in a series of novel and insightful\nfindings. Our evaluation results demonstrate that LLMs exhibit a universal\ndecrease in pass@k during SIMD-intrinsic code generation compared to\nscalar-code generation. Our in-depth analysis highlights promising directions\nfor the further advancement of LLMs in the challenging domain of SIMD-intrinsic\ncode generation. SimdBench is fully open source at\nhttps://anonymous.4open.science/r/SimdBench-1B3F/ to benefit the broader\nresearch community.", "AI": {"tldr": "SimdBench\u662f\u9996\u4e2a\u4e13\u95e8\u4e3aSIMD-intrinsic\u4ee3\u7801\u751f\u6210\u8bbe\u8ba1\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5305\u542b136\u4e2a\u4efb\u52a1\uff0c\u8bc4\u4f30\u4e8618\u4e2a\u4e3b\u6d41LLM\u5728\u751f\u6210\u5411\u91cf\u5316\u4ee3\u7801\u65f6\u7684\u8868\u73b0\u3002", "motivation": "\u73b0\u6709\u4ee3\u7801\u751f\u6210\u57fa\u51c6\u4ec5\u5173\u6ce8\u6807\u91cf\u4ee3\u7801\uff0cLLM\u5728SIMD-intrinsic\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u8868\u73b0\u5c1a\u4e0d\u660e\u786e\uff0c\u56e0\u6b64\u9700\u8981\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\u3002", "method": "\u63d0\u51faSimdBench\u57fa\u51c6\u6d4b\u8bd5\uff0c\u9488\u5bf9\u4e94\u79cd\u4ee3\u8868\u6027SIMD\u6307\u4ee4\u96c6\uff08SSE\u3001AVX\u3001Neon\u3001SVE\u3001RVV\uff09\u8bbe\u8ba1136\u4e2a\u4efb\u52a1\uff0c\u7cfb\u7edf\u8bc4\u4f3018\u4e2aLLM\u7684\u6b63\u786e\u6027\u548c\u6027\u80fd\u3002", "result": "LLM\u5728SIMD-intrinsic\u4ee3\u7801\u751f\u6210\u4e2d\u7684pass@k\u666e\u904d\u4f4e\u4e8e\u6807\u91cf\u4ee3\u7801\u751f\u6210\uff0c\u4f46\u5206\u6790\u6307\u51fa\u4e86\u8fdb\u4e00\u6b65\u6539\u8fdb\u7684\u65b9\u5411\u3002", "conclusion": "SimdBench\u4e3a\u7814\u7a76\u793e\u533a\u63d0\u4f9b\u4e86\u5f00\u6e90\u5de5\u5177\uff0c\u63a8\u52a8\u4e86LLM\u5728SIMD-intrinsic\u4ee3\u7801\u751f\u6210\u9886\u57df\u7684\u8fdb\u6b65\u3002"}}
{"id": "2507.15226", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15226", "abs": "https://arxiv.org/abs/2507.15226", "authors": ["Changguo Jia", "Yi Zhan", "Tianqi Zhao", "Hengzhi Ye", "Minghui Zhou"], "title": "Code Clone Detection via an AlphaFold-Inspired Framework", "comment": null, "summary": "Code clone detection, which aims to identify functionally equivalent code\nfragments, plays a critical role in software maintenance and vulnerability\nanalysis. Substantial methods have been proposed to detect code clones, but\nthey fall short in capturing code semantics or relying on language-specific\nanalyzers. Inspired by the remarkable success of AlphaFold in predicting\nthree-dimensional protein structures from protein sequences, in this paper, we\nleverage AlphaFold for code clone detection based on the insight that protein\nsequences and token sequences share a common linear sequential structure. In\nparticular, we propose AlphaCC, which represents code fragments as token\nsequences to ensure multi-language applicability and adapts AlphaFold's\nsequence-to-structure modeling capability to infer code semantics. The pipeline\nof AlphaCC goes through three steps. First, AlphaCC transforms each input code\nfragment into a token sequence and, motivated by AlphaFold's use of multiple\nsequence alignment (MSA) to enhance contextual understanding, constructs an MSA\nfrom lexically similar token sequences. Second, AlphaCC adopts a modified\nattention-based encoder based on AlphaFold to model dependencies within and\nacross token sequences. Finally, unlike AlphaFold's protein structure\nprediction task, AlphaCC computes similarity scores between token sequences\nthrough a late interaction strategy and performs binary classification to\ndetermine code clone pairs. Comprehensive evaluations on three language-diverse\ndatasets demonstrate AlphaCC's applicability across multiple programming\nlanguages. On two semantic clone detection datasets, it consistently\noutperforms all baselines, showing strong semantic understanding. Moreover,\nAlphaCC maintains competitive efficiency, enabling practical usage in\nlarge-scale clone detection tasks.", "AI": {"tldr": "AlphaCC\u5229\u7528AlphaFold\u7684\u5e8f\u5217\u5230\u7ed3\u6784\u5efa\u6a21\u80fd\u529b\uff0c\u901a\u8fc7\u591a\u8bed\u8a00\u9002\u7528\u7684\u4ee4\u724c\u5e8f\u5217\u8868\u793a\u4ee3\u7801\u7247\u6bb5\uff0c\u5b9e\u73b0\u8de8\u8bed\u8a00\u7684\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u3002", "motivation": "\u73b0\u6709\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u65b9\u6cd5\u96be\u4ee5\u6355\u6349\u4ee3\u7801\u8bed\u4e49\u6216\u4f9d\u8d56\u8bed\u8a00\u7279\u5b9a\u5206\u6790\u5668\uff0cAlphaCC\u53d7AlphaFold\u542f\u53d1\uff0c\u5229\u7528\u5176\u5e8f\u5217\u5efa\u6a21\u80fd\u529b\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "AlphaCC\u5c06\u4ee3\u7801\u7247\u6bb5\u8f6c\u6362\u4e3a\u4ee4\u724c\u5e8f\u5217\uff0c\u6784\u5efa\u591a\u5e8f\u5217\u5bf9\u9f50\u589e\u5f3a\u4e0a\u4e0b\u6587\u7406\u89e3\uff0c\u91c7\u7528\u6539\u8fdb\u7684\u6ce8\u610f\u529b\u7f16\u7801\u5668\u5efa\u6a21\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u901a\u8fc7\u76f8\u4f3c\u5ea6\u8bc4\u5206\u548c\u4e8c\u5143\u5206\u7c7b\u68c0\u6d4b\u514b\u9686\u3002", "result": "\u5728\u591a\u8bed\u8a00\u6570\u636e\u96c6\u4e0a\uff0cAlphaCC\u8868\u73b0\u4f18\u4e8e\u57fa\u7ebf\u65b9\u6cd5\uff0c\u5c55\u793a\u51fa\u5f3a\u5927\u7684\u8bed\u4e49\u7406\u89e3\u80fd\u529b\uff0c\u540c\u65f6\u4fdd\u6301\u9ad8\u6548\u6027\u3002", "conclusion": "AlphaCC\u4e3a\u8de8\u8bed\u8a00\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u63d0\u4f9b\u4e86\u4e00\u79cd\u9ad8\u6548\u4e14\u8bed\u4e49\u611f\u77e5\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.15241", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15241", "abs": "https://arxiv.org/abs/2507.15241", "authors": ["Vikram Nitin", "Baishakhi Ray", "Roshanak Zilouchian Moghaddam"], "title": "FaultLine: Automated Proof-of-Vulnerability Generation Using LLM Agents", "comment": null, "summary": "Despite the critical threat posed by software security vulnerabilities,\nreports are often incomplete, lacking the proof-of-vulnerability (PoV) tests\nneeded to validate fixes and prevent regressions. These tests are crucial not\nonly for ensuring patches work, but also for helping developers understand how\nvulnerabilities can be exploited. Generating PoV tests is a challenging\nproblem, requiring reasoning about the flow of control and data through deeply\nnested levels of a program.\n  We present FaultLine, an LLM agent workflow that uses a set of carefully\ndesigned reasoning steps, inspired by aspects of traditional static and dynamic\nprogram analysis, to automatically generate PoV test cases. Given a software\nproject with an accompanying vulnerability report, FaultLine 1) traces the flow\nof an input from an externally accessible API (\"source\") to the \"sink\"\ncorresponding to the vulnerability, 2) reasons about the conditions that an\ninput must satisfy in order to traverse the branch conditions encountered along\nthe flow, and 3) uses this reasoning to generate a PoV test case in a\nfeedback-driven loop. FaultLine does not use language-specific static or\ndynamic analysis components, which enables it to be used across programming\nlanguages.\n  To evaluate FaultLine, we collate a challenging multi-lingual dataset of 100\nknown vulnerabilities in Java, C and C++ projects. On this dataset, FaultLine\nis able to generate PoV tests for 16 projects, compared to just 9 for CodeAct\n2.1, a popular state-of-the-art open-source agentic framework. Thus, FaultLine\nrepresents a 77% relative improvement over the state of the art. Our findings\nsuggest that hierarchical reasoning can enhance the performance of LLM agents\non PoV test generation, but the problem in general remains challenging. We make\nour code and dataset publicly available in the hope that it will spur further\nresearch in this area.", "AI": {"tldr": "FaultLine\u662f\u4e00\u79cd\u57fa\u4e8eLLM\u4ee3\u7406\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u6f0f\u6d1e\u9a8c\u8bc1\u6d4b\u8bd5\uff08PoV\uff09\uff0c\u5728\u8de8\u8bed\u8a00\u73af\u5883\u4e2d\u8868\u73b0\u4f18\u4e8e\u73b0\u6709\u6280\u672f\u3002", "motivation": "\u8f6f\u4ef6\u5b89\u5168\u6f0f\u6d1e\u62a5\u544a\u5e38\u7f3a\u4e4f\u9a8c\u8bc1\u6f0f\u6d1e\u7684\u6d4b\u8bd5\uff08PoV\uff09\uff0c\u5bfc\u81f4\u4fee\u590d\u4e0d\u5f7b\u5e95\u6216\u56de\u5f52\u95ee\u9898\u3002\u751f\u6210PoV\u6d4b\u8bd5\u9700\u8981\u590d\u6742\u7684\u7a0b\u5e8f\u5206\u6790\uff0c\u4f20\u7edf\u65b9\u6cd5\u96be\u4ee5\u5e94\u5bf9\u3002", "method": "FaultLine\u901a\u8fc7\u8ffd\u8e2a\u8f93\u5165\u6d41\uff08\u4eceAPI\u5230\u6f0f\u6d1e\u70b9\uff09\u3001\u5206\u6790\u5206\u652f\u6761\u4ef6\uff0c\u5e76\u5229\u7528\u53cd\u9988\u5faa\u73af\u751f\u6210PoV\u6d4b\u8bd5\uff0c\u65e0\u9700\u4f9d\u8d56\u7279\u5b9a\u8bed\u8a00\u7684\u9759\u6001\u6216\u52a8\u6001\u5206\u6790\u5de5\u5177\u3002", "result": "\u5728100\u4e2a\u591a\u8bed\u8a00\u6f0f\u6d1e\u6570\u636e\u96c6\u4e2d\uff0cFaultLine\u6210\u529f\u751f\u621016\u4e2aPoV\u6d4b\u8bd5\uff0c\u4f18\u4e8eCodeAct 2.1\u76849\u4e2a\uff0c\u76f8\u5bf9\u6027\u80fd\u63d0\u534777%\u3002", "conclusion": "\u5206\u5c42\u63a8\u7406\u53ef\u63d0\u5347LLM\u4ee3\u7406\u5728PoV\u6d4b\u8bd5\u751f\u6210\u4e2d\u7684\u8868\u73b0\uff0c\u4f46\u95ee\u9898\u4ecd\u5177\u6311\u6218\u6027\u3002\u516c\u5f00\u4ee3\u7801\u548c\u6570\u636e\u96c6\u4ee5\u4fc3\u8fdb\u8fdb\u4e00\u6b65\u7814\u7a76\u3002"}}
{"id": "2507.15251", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15251", "abs": "https://arxiv.org/abs/2507.15251", "authors": ["Boyang Yang", "Luyao Ren", "Xin Yin", "Jiadong Ren", "Haoye Tian", "Shunfu Jin"], "title": "Input Reduction Enhanced LLM-based Program Repair", "comment": null, "summary": "Large Language Models (LLMs) have shown great potential in Automated Program\nRepair (APR). Test inputs, being crucial for reasoning the root cause of\nfailures, are always included in the prompt for LLM-based APR. Unfortunately,\nLLMs struggle to retain key information in long prompts. When the test inputs\nare extensive in the prompt, this may trigger the \"lost-in-the-middle\" issue,\ncompromising repair performance. To address this, we propose ReduceFix, an\nLLM-based APR approach with a built-in component that automatically reduces\ntest inputs while retaining their failure-inducing behavior. ReduceFix prompts\nan LLM to generate a reducer that minimizes failure-inducing test inputs\nwithout human effort, and then feeds the reduced failure-inducing inputs to\nguide patch generation.\n  For targeted evaluation, we constructed LFTBench, the first long-input APR\nbenchmark with 200 real bugs from 20 programming tasks, each paired with a\nfailure-inducing input whose median size is 1 MB. On this benchmark, ReduceFix\nshrinks inputs by 89.1% on average and improves overall pass@10 by up to 53.8%\nrelative to a prompt that includes the original test, and by 17.6% compared\nwith omitting the test entirely. Adding the same reduction step to ChatRepair\nincreases its fix rate by 21.3% without other changes. Ablation studies further\nhighlight the impact of input length and compressed failure information on\nrepair success. These results underscore that automatically reducing failing\ninputs is a practical and powerful complement to LLM-based APR, significantly\nimproving its scalability and effectiveness.", "AI": {"tldr": "ReduceFix\u901a\u8fc7\u81ea\u52a8\u7f29\u51cf\u6d4b\u8bd5\u8f93\u5165\u89e3\u51b3\u4e86LLM\u5728\u957f\u63d0\u793a\u4e2d\u4e22\u5931\u5173\u952e\u4fe1\u606f\u7684\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u7a0b\u5e8f\u4fee\u590d\u6027\u80fd\u3002", "motivation": "LLM\u5728\u957f\u63d0\u793a\u4e2d\u5bb9\u6613\u4e22\u5931\u5173\u952e\u4fe1\u606f\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u4fee\u590d\u6027\u80fd\u4e0b\u964d\uff0c\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u81ea\u52a8\u7f29\u51cf\u6d4b\u8bd5\u8f93\u5165\u3002", "method": "\u63d0\u51faReduceFix\uff0c\u901a\u8fc7LLM\u751f\u6210\u7f29\u51cf\u5668\u81ea\u52a8\u51cf\u5c11\u6d4b\u8bd5\u8f93\u5165\uff0c\u4fdd\u7559\u5176\u5931\u8d25\u8bf1\u5bfc\u884c\u4e3a\uff0c\u5e76\u7528\u4e8e\u6307\u5bfc\u8865\u4e01\u751f\u6210\u3002", "result": "\u5728LFTBench\u4e0a\uff0cReduceFix\u5e73\u5747\u7f29\u51cf\u8f93\u516589.1%\uff0c\u4fee\u590d\u6210\u529f\u7387\u63d0\u534753.8%\u3002", "conclusion": "\u81ea\u52a8\u7f29\u51cf\u5931\u8d25\u8f93\u5165\u662fLLM-based APR\u7684\u6709\u6548\u8865\u5145\uff0c\u663e\u8457\u63d0\u5347\u5176\u53ef\u6269\u5c55\u6027\u548c\u6548\u679c\u3002"}}
{"id": "2507.15296", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15296", "abs": "https://arxiv.org/abs/2507.15296", "authors": ["Qian Xiong", "Yuekai Huang", "Ziyou Jiang", "Zhiyuan Chang", "Yujia Zheng", "Tianhao Li", "Mingyang Li"], "title": "Butterfly Effects in Toolchains: A Comprehensive Analysis of Failed Parameter Filling in LLM Tool-Agent Systems", "comment": null, "summary": "The emergence of the tool agent paradigm has broadened the capability\nboundaries of the Large Language Model (LLM), enabling it to complete more\ncomplex tasks. However, the effectiveness of this paradigm is limited due to\nthe issue of parameter failure during its execution. To explore this phenomenon\nand propose corresponding suggestions, we first construct a parameter failure\ntaxonomy in this paper. We derive five failure categories from the invocation\nchain of a mainstream tool agent. Then, we explore the correlation between\nthree different input sources and failure categories by applying 15 input\nperturbation methods to the input. Experimental results show that parameter\nname hallucination failure primarily stems from inherent LLM limitations, while\nissues with input sources mainly cause other failure patterns. To improve the\nreliability and effectiveness of tool-agent interactions, we propose\ncorresponding improvement suggestions, including standardizing tool return\nformats, improving error feedback mechanisms, and ensuring parameter\nconsistency.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5de5\u5177\u4ee3\u7406\u8303\u5f0f\u4e2d\u53c2\u6570\u5931\u8d25\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u5206\u7c7b\u548c\u6539\u8fdb\u5efa\u8bae\u3002", "motivation": "\u5de5\u5177\u4ee3\u7406\u8303\u5f0f\u6269\u5c55\u4e86\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u7684\u80fd\u529b\uff0c\u4f46\u53c2\u6570\u5931\u8d25\u95ee\u9898\u9650\u5236\u4e86\u5176\u6709\u6548\u6027\u3002", "method": "\u6784\u5efa\u53c2\u6570\u5931\u8d25\u5206\u7c7b\uff0c\u901a\u8fc7\u8f93\u5165\u6270\u52a8\u65b9\u6cd5\u5206\u6790\u5931\u8d25\u539f\u56e0\u3002", "result": "\u53c2\u6570\u540d\u79f0\u5e7b\u89c9\u5931\u8d25\u6e90\u4e8eLLM\u56fa\u6709\u5c40\u9650\uff0c\u5176\u4ed6\u5931\u8d25\u6a21\u5f0f\u4e0e\u8f93\u5165\u6e90\u95ee\u9898\u76f8\u5173\u3002", "conclusion": "\u5efa\u8bae\u6807\u51c6\u5316\u5de5\u5177\u8fd4\u56de\u683c\u5f0f\u3001\u6539\u8fdb\u9519\u8bef\u53cd\u9988\u673a\u5236\u548c\u786e\u4fdd\u53c2\u6570\u4e00\u81f4\u6027\u4ee5\u63d0\u9ad8\u53ef\u9760\u6027\u3002"}}
{"id": "2507.15343", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15343", "abs": "https://arxiv.org/abs/2507.15343", "authors": ["Kechi Zhang", "Ge Li", "Jia Li", "Huangzhao Zhang", "Yihong Dong", "Jia Li", "Jingjing Xu", "Zhi Jin"], "title": "StackTrans: From Large Language Model to Large Pushdown Automata Model", "comment": "currently under development", "summary": "The Transformer architecture has emerged as a landmark advancement within the\nbroad field of artificial intelligence, effectively catalyzing the advent of\nlarge language models (LLMs). However, despite its remarkable capabilities and\nthe substantial progress it has facilitated, the Transformer architecture still\nhas some limitations. One such intrinsic limitation is its inability to\neffectively capture the Chomsky hierarchy, such as regular expressions or\ndeterministic context-free grammars. Drawing inspiration from pushdown\nautomata, which efficiently resolve deterministic context-free grammars using\nstacks, we propose StackTrans to address the aforementioned issue within LLMs.\nUnlike previous approaches that modify the attention computation, StackTrans\nexplicitly incorporates hidden state stacks between Transformer layers. This\ndesign maintains compatibility with existing frameworks like flash-attention.\nSpecifically, our design features stack operations -- such as pushing and\npopping hidden states -- that are differentiable and can be learned in an\nend-to-end manner. Our comprehensive evaluation spans benchmarks for both\nChomsky hierarchies and large-scale natural languages. Across these diverse\ntasks, StackTrans consistently outperforms standard Transformer models and\nother baselines. We have successfully scaled StackTrans up from 360M to 7B\nparameters. In particular, our from-scratch pretrained model StackTrans-360M\noutperforms several larger open-source LLMs with 2-3x more parameters,\nshowcasing its superior efficiency and reasoning capability.", "AI": {"tldr": "StackTrans\u901a\u8fc7\u5f15\u5165\u9690\u85cf\u72b6\u6001\u6808\u6765\u589e\u5f3aTransformer\u67b6\u6784\uff0c\u89e3\u51b3\u4e86\u5176\u65e0\u6cd5\u6709\u6548\u6355\u83b7Chomsky\u5c42\u6b21\u7ed3\u6784\uff08\u5982\u6b63\u5219\u8868\u8fbe\u5f0f\u6216\u786e\u5b9a\u6027\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\uff09\u7684\u95ee\u9898\uff0c\u5e76\u5728\u591a\u4e2a\u4efb\u52a1\u4e2d\u8868\u73b0\u4f18\u4e8e\u6807\u51c6Transformer\u6a21\u578b\u3002", "motivation": "Transformer\u67b6\u6784\u867d\u5f3a\u5927\uff0c\u4f46\u65e0\u6cd5\u6709\u6548\u5904\u7406Chomsky\u5c42\u6b21\u7ed3\u6784\uff0c\u5982\u6b63\u5219\u8868\u8fbe\u5f0f\u6216\u786e\u5b9a\u6027\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u3002\u53d7\u4e0b\u63a8\u81ea\u52a8\u673a\u7684\u542f\u53d1\uff0c\u63d0\u51faStackTrans\u4ee5\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "StackTrans\u5728Transformer\u5c42\u95f4\u5f15\u5165\u53ef\u5fae\u5206\u7684\u9690\u85cf\u72b6\u6001\u6808\u64cd\u4f5c\uff08\u5982\u538b\u6808\u548c\u5f39\u6808\uff09\uff0c\u4fdd\u6301\u4e0e\u73b0\u6709\u6846\u67b6\uff08\u5982flash-attention\uff09\u7684\u517c\u5bb9\u6027\uff0c\u5e76\u901a\u8fc7\u7aef\u5230\u7aef\u5b66\u4e60\u4f18\u5316\u3002", "result": "StackTrans\u5728Chomsky\u5c42\u6b21\u7ed3\u6784\u548c\u5927\u89c4\u6a21\u81ea\u7136\u8bed\u8a00\u4efb\u52a1\u4e2d\u5747\u4f18\u4e8e\u6807\u51c6Transformer\u53ca\u5176\u4ed6\u57fa\u7ebf\u6a21\u578b\uff0c\u5176360M\u53c2\u6570\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u751a\u81f3\u8d85\u8d8a\u4e86\u4e00\u4e9b\u53c2\u6570\u591a2-3\u500d\u7684\u5f00\u6e90\u5927\u6a21\u578b\u3002", "conclusion": "StackTrans\u901a\u8fc7\u5f15\u5165\u6808\u64cd\u4f5c\u663e\u8457\u63d0\u5347\u4e86Transformer\u5728\u590d\u6742\u8bed\u8a00\u7ed3\u6784\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff0c\u5c55\u793a\u4e86\u5176\u9ad8\u6548\u6027\u548c\u63a8\u7406\u80fd\u529b\u3002"}}
{"id": "2507.15599", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.15599", "abs": "https://arxiv.org/abs/2507.15599", "authors": ["Manatsawin Hanmongkolchai"], "title": "Applying the Chinese Wall Reverse Engineering Technique to Large Language Model Code Editing", "comment": null, "summary": "Large language models for code (Code LLM) are increasingly utilized in\nprogramming environments. Despite their utility, the training datasets for top\nLLM remain undisclosed, raising concerns about potential copyright violations.\nSome models, such as Pleias and Comma put emphasis on data curation and\nlicenses, however, with limited training data these models are not competitive\nand only serve as proof of concepts. To improve the utility of these models, we\npropose an application of the \"Chinese Wall\" technique, inspired by the reverse\nengineering technique of the same name -- a high quality model is used to\ngenerate detailed instructions for a weaker model. By doing so, a weaker but\nethically aligned model may be used to perform complicated tasks that,\notherwise, can only be completed by more powerful models. In our evaluation,\nwe've found that this technique improves Comma v0.1 1T's performance in\nCanItEdit benchmark by over 66%, and Starcoder2 Instruct by roughly 20%\ncompared to when running the same model on the benchmark alone. The practical\napplication of this technique today, however, may be limited due to the lack of\nmodels trained on public domain content without copyright restrictions.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u201c\u4e2d\u56fd\u5899\u201d\u6280\u672f\uff0c\u901a\u8fc7\u5f3a\u6a21\u578b\u751f\u6210\u6307\u4ee4\u6307\u5bfc\u5f31\u6a21\u578b\uff0c\u63d0\u5347\u5176\u6027\u80fd\uff0c\u4f46\u5b9e\u9645\u5e94\u7528\u53d7\u9650\u4e8e\u7f3a\u4e4f\u65e0\u7248\u6743\u95ee\u9898\u7684\u516c\u5f00\u8bad\u7ec3\u6570\u636e\u3002", "motivation": "\u5f53\u524d\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u7684\u8bad\u7ec3\u6570\u636e\u96c6\u672a\u516c\u5f00\uff0c\u5b58\u5728\u7248\u6743\u95ee\u9898\uff0c\u4e14\u90e8\u5206\u5f3a\u8c03\u6570\u636e\u8bb8\u53ef\u7684\u6a21\u578b\u56e0\u6570\u636e\u6709\u9650\u6027\u80fd\u4e0d\u8db3\u3002", "method": "\u5e94\u7528\u201c\u4e2d\u56fd\u5899\u201d\u6280\u672f\uff0c\u7528\u9ad8\u8d28\u91cf\u6a21\u578b\u751f\u6210\u6307\u4ee4\u6307\u5bfc\u5f31\u6a21\u578b\uff0c\u63d0\u5347\u5176\u590d\u6742\u4efb\u52a1\u5904\u7406\u80fd\u529b\u3002", "result": "\u5b9e\u9a8c\u663e\u793a\uff0c\u8be5\u6280\u672f\u4f7fComma v0.1 1T\u5728CanItEdit\u57fa\u51c6\u4e0a\u6027\u80fd\u63d0\u534766%\uff0cStarcoder2 Instruct\u63d0\u5347\u7ea620%\u3002", "conclusion": "\u8be5\u6280\u672f\u80fd\u63d0\u5347\u5f31\u6a21\u578b\u6027\u80fd\uff0c\u4f46\u56e0\u7f3a\u4e4f\u65e0\u7248\u6743\u95ee\u9898\u7684\u516c\u5f00\u8bad\u7ec3\u6570\u636e\uff0c\u5b9e\u9645\u5e94\u7528\u53d7\u9650\u3002"}}
{"id": "2507.15624", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15624", "abs": "https://arxiv.org/abs/2507.15624", "authors": ["Yusuf Sulistyo Nugroho", "Ganno Tribuana Kurniaji", "Syful Islam", "Mohammed Humayun Kabir", "Vanesya Aura Ardity", "Md. Kamal Uddin"], "title": "Hot Topics and Common Challenges: an Empirical Study of React Discussions on Stack Overflow", "comment": "6 pages, 4 figures, 4 tables, conference paper", "summary": "React is a JavaScript library used to build user interfaces for single-page\napplications. Although recent studies have shown the popularity and advantages\nof React in web development, the specific challenges users face remain unknown.\nThus, this study aims to analyse the React-related questions shared on Stack\nOverflow. The study utilizes an exploratory data analysis to investigate the\nmost frequently discussed keywords, error classification, and user\nreputation-based errors, which is the novelty of this work. The results show\nthe top eight most frequently used keywords on React-related questions, namely,\ncode, link, vir, href, connect, azure, windows, and website. The error\nclassification of questions from the sample shows that algorithmic error is the\nmost frequent issue faced by all groups of users, where mid-reputation users\ncontribute the most, accounting for 55.77%. This suggests the need for the\ncommunity to provide guidance materials in solving algorithm-related problems.\nWe expect that the results of this study will provide valuable insight into\nfuture research to support the React community during the early stages of\nimplementation, facilitating their ability to effectively overcome challenges\nto adoption.", "AI": {"tldr": "\u5206\u6790Stack Overflow\u4e0aReact\u76f8\u5173\u95ee\u9898\u7684\u7814\u7a76\uff0c\u53d1\u73b0\u9ad8\u9891\u5173\u952e\u8bcd\u3001\u9519\u8bef\u5206\u7c7b\u53ca\u7528\u6237\u58f0\u8a89\u4e0e\u9519\u8bef\u7684\u5173\u7cfb\uff0c\u63d0\u51fa\u793e\u533a\u9700\u63d0\u4f9b\u7b97\u6cd5\u95ee\u9898\u6307\u5bfc\u3002", "motivation": "\u5c3d\u7ba1React\u5728Web\u5f00\u53d1\u4e2d\u53d7\u6b22\u8fce\uff0c\u4f46\u7528\u6237\u9762\u4e34\u7684\u5177\u4f53\u6311\u6218\u5c1a\u4e0d\u660e\u786e\uff0c\u56e0\u6b64\u7814\u7a76\u65e8\u5728\u901a\u8fc7\u5206\u6790Stack Overflow\u95ee\u9898\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\u3002", "method": "\u91c7\u7528\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\u65b9\u6cd5\uff0c\u7814\u7a76React\u76f8\u5173\u95ee\u9898\u7684\u9ad8\u9891\u5173\u952e\u8bcd\u3001\u9519\u8bef\u5206\u7c7b\u53ca\u7528\u6237\u58f0\u8a89\u4e0e\u9519\u8bef\u7684\u5173\u7cfb\u3002", "result": "\u9ad8\u9891\u5173\u952e\u8bcd\u5305\u62eccode\u3001link\u7b49\uff1b\u7b97\u6cd5\u9519\u8bef\u662f\u6700\u5e38\u89c1\u95ee\u9898\uff0c\u4e2d\u58f0\u8a89\u7528\u6237\u8d21\u732e\u6700\u591a\uff0855.77%\uff09\u3002", "conclusion": "\u7814\u7a76\u7ed3\u679c\u4e3aReact\u793e\u533a\u63d0\u4f9b\u65e9\u671f\u5b9e\u65bd\u9636\u6bb5\u7684\u6307\u5bfc\u5efa\u8bae\uff0c\u5e2e\u52a9\u7528\u6237\u66f4\u6709\u6548\u514b\u670d\u6311\u6218\u3002"}}
{"id": "2507.15663", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15663", "abs": "https://arxiv.org/abs/2507.15663", "authors": ["Giordano d'Aloisio", "Tosin Fadahunsi", "Jay Choy", "Rebecca Moussa", "Federica Sarro"], "title": "SustainDiffusion: Optimising the Social and Environmental Sustainability of Stable Diffusion Models", "comment": null, "summary": "Background: Text-to-image generation models are widely used across numerous\ndomains. Among these models, Stable Diffusion (SD) - an open-source\ntext-to-image generation model - has become the most popular, producing over 12\nbillion images annually. However, the widespread use of these models raises\nconcerns regarding their social and environmental sustainability.\n  Aims: To reduce the harm that SD models may have on society and the\nenvironment, we introduce SustainDiffusion, a search-based approach designed to\nenhance the social and environmental sustainability of SD models.\n  Method: SustainDiffusion searches the optimal combination of hyperparameters\nand prompt structures that can reduce gender and ethnic bias in generated\nimages while also lowering the energy consumption required for image\ngeneration. Importantly, SustainDiffusion maintains image quality comparable to\nthat of the original SD model.\n  Results: We conduct a comprehensive empirical evaluation of SustainDiffusion,\ntesting it against six different baselines using 56 different prompts. Our\nresults demonstrate that SustainDiffusion can reduce gender bias in SD3 by 68%,\nethnic bias by 59%, and energy consumption (calculated as the sum of CPU and\nGPU energy) by 48%. Additionally, the outcomes produced by SustainDiffusion are\nconsistent across multiple runs and can be generalised to various prompts.\n  Conclusions: With SustainDiffusion, we demonstrate how enhancing the social\nand environmental sustainability of text-to-image generation models is possible\nwithout fine-tuning or changing the model's architecture.", "AI": {"tldr": "SustainDiffusion\u901a\u8fc7\u641c\u7d22\u6700\u4f73\u8d85\u53c2\u6570\u548c\u63d0\u793a\u7ed3\u6784\uff0c\u51cf\u5c11Stable Diffusion\u6a21\u578b\u7684\u6027\u522b\u548c\u79cd\u65cf\u504f\u89c1\u53ca\u80fd\u8017\uff0c\u540c\u65f6\u4fdd\u6301\u56fe\u50cf\u8d28\u91cf\u3002", "motivation": "\u89e3\u51b3Stable Diffusion\u6a21\u578b\u5728\u793e\u4f1a\u548c\u73af\u5883\u53ef\u6301\u7eed\u6027\u65b9\u9762\u7684\u8d1f\u9762\u5f71\u54cd\u3002", "method": "\u641c\u7d22\u4f18\u5316\u8d85\u53c2\u6570\u548c\u63d0\u793a\u7ed3\u6784\uff0c\u51cf\u5c11\u504f\u89c1\u548c\u80fd\u8017\u3002", "result": "\u6027\u522b\u504f\u89c1\u51cf\u5c1168%\uff0c\u79cd\u65cf\u504f\u89c1\u51cf\u5c1159%\uff0c\u80fd\u8017\u964d\u4f4e48%\u3002", "conclusion": "\u65e0\u9700\u8c03\u6574\u6a21\u578b\u67b6\u6784\u5373\u53ef\u63d0\u5347\u53ef\u6301\u7eed\u6027\u3002"}}
{"id": "2507.15666", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15666", "abs": "https://arxiv.org/abs/2507.15666", "authors": ["Igor Turkin", "Lina Volobuieva", "Andriy Chukhray", "Oleksandr Liubimov"], "title": "Modeling CubeSat Storage Battery Discharge: Equivalent Circuit Versus Machine Learning Approaches", "comment": "13 pages, 15 figures", "summary": "The subject of the article is the study and comparison of two approaches to\nmodelling the battery discharge of a CubeSat satellite: analytical using\nequivalent circuit and machine learning. The article aims to make a reasoned\nchoice of the approach to modelling the battery discharge of a CubeSat\nsatellite. Modelling the battery discharge of a satellite will enable the\nprediction of the consequences of disconnecting the autonomous power system and\nensure the fault tolerance of equipment in orbit. Therefore, the selected study\nis relevant and promising. This study focuses on the analysis of CubeSat\nsatellite data, based explicitly on orbital data samples of the power system,\nwhich include data available at the time of the article publication. The\ndataset contains data on the voltage, current, and temperature of the battery\nand solar panels attached to the five sides of the satellite. In this context,\ntwo approaches are considered: analytical modelling based on physical laws and\nmachine learning, which uses empirical data to create a predictive model.\nResults: A comparative analysis of the modeling results reveals that the\nequivalent circuit approach has the advantage of transparency, as it identifies\npossible parameters that facilitate understanding of the relationships.\nHowever, the model is less flexible to environmental changes or non-standard\nsatellite behavior. The machine learning model demonstrated more accurate\nresults, as it can account for complex dependencies and adapt to actual\nconditions, even when they deviate from theoretical assumptions.", "AI": {"tldr": "\u6587\u7ae0\u6bd4\u8f83\u4e86\u4e24\u79cd\u5efa\u6a21CubeSat\u536b\u661f\u7535\u6c60\u653e\u7535\u7684\u65b9\u6cd5\uff1a\u7b49\u6548\u7535\u8def\u5206\u6790\u548c\u673a\u5668\u5b66\u4e60\uff0c\u65e8\u5728\u4e3a\u536b\u661f\u7535\u6c60\u653e\u7535\u5efa\u6a21\u63d0\u4f9b\u5408\u7406\u9009\u62e9\u3002", "motivation": "\u7814\u7a76\u76ee\u7684\u662f\u9884\u6d4b\u81ea\u4e3b\u7535\u6e90\u7cfb\u7edf\u65ad\u5f00\u540e\u7684\u540e\u679c\uff0c\u786e\u4fdd\u8f68\u9053\u8bbe\u5907\u7684\u5bb9\u9519\u80fd\u529b\uff0c\u56e0\u6b64\u5177\u6709\u91cd\u8981\u6027\u548c\u524d\u666f\u3002", "method": "\u57fa\u4e8eCubeSat\u536b\u661f\u7684\u8f68\u9053\u6570\u636e\u6837\u672c\uff0c\u5305\u62ec\u7535\u538b\u3001\u7535\u6d41\u548c\u6e29\u5ea6\u6570\u636e\uff0c\u5bf9\u6bd4\u4e86\u57fa\u4e8e\u7269\u7406\u5b9a\u5f8b\u7684\u7b49\u6548\u7535\u8def\u5206\u6790\u548c\u57fa\u4e8e\u7ecf\u9a8c\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u3002", "result": "\u7b49\u6548\u7535\u8def\u5206\u6790\u900f\u660e\u4f46\u7075\u6d3b\u6027\u4e0d\u8db3\uff0c\u673a\u5668\u5b66\u4e60\u6a21\u578b\u66f4\u51c6\u786e\u4e14\u80fd\u9002\u5e94\u590d\u6742\u4f9d\u8d56\u548c\u5b9e\u9645\u6761\u4ef6\u3002", "conclusion": "\u673a\u5668\u5b66\u4e60\u5728\u5efa\u6a21CubeSat\u7535\u6c60\u653e\u7535\u65f6\u8868\u73b0\u66f4\u4f18\uff0c\u5c24\u5176\u5728\u5904\u7406\u975e\u6807\u51c6\u884c\u4e3a\u548c\u73af\u5883\u53d8\u5316\u65f6\u3002"}}
{"id": "2507.15671", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15671", "abs": "https://arxiv.org/abs/2507.15671", "authors": ["Jinyao Guo", "Chengpeng Wang", "Dominic Deluca", "Jinjie Liu", "Zhuo Zhang", "Xiangyu Zhang"], "title": "BugScope: Learn to Find Bugs Like Human", "comment": "19 pages, 2 figure, 6 tables, 4 listings", "summary": "Detecting software bugs remains a fundamental challenge due to the extensive\ndiversity of real-world defects. Traditional static analysis tools often rely\non symbolic workflows, which restrict their coverage and hinder adaptability to\ncustomized bugs with diverse anti-patterns. While recent advances incorporate\nlarge language models (LLMs) to enhance bug detection, these methods continue\nto struggle with sophisticated bugs and typically operate within limited\nanalysis contexts. To address these challenges, we propose BugScope, an\nLLM-driven multi-agent system that emulates how human auditors learn new bug\npatterns from representative examples and apply that knowledge during code\nauditing. Given a set of examples illustrating both buggy and non-buggy\nbehaviors, BugScope synthesizes a retrieval strategy to extract relevant\ndetection contexts via program slicing and then constructs a tailored detection\nprompt to guide accurate reasoning by the LLM. Our evaluation on a curated\ndataset of 40 real-world bugs drawn from 21 widely-used open-source projects\ndemonstrates that BugScope achieves 87.04% precision and 90.00% recall,\nsurpassing state-of-the-art industrial tools by 0.44 in F1 score. Further\ntesting on large-scale open-source systems, including the Linux kernel,\nuncovered 141 previously unknown bugs, of which 78 have been fixed and 7\nconfirmed by developers, highlighting BugScope's substantial practical impact.", "AI": {"tldr": "BugScope\u662f\u4e00\u79cd\u57fa\u4e8e\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u7684\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\uff0c\u901a\u8fc7\u6a21\u62df\u4eba\u7c7b\u5ba1\u8ba1\u5458\u5b66\u4e60\u65b0\u9519\u8bef\u6a21\u5f0f\u7684\u65b9\u5f0f\uff0c\u663e\u8457\u63d0\u5347\u4e86\u8f6f\u4ef6\u9519\u8bef\u68c0\u6d4b\u7684\u7cbe\u5ea6\u548c\u53ec\u56de\u7387\u3002", "motivation": "\u4f20\u7edf\u9759\u6001\u5206\u6790\u5de5\u5177\u5728\u8986\u76d6\u8303\u56f4\u548c\u9002\u5e94\u6027\u4e0a\u5b58\u5728\u5c40\u9650\uff0c\u800c\u73b0\u6709\u57fa\u4e8eLLM\u7684\u65b9\u6cd5\u5bf9\u590d\u6742\u9519\u8bef\u7684\u68c0\u6d4b\u80fd\u529b\u4e0d\u8db3\uff0c\u9700\u8981\u66f4\u7075\u6d3b\u7684\u7cfb\u7edf\u3002", "method": "BugScope\u901a\u8fc7\u7a0b\u5e8f\u5207\u7247\u63d0\u53d6\u76f8\u5173\u68c0\u6d4b\u4e0a\u4e0b\u6587\uff0c\u5e76\u6784\u5efa\u5b9a\u5236\u5316\u7684\u68c0\u6d4b\u63d0\u793a\uff0c\u6307\u5bfcLLM\u8fdb\u884c\u51c6\u786e\u63a8\u7406\u3002", "result": "\u572840\u4e2a\u771f\u5b9e\u9519\u8bef\u7684\u6570\u636e\u96c6\u4e0a\uff0cBugScope\u7684\u7cbe\u5ea6\u4e3a87.04%\uff0c\u53ec\u56de\u7387\u4e3a90.00%\uff0cF1\u5206\u6570\u4f18\u4e8e\u73b0\u6709\u5de5\u4e1a\u5de5\u5177\u3002\u5728Linux\u5185\u6838\u7b49\u5927\u89c4\u6a21\u7cfb\u7edf\u4e2d\u53d1\u73b0\u4e86141\u4e2a\u672a\u77e5\u9519\u8bef\u3002", "conclusion": "BugScope\u5c55\u793a\u4e86\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u663e\u8457\u6548\u679c\uff0c\u80fd\u591f\u9ad8\u6548\u68c0\u6d4b\u590d\u6742\u9519\u8bef\u5e76\u63a8\u52a8\u4fee\u590d\u3002"}}
{"id": "2507.15822", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15822", "abs": "https://arxiv.org/abs/2507.15822", "authors": ["Li Huang", "Ilgiz Mustafin", "Marco Piccioni", "Alessandro Schena", "Reto Weber", "Bertrand Meyer"], "title": "Do AI models help produce verified bug fixes?", "comment": null, "summary": "Among areas of software engineering where AI techniques -- particularly,\nLarge Language Models -- seem poised to yield dramatic improvements, an\nattractive candidate is Automatic Program Repair (APR), the production of\nsatisfactory corrections to software bugs. Does this expectation materialize in\npractice? How do we find out, making sure that proposed corrections actually\nwork? If programmers have access to LLMs, how do they actually use them to\ncomplement their own skills?\n  To answer these questions, we took advantage of the availability of a\nprogram-proving environment, which formally determines the correctness of\nproposed fixes, to conduct a study of program debugging with two randomly\nassigned groups of programmers, one with access to LLMs and the other without,\nboth validating their answers through the proof tools. The methodology relied\non a division into general research questions (Goals in the Goal-Query-Metric\napproach), specific elements admitting specific answers (Queries), and\nmeasurements supporting these answers (Metrics). While applied so far to a\nlimited sample size, the results are a first step towards delineating a proper\nrole for AI and LLMs in providing guaranteed-correct fixes to program bugs.\n  These results caused surprise as compared to what one might expect from the\nuse of AI for debugging and APR. The contributions also include: a detailed\nmethodology for experiments in the use of LLMs for debugging, which other\nprojects can reuse; a fine-grain analysis of programmer behavior, made possible\nby the use of full-session recording; a definition of patterns of use of LLMs,\nwith 7 distinct categories; and validated advice for getting the best of LLMs\nfor debugging and Automatic Program Repair.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86AI\uff08\u7279\u522b\u662f\u5927\u8bed\u8a00\u6a21\u578b\uff09\u5728\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\uff08APR\uff09\u4e2d\u7684\u5b9e\u9645\u6548\u679c\uff0c\u901a\u8fc7\u5b9e\u9a8c\u5bf9\u6bd4\u7a0b\u5e8f\u5458\u4f7f\u7528\u548c\u4e0d\u4f7f\u7528LLM\u7684\u8868\u73b0\uff0c\u53d1\u73b0\u4e86\u4e00\u4e9b\u51fa\u4e4e\u610f\u6599\u7684\u7ed3\u679c\uff0c\u5e76\u63d0\u51fa\u4e86\u65b9\u6cd5\u8bba\u548c\u4f7f\u7528\u6a21\u5f0f\u3002", "motivation": "\u7814\u7a76AI\uff08\u5c24\u5176\u662fLLM\uff09\u5728\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\u4e2d\u7684\u5b9e\u9645\u6548\u679c\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u5458\u5982\u4f55\u5229\u7528LLM\u63d0\u5347\u4fee\u590d\u80fd\u529b\u3002", "method": "\u91c7\u7528\u968f\u673a\u5206\u7ec4\u5b9e\u9a8c\uff0c\u4e00\u7ec4\u7a0b\u5e8f\u5458\u4f7f\u7528LLM\uff0c\u53e6\u4e00\u7ec4\u4e0d\u4f7f\u7528\uff0c\u901a\u8fc7\u7a0b\u5e8f\u9a8c\u8bc1\u5de5\u5177\u8bc4\u4f30\u4fee\u590d\u7684\u6b63\u786e\u6027\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u4e0e\u9884\u671f\u4e0d\u540c\uff0c\u63ed\u793a\u4e86LLM\u5728\u7a0b\u5e8f\u4fee\u590d\u4e2d\u7684\u5b9e\u9645\u4f5c\u7528\uff0c\u5e76\u603b\u7ed3\u4e867\u79cdLLM\u4f7f\u7528\u6a21\u5f0f\u3002", "conclusion": "\u8bba\u6587\u4e3aAI\u5728\u7a0b\u5e8f\u4fee\u590d\u4e2d\u7684\u89d2\u8272\u63d0\u4f9b\u4e86\u521d\u6b65\u754c\u5b9a\uff0c\u5e76\u63d0\u51fa\u4e86\u65b9\u6cd5\u8bba\u548c\u4f7f\u7528\u5efa\u8bae\u3002"}}
{"id": "2507.15828", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15828", "abs": "https://arxiv.org/abs/2507.15828", "authors": ["Mauro Marcelino", "Marcos Alves", "Bianca Trinkenreich", "Bruno Cartaxo", "S\u00e9rgio Soares", "Simone D. J. Barbosa", "Marcos Kalinowski"], "title": "Investigating the Use of LLMs for Evidence Briefings Generation in Software Engineering", "comment": "ESEM 2025 Registered Report with an IPA (In Principle Acceptance) for\n  the Empirical Software Engineering journal", "summary": "[Context] An evidence briefing is a concise and objective transfer medium\nthat can present the main findings of a study to software engineers in the\nindustry. Although practitioners and researchers have deemed Evidence Briefings\nuseful, their production requires manual labor, which may be a significant\nchallenge to their broad adoption. [Goal] The goal of this registered report is\nto describe an experimental protocol for evaluating LLM-generated evidence\nbriefings for secondary studies in terms of content fidelity, ease of\nunderstanding, and usefulness, as perceived by researchers and practitioners,\ncompared to human-made briefings. [Method] We developed an RAG-based LLM tool\nto generate evidence briefings. We used the tool to automatically generate two\nevidence briefings that had been manually generated in previous research\nefforts. We designed a controlled experiment to evaluate how the LLM-generated\nbriefings compare to the human-made ones regarding perceived content fidelity,\nease of understanding, and usefulness. [Results] To be reported after the\nexperimental trials. [Conclusion] Depending on the experiment results.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eRAG\u7684LLM\u5de5\u5177\uff0c\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u8bc1\u636e\u7b80\u62a5\uff0c\u5e76\u901a\u8fc7\u5b9e\u9a8c\u6bd4\u8f83\u5176\u4e0e\u4eba\u5de5\u7b80\u62a5\u5728\u5185\u5bb9\u4fdd\u771f\u5ea6\u3001\u6613\u7406\u89e3\u6027\u548c\u5b9e\u7528\u6027\u4e0a\u7684\u8868\u73b0\u3002", "motivation": "\u8bc1\u636e\u7b80\u62a5\u5bf9\u8f6f\u4ef6\u5de5\u7a0b\u884c\u4e1a\u6709\u4ef7\u503c\uff0c\u4f46\u4eba\u5de5\u5236\u4f5c\u6210\u672c\u9ad8\uff0c\u963b\u788d\u5176\u5e7f\u6cdb\u5e94\u7528\u3002\u672c\u6587\u65e8\u5728\u63a2\u7d22LLM\u751f\u6210\u7b80\u62a5\u7684\u53ef\u884c\u6027\u3002", "method": "\u5f00\u53d1RAG-based LLM\u5de5\u5177\u751f\u6210\u7b80\u62a5\uff0c\u8bbe\u8ba1\u5bf9\u7167\u5b9e\u9a8c\u6bd4\u8f83LLM\u4e0e\u4eba\u5de5\u7b80\u62a5\u7684\u6548\u679c\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u5f85\u62a5\u544a\u3002", "conclusion": "\u7ed3\u8bba\u5c06\u57fa\u4e8e\u5b9e\u9a8c\u7ed3\u679c\u800c\u5b9a\u3002"}}
{"id": "2507.15831", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15831", "abs": "https://arxiv.org/abs/2507.15831", "authors": ["Sergey Titov", "Konstantin Grotov", "Cristina Sarasua", "Yaroslav Golubev", "Dhivyabharathi Ramasamy", "Alberto Bacchelli", "Abraham Bernstein", "Timofey Bryksin"], "title": "Observing Fine-Grained Changes in Jupyter Notebooks During Development Time", "comment": "32 pages, 6 figures", "summary": "In software engineering, numerous studies have focused on the analysis of\nfine-grained logs, leading to significant innovations in areas such as\nrefactoring, security, and code completion. However, no similar studies have\nbeen conducted for computational notebooks in the context of data science.\n  To help bridge this research gap, we make three scientific contributions: we\n(1) introduce a toolset for collecting code changes in Jupyter notebooks during\ndevelopment time; (2) use it to collect more than 100 hours of work related to\na data analysis task and a machine learning task (carried out by 20 developers\nwith different levels of expertise), resulting in a dataset containing 2,655\ncells and 9,207 cell executions; and (3) use this dataset to investigate the\ndynamic nature of the notebook development process and the changes that take\nplace in the notebooks.\n  In our analysis of the collected data, we classified the changes made to the\ncells between executions and found that a significant number of these changes\nwere relatively small fixes and code iteration modifications. This suggests\nthat notebooks are used not only as a development and exploration tool but also\nas a debugging tool. We report a number of other insights and propose potential\nfuture research directions on the novel data.", "AI": {"tldr": "\u8be5\u8bba\u6587\u586b\u8865\u4e86\u6570\u636e\u79d1\u5b66\u4e2d\u8ba1\u7b97\u7b14\u8bb0\u672c\u52a8\u6001\u5f00\u53d1\u8fc7\u7a0b\u7684\u7814\u7a76\u7a7a\u767d\uff0c\u901a\u8fc7\u5de5\u5177\u96c6\u6536\u96c6\u548c\u5206\u6790Jupyter\u7b14\u8bb0\u672c\u7684\u4ee3\u7801\u53d8\u66f4\uff0c\u63ed\u793a\u4e86\u7b14\u8bb0\u672c\u4f5c\u4e3a\u5f00\u53d1\u548c\u8c03\u8bd5\u5de5\u5177\u7684\u53cc\u91cd\u7528\u9014\u3002", "motivation": "\u73b0\u6709\u7814\u7a76\u591a\u5173\u6ce8\u7ec6\u7c92\u5ea6\u65e5\u5fd7\u5206\u6790\uff0c\u4f46\u7f3a\u4e4f\u5bf9\u6570\u636e\u79d1\u5b66\u4e2d\u8ba1\u7b97\u7b14\u8bb0\u672c\u5f00\u53d1\u8fc7\u7a0b\u7684\u7814\u7a76\u3002", "method": "\u5f15\u5165\u5de5\u5177\u96c6\u6536\u96c6Jupyter\u7b14\u8bb0\u672c\u5f00\u53d1\u65f6\u7684\u4ee3\u7801\u53d8\u66f4\uff0c\u6536\u96c620\u540d\u5f00\u53d1\u8005\u7684100\u591a\u5c0f\u65f6\u5de5\u4f5c\u6570\u636e\uff0c\u5206\u67902,655\u4e2a\u5355\u5143\u683c\u548c9,207\u6b21\u6267\u884c\u7684\u52a8\u6001\u53d8\u5316\u3002", "result": "\u53d1\u73b0\u7b14\u8bb0\u672c\u4e2d\u5927\u91cf\u53d8\u66f4\u4e3a\u5c0f\u4fee\u590d\u548c\u4ee3\u7801\u8fed\u4ee3\uff0c\u8868\u660e\u7b14\u8bb0\u672c\u517c\u5177\u5f00\u53d1\u548c\u8c03\u8bd5\u529f\u80fd\u3002", "conclusion": "\u7814\u7a76\u63ed\u793a\u4e86\u7b14\u8bb0\u672c\u5f00\u53d1\u7684\u52a8\u6001\u7279\u6027\uff0c\u5e76\u63d0\u51fa\u4e86\u672a\u6765\u7814\u7a76\u65b9\u5411\u3002"}}
